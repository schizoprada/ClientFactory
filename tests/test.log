2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (TestComponent)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (TestComponent)
2025-03-24 17:29:34 | DEBUG | DeclarativeComponent: Processing Attribute (attribute) on: TestComponent
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {}, 'methods': {}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {}, 'attribute': 'value'}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Parent)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 17:29:34 | DEBUG | DeclarativeComponent: Processing Attribute (parent_attr) on: Parent
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {}, 'methods': {}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent'}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (Parent) to (Child)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 17:29:34 | DEBUG | DeclarativeComponent: Processing Attribute (child_attr) on: Child
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {}, 'methods': {}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (NestedComponent)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (NestedComponent)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (NestedComponent)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (NestedComponent) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {}, 'methods': {}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: found callable (method) on: Container
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: registered method (method) on: Container
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: found class (NestedComponent) on (Container)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: class (NestedComponent) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: registered component (None) on: Container
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeComponent: Processing Attribute (attr) on: Test
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value'}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (Declarative)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Declarative)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (Declarative)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (Declarative) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff'}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (Source)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Source)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (Source)
2025-03-24 17:29:34 | DEBUG | DeclarativeComponent: Processing Attribute (a) on: Source
2025-03-24 17:29:34 | DEBUG | DeclarativeComponent: Processing Attribute (b) on: Source
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (Source) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (Target)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Target)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (Target)
2025-03-24 17:29:34 | DEBUG | DeclarativeComponent: Processing Attribute (c) on: Target
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (Target) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (Component)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Component)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (Component)
2025-03-24 17:29:34 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: Component
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (Component) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: found class (Component) on (Container)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: class (Component) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: Container
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 17:29:34 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: TestClient
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: TestClient
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | DeclarativeClient: found resource (mycomponent) on: TestClient
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: found class (TestResource) on (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: Test
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | DeclarativeClient: found resource (mycomponent) on: Test
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | client: converted (Test) to declarative client
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '/test', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: registered component (myresource) on: TestClient
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '/test', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | DeclarativeClient: found resource (myresource) on: TestClient
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '/test', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | client: converted (TestClient) to declarative client
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (BaseResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (BaseResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (BaseResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: BaseResource
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: completed processing for (BaseResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '/base', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (BaseResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '/base', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | resource: converted (BaseResource) to declarative resource
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (BaseClient)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (BaseClient)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (BaseClient)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseClient)
2025-03-24 17:29:34 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: BaseClient
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: found class (BaseResource) on (BaseClient)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: class (BaseResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '/base', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: registered component (myresource) on: BaseClient
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: completed processing for (BaseClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '/base', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | DeclarativeClient: found resource (myresource) on: BaseClient
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (BaseClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '/base', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (ChildResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (ChildResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (ChildResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: ChildResource
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: completed processing for (ChildResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (ChildResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | resource: converted (ChildResource) to declarative resource
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (ChildClient)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (BaseClient) to (ChildClient)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (ChildClient)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildClient)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: found class (ChildResource) on (ChildClient)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: class (ChildResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: registered component (myresource) on: ChildClient
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: completed processing for (ChildClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | DeclarativeClient: found resource (myresource) on: ChildClient
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (ChildClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test'}
2025-03-24 17:29:34 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test'}
2025-03-24 17:29:34 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (Nested)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Nested)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (Nested)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (Nested) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104719760>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: found callable (method) on: Test
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: registered method (method) on: Test
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: found class (Nested) on (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: class (Nested) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x10476c540>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: registered component (myresource) on: Test
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x10476c540>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x10476c540>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:29:34 | DEBUG | container: converted (Test) to declarative container
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x10476c540>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x10476c540>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:29:34 | DEBUG | container: converted (Test) to declarative container
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:29:34 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: TestResource
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x10476c540>}, 'path': '/test', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x10476c540>}, 'path': '/test', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (GrandChild)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (GrandChild)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (GrandChild)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: starting attribute processing for (GrandChild)
2025-03-24 17:29:34 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: GrandChild
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: completed processing for (GrandChild) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x10476c540>}, 'path': 'grandchild', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (GrandChild) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x10476c540>}, 'path': 'grandchild', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:29:34 | DEBUG | resource: converted (GrandChild) to declarative resource
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Child)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: starting attribute processing for (Child)
2025-03-24 17:29:34 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Child
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: found class (GrandChild) on (Child)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: class (GrandChild) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x10476c540>}, 'path': 'child', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: registered component (test_resource) on: Child
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: completed processing for (Child) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x10476c540>}, 'path': 'child', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x10476c540>}, 'path': 'child', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:29:34 | DEBUG | resource: converted (Child) to declarative resource
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Parent)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: starting attribute processing for (Parent)
2025-03-24 17:29:34 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Parent
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: found class (Child) on (Parent)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: class (Child) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x10476c540>}, 'path': '/parent', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: registered component (test_resource) on: Parent
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: completed processing for (Parent) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x10476c540>}, 'path': '/parent', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x10476c540>}, 'path': '/parent', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x10476c540>}, 'path': '/parent', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x10476c540>}, 'path': '/parent', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:29:34 | DEBUG | resource: converted (Test) to declarative resource
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: found callable (test_method) on: TestResource
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: registered method (test_method) on: TestResource
2025-03-24 17:29:34 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x10476c540>, 'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x1047182c0>}, 'path': '/test', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:29:34 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1046c9da0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1046c9e40>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1046c9ee0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1046c9f80>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1046ca020>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046ca0c0>)>, 'components': {None: <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x10476c540>, 'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x1047182c0>}, 'path': '/test', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1046caa20>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1046caac0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1046cab60>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1046cb100>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1046cb1a0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (TestComponent)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: processing attributes for (TestComponent)
2025-03-24 17:32:05 | DEBUG | DeclarativeComponent: Processing Attribute (attribute) on: TestComponent
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {}, 'methods': {}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {}, 'attribute': 'value'}
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Parent)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 17:32:05 | DEBUG | DeclarativeComponent: Processing Attribute (parent_attr) on: Parent
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {}, 'methods': {}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent'}
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: copyinh metadata from base (Parent) to (Child)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 17:32:05 | DEBUG | DeclarativeComponent: Processing Attribute (child_attr) on: Child
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {}, 'methods': {}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: creating class (NestedComponent)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (NestedComponent)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: processing attributes for (NestedComponent)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: completed creation of (NestedComponent) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {}, 'methods': {}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: found callable (method) on: Container
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: registered method (method) on: Container
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: found class (NestedComponent) on (Container)
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: class (NestedComponent) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: registered component (nestedcomponent) on: Container
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:32:05 | DEBUG | DeclarativeComponent: Processing Attribute (attr) on: Test
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value'}
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: creating class (Declarative)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Declarative)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: processing attributes for (Declarative)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: completed creation of (Declarative) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff'}
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: creating class (Source)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Source)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: processing attributes for (Source)
2025-03-24 17:32:05 | DEBUG | DeclarativeComponent: Processing Attribute (a) on: Source
2025-03-24 17:32:05 | DEBUG | DeclarativeComponent: Processing Attribute (b) on: Source
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: completed creation of (Source) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: creating class (Target)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Target)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: processing attributes for (Target)
2025-03-24 17:32:05 | DEBUG | DeclarativeComponent: Processing Attribute (c) on: Target
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: completed creation of (Target) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: creating class (Component)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Component)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: processing attributes for (Component)
2025-03-24 17:32:05 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: Component
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: completed creation of (Component) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: found class (Component) on (Container)
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: class (Component) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: Container
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:05 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 17:32:05 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: TestClient
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: TestClient
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:05 | DEBUG | DeclarativeClient: found resource (mycomponent) on: TestClient
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:32:05 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:05 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (Test)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: found class (TestResource) on (Test)
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: Test
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:05 | DEBUG | DeclarativeClient: found resource (mycomponent) on: Test
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:05 | DEBUG | client: converted (Test) to declarative client
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:32:05 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '/test', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: registered component (myresource) on: TestClient
2025-03-24 17:32:05 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '/test', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:05 | DEBUG | DeclarativeClient: found resource (myresource) on: TestClient
2025-03-24 17:32:05 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '/test', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:05 | DEBUG | client: converted (TestClient) to declarative client
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: creating class (BaseResource)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (BaseResource)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: processing attributes for (BaseResource)
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseResource)
2025-03-24 17:32:06 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: BaseResource
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: completed processing for (BaseResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '/base', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: completed creation of (BaseResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '/base', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:06 | DEBUG | resource: converted (BaseResource) to declarative resource
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: creating class (BaseClient)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (BaseClient)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: processing attributes for (BaseClient)
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseClient)
2025-03-24 17:32:06 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: BaseClient
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: found class (BaseResource) on (BaseClient)
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: class (BaseResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '/base', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: registered component (myresource) on: BaseClient
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: completed processing for (BaseClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '/base', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:06 | DEBUG | DeclarativeClient: found resource (myresource) on: BaseClient
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: completed creation of (BaseClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '/base', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: creating class (ChildResource)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (ChildResource)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: processing attributes for (ChildResource)
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildResource)
2025-03-24 17:32:06 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: ChildResource
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: completed processing for (ChildResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: completed creation of (ChildResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:06 | DEBUG | resource: converted (ChildResource) to declarative resource
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: creating class (ChildClient)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: copyinh metadata from base (BaseClient) to (ChildClient)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: processing attributes for (ChildClient)
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildClient)
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: found class (ChildResource) on (ChildClient)
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: class (ChildResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: registered component (myresource) on: ChildClient
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: completed processing for (ChildClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:06 | DEBUG | DeclarativeClient: found resource (myresource) on: ChildClient
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: completed creation of (ChildClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:32:06 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test'}
2025-03-24 17:32:06 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test'}
2025-03-24 17:32:06 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: creating class (Nested)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Nested)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: processing attributes for (Nested)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: completed creation of (Nested) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a05800>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:32:06 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: found callable (method) on: Test
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: registered method (method) on: Test
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: found class (Nested) on (Test)
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: class (Nested) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102a484a0>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: registered component (myresource) on: Test
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102a484a0>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102a484a0>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:32:06 | DEBUG | container: converted (Test) to declarative container
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102a484a0>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102a484a0>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:32:06 | DEBUG | container: converted (Test) to declarative container
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:32:06 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:32:06 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: TestResource
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102a484a0>}, 'path': '/test', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102a484a0>}, 'path': '/test', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: creating class (GrandChild)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (GrandChild)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: processing attributes for (GrandChild)
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: starting attribute processing for (GrandChild)
2025-03-24 17:32:06 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: GrandChild
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: completed processing for (GrandChild) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102a484a0>}, 'path': 'grandchild', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: completed creation of (GrandChild) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102a484a0>}, 'path': 'grandchild', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:32:06 | DEBUG | resource: converted (GrandChild) to declarative resource
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Child)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: starting attribute processing for (Child)
2025-03-24 17:32:06 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Child
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: found class (GrandChild) on (Child)
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: class (GrandChild) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102a484a0>}, 'path': 'child', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: registered component (test_resource) on: Child
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: completed processing for (Child) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102a484a0>}, 'path': 'child', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102a484a0>}, 'path': 'child', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:32:06 | DEBUG | resource: converted (Child) to declarative resource
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Parent)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: starting attribute processing for (Parent)
2025-03-24 17:32:06 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Parent
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: found class (Child) on (Parent)
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: class (Child) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102a484a0>}, 'path': '/parent', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: registered component (test_resource) on: Parent
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: completed processing for (Parent) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102a484a0>}, 'path': '/parent', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102a484a0>}, 'path': '/parent', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Test)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102a484a0>}, 'path': '/parent', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102a484a0>}, 'path': '/parent', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:32:06 | DEBUG | resource: converted (Test) to declarative resource
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: found callable (test_method) on: TestResource
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: registered method (test_method) on: TestResource
2025-03-24 17:32:06 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102a484a0>, 'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x102a482c0>}, 'path': '/test', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:32:06 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1029a9ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1029a9f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1029aa020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1029aa0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1029aa160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1029aa200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102a484a0>, 'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x102a482c0>}, 'path': '/test', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1029aab60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1029aac00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1029aaca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1029ab1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1029ab240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (TestComponent)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (TestComponent)
2025-03-24 17:34:34 | DEBUG | DeclarativeComponent: Processing Attribute (attribute) on: TestComponent
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {}, 'methods': {}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {}, 'attribute': 'value'}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Parent)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 17:34:34 | DEBUG | DeclarativeComponent: Processing Attribute (parent_attr) on: Parent
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {}, 'methods': {}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent'}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (Parent) to (Child)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 17:34:34 | DEBUG | DeclarativeComponent: Processing Attribute (child_attr) on: Child
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {}, 'methods': {}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (NestedComponent)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (NestedComponent)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (NestedComponent)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (NestedComponent) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {}, 'methods': {}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: found callable (method) on: Container
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: registered method (method) on: Container
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: found class (NestedComponent) on (Container)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: class (NestedComponent) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: registered component (nestedcomponent) on: Container
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeComponent: Processing Attribute (attr) on: Test
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value'}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (Declarative)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Declarative)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (Declarative)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (Declarative) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff'}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (Source)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Source)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (Source)
2025-03-24 17:34:34 | DEBUG | DeclarativeComponent: Processing Attribute (a) on: Source
2025-03-24 17:34:34 | DEBUG | DeclarativeComponent: Processing Attribute (b) on: Source
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (Source) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (Target)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Target)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (Target)
2025-03-24 17:34:34 | DEBUG | DeclarativeComponent: Processing Attribute (c) on: Target
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (Target) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (Component)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Component)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (Component)
2025-03-24 17:34:34 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: Component
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (Component) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: found class (Component) on (Container)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: class (Component) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: Container
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 17:34:34 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: TestClient
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: TestClient
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | DeclarativeClient: found resource (mycomponent) on: TestClient
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: found class (TestResource) on (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: Test
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | DeclarativeClient: found resource (mycomponent) on: Test
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | client: converted (Test) to declarative client
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '/test', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: registered component (myresource) on: TestClient
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '/test', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | DeclarativeClient: found resource (myresource) on: TestClient
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '/test', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | client: converted (TestClient) to declarative client
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (BaseResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (BaseResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (BaseResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: BaseResource
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: completed processing for (BaseResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '/base', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (BaseResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '/base', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | resource: converted (BaseResource) to declarative resource
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (BaseClient)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (BaseClient)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (BaseClient)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseClient)
2025-03-24 17:34:34 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: BaseClient
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: found class (BaseResource) on (BaseClient)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: class (BaseResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '/base', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: registered component (myresource) on: BaseClient
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: completed processing for (BaseClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '/base', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | DeclarativeClient: found resource (myresource) on: BaseClient
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (BaseClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '/base', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (ChildResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (ChildResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (ChildResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: ChildResource
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: completed processing for (ChildResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (ChildResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | resource: converted (ChildResource) to declarative resource
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (ChildClient)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (BaseClient) to (ChildClient)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (ChildClient)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildClient)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: found class (ChildResource) on (ChildClient)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: class (ChildResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: registered component (myresource) on: ChildClient
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: completed processing for (ChildClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | DeclarativeClient: found resource (myresource) on: ChildClient
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (ChildClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test'}
2025-03-24 17:34:34 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test'}
2025-03-24 17:34:34 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (Nested)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Nested)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (Nested)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (Nested) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104811800>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: found callable (method) on: Test
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: registered method (method) on: Test
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: found class (Nested) on (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: class (Nested) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1048504a0>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: registered component (myresource) on: Test
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1048504a0>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1048504a0>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:34:34 | DEBUG | container: converted (Test) to declarative container
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1048504a0>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1048504a0>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:34:34 | DEBUG | container: converted (Test) to declarative container
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:34:34 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: TestResource
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1048504a0>}, 'path': '/test', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1048504a0>}, 'path': '/test', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (GrandChild)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (GrandChild)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (GrandChild)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: starting attribute processing for (GrandChild)
2025-03-24 17:34:34 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: GrandChild
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: completed processing for (GrandChild) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1048504a0>}, 'path': 'grandchild', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (GrandChild) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1048504a0>}, 'path': 'grandchild', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:34:34 | DEBUG | resource: converted (GrandChild) to declarative resource
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Child)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: starting attribute processing for (Child)
2025-03-24 17:34:34 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Child
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: found class (GrandChild) on (Child)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: class (GrandChild) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1048504a0>}, 'path': 'child', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: registered component (test_resource) on: Child
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: completed processing for (Child) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1048504a0>}, 'path': 'child', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1048504a0>}, 'path': 'child', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:34:34 | DEBUG | resource: converted (Child) to declarative resource
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Parent)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: starting attribute processing for (Parent)
2025-03-24 17:34:34 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Parent
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: found class (Child) on (Parent)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: class (Child) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1048504a0>}, 'path': '/parent', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: registered component (test_resource) on: Parent
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: completed processing for (Parent) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1048504a0>}, 'path': '/parent', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1048504a0>}, 'path': '/parent', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1048504a0>}, 'path': '/parent', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1048504a0>}, 'path': '/parent', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:34:34 | DEBUG | resource: converted (Test) to declarative resource
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: found callable (test_method) on: TestResource
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: registered method (test_method) on: TestResource
2025-03-24 17:34:34 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1048504a0>, 'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x1048502c0>}, 'path': '/test', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:34:34 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1047b1ee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1047b1f80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1047b2020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1047b20c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1047b2160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1047b2200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1048504a0>, 'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x1048502c0>}, 'path': '/test', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1047b2b60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1047b2c00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1047b2ca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1047b31a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1047b3240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'c': 3, 'value': 'test', 'key': 'value'}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (TestComponent)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (TestComponent)
2025-03-24 17:36:13 | DEBUG | DeclarativeComponent: Processing Attribute (attribute) on: TestComponent
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {}, 'methods': {}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {}, 'attribute': 'value'}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Parent)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 17:36:13 | DEBUG | DeclarativeComponent: Processing Attribute (parent_attr) on: Parent
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {}, 'methods': {}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent'}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (Parent) to (Child)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 17:36:13 | DEBUG | DeclarativeComponent: Processing Attribute (child_attr) on: Child
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {}, 'methods': {}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (NestedComponent)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (NestedComponent)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (NestedComponent)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (NestedComponent) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {}, 'methods': {}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: found callable (method) on: Container
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: registered method (method) on: Container
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: found class (NestedComponent) on (Container)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: class (NestedComponent) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: registered component (nestedcomponent) on: Container
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeComponent: Processing Attribute (attr) on: Test
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value'}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (Declarative)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Declarative)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (Declarative)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (Declarative) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff'}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (Source)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Source)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (Source)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (Source) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff'}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (Target)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Target)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (Target)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (Target) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (Component)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Component)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (Component)
2025-03-24 17:36:13 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: Component
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (Component) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: found class (Component) on (Container)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: class (Component) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: Container
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 17:36:13 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: TestClient
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: TestClient
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | DeclarativeClient: found resource (mycomponent) on: TestClient
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: found class (TestResource) on (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: Test
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | DeclarativeClient: found resource (mycomponent) on: Test
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | client: converted (Test) to declarative client
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '/test', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: registered component (myresource) on: TestClient
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '/test', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | DeclarativeClient: found resource (myresource) on: TestClient
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '/test', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | client: converted (TestClient) to declarative client
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (BaseResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (BaseResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (BaseResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: BaseResource
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: completed processing for (BaseResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '/base', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (BaseResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '/base', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | resource: converted (BaseResource) to declarative resource
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (BaseClient)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (BaseClient)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (BaseClient)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseClient)
2025-03-24 17:36:13 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: BaseClient
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: found class (BaseResource) on (BaseClient)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: class (BaseResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '/base', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: registered component (myresource) on: BaseClient
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: completed processing for (BaseClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '/base', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | DeclarativeClient: found resource (myresource) on: BaseClient
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (BaseClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '/base', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (ChildResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (ChildResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (ChildResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: ChildResource
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: completed processing for (ChildResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (ChildResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | resource: converted (ChildResource) to declarative resource
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (ChildClient)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (BaseClient) to (ChildClient)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (ChildClient)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildClient)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: found class (ChildResource) on (ChildClient)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: class (ChildResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: registered component (myresource) on: ChildClient
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: completed processing for (ChildClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | DeclarativeClient: found resource (myresource) on: ChildClient
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (ChildClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test'}
2025-03-24 17:36:13 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test'}
2025-03-24 17:36:13 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (Nested)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Nested)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (Nested)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (Nested) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10252d8a0>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: found callable (method) on: Test
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: registered method (method) on: Test
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: found class (Nested) on (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: class (Nested) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1025bc400>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: registered component (myresource) on: Test
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1025bc400>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1025bc400>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:36:13 | DEBUG | container: converted (Test) to declarative container
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1025bc400>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1025bc400>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:36:13 | DEBUG | container: converted (Test) to declarative container
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:36:13 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: TestResource
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1025bc400>}, 'path': '/test', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1025bc400>}, 'path': '/test', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (GrandChild)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (GrandChild)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (GrandChild)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: starting attribute processing for (GrandChild)
2025-03-24 17:36:13 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: GrandChild
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: completed processing for (GrandChild) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1025bc400>}, 'path': 'grandchild', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (GrandChild) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1025bc400>}, 'path': 'grandchild', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:36:13 | DEBUG | resource: converted (GrandChild) to declarative resource
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Child)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: starting attribute processing for (Child)
2025-03-24 17:36:13 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Child
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: found class (GrandChild) on (Child)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: class (GrandChild) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1025bc400>}, 'path': 'child', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: registered component (test_resource) on: Child
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: completed processing for (Child) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1025bc400>}, 'path': 'child', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1025bc400>}, 'path': 'child', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:36:13 | DEBUG | resource: converted (Child) to declarative resource
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Parent)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: starting attribute processing for (Parent)
2025-03-24 17:36:13 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Parent
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: found class (Child) on (Parent)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: class (Child) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1025bc400>}, 'path': '/parent', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: registered component (test_resource) on: Parent
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: completed processing for (Parent) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1025bc400>}, 'path': '/parent', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1025bc400>}, 'path': '/parent', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1025bc400>}, 'path': '/parent', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1025bc400>}, 'path': '/parent', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:36:13 | DEBUG | resource: converted (Test) to declarative resource
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: found callable (test_method) on: TestResource
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: registered method (test_method) on: TestResource
2025-03-24 17:36:13 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1025bc400>, 'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x1025bc7c0>}, 'path': '/test', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:36:13 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1024f5f80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1024f6020>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1024f60c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1024f6160>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1024f6200>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1024f62a0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1025bc400>, 'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x1025bc7c0>}, 'path': '/test', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x1024f6c00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x1024f6ca0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x1024f6d40>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1024f7240>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1024f72e0>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (TestComponent)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (TestComponent)
2025-03-24 17:37:42 | DEBUG | DeclarativeComponent: Processing Attribute (attribute) on: TestComponent
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {}, 'methods': {}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {}, 'attribute': 'value'}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Parent)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 17:37:42 | DEBUG | DeclarativeComponent: Processing Attribute (parent_attr) on: Parent
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {}, 'methods': {}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent'}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (Parent) to (Child)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 17:37:42 | DEBUG | DeclarativeComponent: Processing Attribute (child_attr) on: Child
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {}, 'methods': {}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (NestedComponent)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (NestedComponent)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (NestedComponent)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (NestedComponent) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {}, 'methods': {}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: found callable (method) on: Container
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: registered method (method) on: Container
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: found class (NestedComponent) on (Container)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: class (NestedComponent) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: registered component (nestedcomponent) on: Container
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeComponent: Processing Attribute (attr) on: Test
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value'}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (Declarative)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Declarative)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (Declarative)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (Declarative) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff'}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (Source)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Source)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (Source)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (Source) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff'}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (Target)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Target)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (Target)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (Target) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '', 'name': None, 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (Component)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Component)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (Component)
2025-03-24 17:37:42 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: Component
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (Component) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: found class (Component) on (Container)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: class (Component) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: Container
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 17:37:42 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: TestClient
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: TestClient
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | DeclarativeClient: found resource (mycomponent) on: TestClient
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: found class (TestResource) on (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: Test
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | DeclarativeClient: found resource (mycomponent) on: Test
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | client: converted (Test) to declarative client
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '/test', 'name': 'mycomponent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '/test', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: registered component (myresource) on: TestClient
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '/test', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | DeclarativeClient: found resource (myresource) on: TestClient
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '/test', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | client: converted (TestClient) to declarative client
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (BaseResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (BaseResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (BaseResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: BaseResource
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: completed processing for (BaseResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '/base', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (BaseResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '/base', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | resource: converted (BaseResource) to declarative resource
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (BaseClient)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (BaseClient)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (BaseClient)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseClient)
2025-03-24 17:37:42 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: BaseClient
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: found class (BaseResource) on (BaseClient)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: class (BaseResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '/base', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: registered component (myresource) on: BaseClient
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: completed processing for (BaseClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '/base', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | DeclarativeClient: found resource (myresource) on: BaseClient
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (BaseClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '/base', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (ChildResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (ChildResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (ChildResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: ChildResource
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: completed processing for (ChildResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (ChildResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | resource: converted (ChildResource) to declarative resource
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (ChildClient)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (BaseClient) to (ChildClient)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (ChildClient)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildClient)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: found class (ChildResource) on (ChildClient)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: class (ChildResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: registered component (myresource) on: ChildClient
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: completed processing for (ChildClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | DeclarativeClient: found resource (myresource) on: ChildClient
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (ChildClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test'}
2025-03-24 17:37:42 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test'}
2025-03-24 17:37:42 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (Nested)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Nested)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (Nested)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (Nested) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1044b9800>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: found callable (method) on: Test
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: registered method (method) on: Test
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: found class (Nested) on (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: class (Nested) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1044fc4a0>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: registered component (myresource) on: Test
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1044fc4a0>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1044fc4a0>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:37:42 | DEBUG | container: converted (Test) to declarative container
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1044fc4a0>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1044fc4a0>}, 'path': '/child', 'name': 'myresource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:37:42 | DEBUG | container: converted (Test) to declarative container
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:37:42 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: TestResource
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1044fc4a0>}, 'path': '/test', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1044fc4a0>}, 'path': '/test', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (GrandChild)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (GrandChild)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (GrandChild)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: starting attribute processing for (GrandChild)
2025-03-24 17:37:42 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: GrandChild
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: completed processing for (GrandChild) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1044fc4a0>}, 'path': 'grandchild', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (GrandChild) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1044fc4a0>}, 'path': 'grandchild', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:37:42 | DEBUG | resource: converted (GrandChild) to declarative resource
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Child)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: starting attribute processing for (Child)
2025-03-24 17:37:42 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Child
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: found class (GrandChild) on (Child)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: class (GrandChild) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1044fc4a0>}, 'path': 'child', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: registered component (test_resource) on: Child
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: completed processing for (Child) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1044fc4a0>}, 'path': 'child', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1044fc4a0>}, 'path': 'child', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:37:42 | DEBUG | resource: converted (Child) to declarative resource
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Parent)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: starting attribute processing for (Parent)
2025-03-24 17:37:42 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Parent
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: found class (Child) on (Parent)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: class (Child) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1044fc4a0>}, 'path': '/parent', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: registered component (test_resource) on: Parent
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: completed processing for (Parent) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1044fc4a0>}, 'path': '/parent', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1044fc4a0>}, 'path': '/parent', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1044fc4a0>}, 'path': '/parent', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1044fc4a0>}, 'path': '/parent', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:37:42 | DEBUG | resource: converted (Test) to declarative resource
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: found callable (test_method) on: TestResource
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: registered method (test_method) on: TestResource
2025-03-24 17:37:42 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1044fc4a0>, 'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x1044fc2c0>}, 'path': '/test', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:37:42 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10445dee0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10445df80>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10445e020>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10445e0c0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10445e160>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10445e200>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>, 'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>, 'test_resource': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1044fc4a0>, 'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x1044fc2c0>}, 'path': '/test', 'name': 'test_resource', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10445eb60>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10445ec00>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10445eca0>)>, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10445f1a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10445f240>)>, 'resources': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>, 'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'attribute': 'value', 'parent_attr': 'parent', 'child_attr': 'child', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>, 'attr': 'value', 'new': 'data', 'more': 'stuff', 'a': 1, 'b': 2, 'value': 'test', 'key': 'value'}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (TestComponent)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (TestComponent)
2025-03-24 17:38:48 | DEBUG | DeclarativeComponent: Processing Attribute (attribute) on: TestComponent
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'attribute': 'value'}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Parent)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 17:38:48 | DEBUG | DeclarativeComponent: Processing Attribute (parent_attr) on: Parent
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'parent_attr': 'parent'}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (Parent) to (Child)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 17:38:48 | DEBUG | DeclarativeComponent: Processing Attribute (child_attr) on: Child
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (NestedComponent)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (NestedComponent)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (NestedComponent)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (NestedComponent) - metadata: {}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: found callable (method) on: Container
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: registered method (method) on: Container
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: found class (NestedComponent) on (Container)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: class (NestedComponent) has metadata: {'components': {}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1028b19e0>}}
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: registered component (nestedcomponent) on: Container
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1028b19e0>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1028b19e0>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeComponent: Processing Attribute (attr) on: Test
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'attr': 'value'}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (Declarative)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Declarative)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (Declarative)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (Declarative) - metadata: {}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (Source)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Source)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (Source)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (Source) - metadata: {}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (Target)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Target)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (Target)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (Target) - metadata: {'a': 1, 'b': 2}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (Component)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Component)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (Component)
2025-03-24 17:38:48 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: Component
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (Component) - metadata: {'name': 'mycomponent'}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: found class (Component) on (Container)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: class (Component) has metadata: {'name': 'mycomponent', 'components': {}, 'methods': {}}
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: Container
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'name': 'mycomponent', 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'name': 'mycomponent', 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'components': {}, 'methods': {}}
2025-03-24 17:38:48 | DEBUG | DeclarativeResource: set name to (testresource) for: TestResource
2025-03-24 17:38:48 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'components': {}, 'methods': {}, 'name': 'testresource', 'path': ''}
2025-03-24 17:38:48 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 17:38:48 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: TestClient
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'components': {}, 'methods': {}, 'name': 'testresource', 'path': '', 'baseurl': 'https://api.test.com'}
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: registered component (testresource) on: TestClient
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'name': 'testresource', 'path': '', 'baseurl': 'https://api.test.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>}
2025-03-24 17:38:48 | DEBUG | DeclarativeClient: found resource (testresource) on: TestClient
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'name': 'testresource', 'path': '', 'baseurl': 'https://api.test.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 17:38:48 | DEBUG | DeclarativeResource: set name to (testresource) for: TestResource
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'path': '/test', 'components': {}, 'methods': {}, 'name': 'testresource'}
2025-03-24 17:38:48 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: found class (TestResource) on (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'path': '/test', 'components': {}, 'methods': {}, 'name': 'testresource'}
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: registered component (testresource) on: Test
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'path': '/test', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'name': 'testresource', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>}
2025-03-24 17:38:48 | DEBUG | DeclarativeClient: extracted baseurl () from: Test
2025-03-24 17:38:48 | DEBUG | DeclarativeClient: found resource (testresource) on: Test
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'path': '/test', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'name': 'testresource', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'baseurl': '', 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 17:38:48 | DEBUG | client: converted (Test) to declarative client
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 17:38:48 | DEBUG | DeclarativeResource: set name to (testresource) for: TestResource
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'path': '/test', 'components': {}, 'methods': {}, 'name': 'testresource'}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'path': '/test', 'components': {}, 'methods': {}, 'name': 'myresource'}
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: registered component (myresource) on: TestClient
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'path': '/test', 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {}, 'name': 'myresource', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>}
2025-03-24 17:38:48 | DEBUG | DeclarativeClient: extracted baseurl () from: TestClient
2025-03-24 17:38:48 | DEBUG | DeclarativeClient: found resource (myresource) on: TestClient
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'path': '/test', 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {}, 'name': 'myresource', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'baseurl': '', 'resources': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}}
2025-03-24 17:38:48 | DEBUG | client: converted (TestClient) to declarative client
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (BaseResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (BaseResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (BaseResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: BaseResource
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: initialized (components) container for (BaseResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: initialized (methods) container for (BaseResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: completed processing for (BaseResource) - metadata: {'path': '/base', 'components': {}, 'methods': {}}
2025-03-24 17:38:48 | DEBUG | DeclarativeResource: set name to (baseresource) for: BaseResource
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (BaseResource) - metadata: {'path': '/base', 'components': {}, 'methods': {}, 'name': 'baseresource'}
2025-03-24 17:38:48 | DEBUG | resource: converted (BaseResource) to declarative resource
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (BaseClient)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (BaseClient)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (BaseClient)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseClient)
2025-03-24 17:38:48 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: BaseClient
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: found class (BaseResource) on (BaseClient)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: class (BaseResource) has metadata: {'path': '/base', 'components': {}, 'methods': {}, 'name': 'baseresource', 'baseurl': 'https://api.base.com'}
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: registered component (baseresource) on: BaseClient
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: completed processing for (BaseClient) - metadata: {'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'name': 'baseresource', 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>}
2025-03-24 17:38:48 | DEBUG | DeclarativeClient: found resource (baseresource) on: BaseClient
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (BaseClient) - metadata: {'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'name': 'baseresource', 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (ChildResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (ChildResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (ChildResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: ChildResource
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: completed processing for (ChildResource) - metadata: {'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'name': 'baseresource', 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (ChildResource) - metadata: {'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'name': 'baseresource', 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:38:48 | DEBUG | resource: converted (ChildResource) to declarative resource
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (ChildClient)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (BaseClient) to (ChildClient)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (ChildClient)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildClient)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: found class (ChildResource) on (ChildClient)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: class (ChildResource) has metadata: {'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'name': 'baseresource', 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: registered component (baseresource) on: ChildClient
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: completed processing for (ChildClient) - metadata: {'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {}, 'name': 'baseresource', 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:38:48 | DEBUG | DeclarativeClient: found resource (baseresource) on: ChildClient
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (ChildClient) - metadata: {'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {}, 'name': 'baseresource', 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test'}
2025-03-24 17:38:48 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {}
2025-03-24 17:38:48 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (Nested)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Nested)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (Nested)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (Nested) - metadata: {}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: found callable (method) on: Test
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: registered method (method) on: Test
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: found class (Nested) on (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: class (Nested) has metadata: {'value': 'test', 'components': {}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102900540>}}
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: registered component (nested) on: Test
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'value': 'test', 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102900540>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test', 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102900540>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>}
2025-03-24 17:38:48 | DEBUG | container: converted (Test) to declarative container
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'components': {}, 'methods': {}}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'components': {}, 'methods': {}}
2025-03-24 17:38:48 | DEBUG | container: converted (Test) to declarative container
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:38:48 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: TestResource
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'path': '/test', 'name': 'test_resource', 'components': {}, 'methods': {}}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'path': '/test', 'name': 'test_resource', 'components': {}, 'methods': {}}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (GrandChild)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (GrandChild)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (GrandChild)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: starting attribute processing for (GrandChild)
2025-03-24 17:38:48 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: GrandChild
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: initialized (components) container for (GrandChild)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: initialized (methods) container for (GrandChild)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: completed processing for (GrandChild) - metadata: {'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 17:38:48 | DEBUG | DeclarativeResource: set name to (grandchild) for: GrandChild
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (GrandChild) - metadata: {'path': 'grandchild', 'components': {}, 'methods': {}, 'name': 'grandchild'}
2025-03-24 17:38:48 | DEBUG | resource: converted (GrandChild) to declarative resource
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Child)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: starting attribute processing for (Child)
2025-03-24 17:38:48 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Child
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: found class (GrandChild) on (Child)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: class (GrandChild) has metadata: {'path': 'child', 'components': {}, 'methods': {}, 'name': 'grandchild'}
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: registered component (grandchild) on: Child
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: completed processing for (Child) - metadata: {'path': 'child', 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'name': 'grandchild', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'path': 'child', 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'name': 'grandchild', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 17:38:48 | DEBUG | resource: converted (Child) to declarative resource
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Parent)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: starting attribute processing for (Parent)
2025-03-24 17:38:48 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Parent
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: found class (Child) on (Parent)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: class (Child) has metadata: {'path': '/parent', 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'name': 'grandchild', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: registered component (grandchild) on: Parent
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: completed processing for (Parent) - metadata: {'path': '/parent', 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'name': 'grandchild', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'path': '/parent', 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'name': 'grandchild', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'components': {}, 'methods': {}}
2025-03-24 17:38:48 | DEBUG | DeclarativeResource: set name to (test) for: Test
2025-03-24 17:38:48 | DEBUG | DeclarativeResource: extracted path () from: Test
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'components': {}, 'methods': {}, 'name': 'test', 'path': ''}
2025-03-24 17:38:48 | DEBUG | resource: converted (Test) to declarative resource
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: found callable (test_method) on: TestResource
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: registered method (test_method) on: TestResource
2025-03-24 17:38:48 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x102900220>}}
2025-03-24 17:38:48 | DEBUG | DeclarativeResource: set name to (testresource) for: TestResource
2025-03-24 17:38:48 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 17:38:48 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x102900220>}, 'name': 'testresource', 'path': ''}
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (TestComponent)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (TestComponent)
2025-03-24 17:40:31 | DEBUG | DeclarativeComponent: Processing Attribute (attribute) on: TestComponent
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'attribute': 'value'}
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Parent)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 17:40:31 | DEBUG | DeclarativeComponent: Processing Attribute (parent_attr) on: Parent
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'parent_attr': 'parent'}
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (Parent) to (Child)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 17:40:31 | DEBUG | DeclarativeComponent: Processing Attribute (child_attr) on: Child
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (NestedComponent)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (NestedComponent)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (NestedComponent)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (NestedComponent) - metadata: {}
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: found callable (method) on: Container
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: registered method (method) on: Container
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: found class (NestedComponent) on (Container)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: class (NestedComponent) has metadata: {'components': {}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104be99e0>}}
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: registered component (nestedcomponent) on: Container
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104be99e0>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104be99e0>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeComponent: Processing Attribute (attr) on: Test
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'attr': 'value'}
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (Declarative)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Declarative)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (Declarative)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (Declarative) - metadata: {}
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (Source)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Source)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (Source)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (Source) - metadata: {}
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (Target)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Target)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (Target)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (Target) - metadata: {'a': 1, 'b': 2}
2025-03-24 17:40:31 | DEBUG | copymetadata: Copied metadata from (Source) to (Target)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (Component)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Component)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (Component)
2025-03-24 17:40:31 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: Component
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (Component) - metadata: {'name': 'mycomponent'}
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: found class (Component) on (Container)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: class (Component) has metadata: {'name': 'mycomponent', 'components': {}, 'methods': {}}
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: Container
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'name': 'mycomponent', 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'name': 'mycomponent', 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'components': {}, 'methods': {}}
2025-03-24 17:40:31 | DEBUG | DeclarativeResource: set name to (testresource) for: TestResource
2025-03-24 17:40:31 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'components': {}, 'methods': {}, 'name': 'testresource', 'path': ''}
2025-03-24 17:40:31 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 17:40:31 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: TestClient
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'components': {}, 'methods': {}, 'name': 'testresource', 'path': '', 'baseurl': 'https://api.test.com'}
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: registered component (testresource) on: TestClient
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'name': 'testresource', 'path': '', 'baseurl': 'https://api.test.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>}
2025-03-24 17:40:31 | DEBUG | DeclarativeClient: found resource (testresource) on: TestClient
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'name': 'testresource', 'path': '', 'baseurl': 'https://api.test.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 17:40:31 | DEBUG | DeclarativeResource: set name to (testresource) for: TestResource
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'path': '/test', 'components': {}, 'methods': {}, 'name': 'testresource'}
2025-03-24 17:40:31 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: found class (TestResource) on (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'path': '/test', 'components': {}, 'methods': {}, 'name': 'testresource'}
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: registered component (testresource) on: Test
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'path': '/test', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'name': 'testresource', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>}
2025-03-24 17:40:31 | DEBUG | DeclarativeClient: extracted baseurl () from: Test
2025-03-24 17:40:31 | DEBUG | DeclarativeClient: found resource (testresource) on: Test
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'path': '/test', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'name': 'testresource', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'baseurl': '', 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 17:40:31 | DEBUG | client: converted (Test) to declarative client
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 17:40:31 | DEBUG | DeclarativeResource: set name to (testresource) for: TestResource
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'path': '/test', 'components': {}, 'methods': {}, 'name': 'testresource'}
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'path': '/test', 'components': {}, 'methods': {}, 'name': 'myresource'}
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: registered component (myresource) on: TestClient
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'path': '/test', 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {}, 'name': 'myresource', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>}
2025-03-24 17:40:31 | DEBUG | DeclarativeClient: extracted baseurl () from: TestClient
2025-03-24 17:40:31 | DEBUG | DeclarativeClient: found resource (myresource) on: TestClient
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'path': '/test', 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {}, 'name': 'myresource', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'baseurl': '', 'resources': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}}
2025-03-24 17:40:31 | DEBUG | client: converted (TestClient) to declarative client
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (BaseResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (BaseResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (BaseResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: BaseResource
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: initialized (components) container for (BaseResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: initialized (methods) container for (BaseResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: completed processing for (BaseResource) - metadata: {'path': '/base', 'components': {}, 'methods': {}}
2025-03-24 17:40:31 | DEBUG | DeclarativeResource: set name to (baseresource) for: BaseResource
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (BaseResource) - metadata: {'path': '/base', 'components': {}, 'methods': {}, 'name': 'baseresource'}
2025-03-24 17:40:31 | DEBUG | resource: converted (BaseResource) to declarative resource
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (BaseClient)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (BaseClient)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (BaseClient)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseClient)
2025-03-24 17:40:31 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: BaseClient
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: found class (BaseResource) on (BaseClient)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: class (BaseResource) has metadata: {'path': '/base', 'components': {}, 'methods': {}, 'name': 'baseresource', 'baseurl': 'https://api.base.com'}
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: registered component (baseresource) on: BaseClient
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: completed processing for (BaseClient) - metadata: {'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'name': 'baseresource', 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>}
2025-03-24 17:40:31 | DEBUG | DeclarativeClient: found resource (baseresource) on: BaseClient
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (BaseClient) - metadata: {'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'name': 'baseresource', 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (ChildResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (ChildResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (ChildResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: ChildResource
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: completed processing for (ChildResource) - metadata: {'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'name': 'baseresource', 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (ChildResource) - metadata: {'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'name': 'baseresource', 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:40:31 | DEBUG | resource: converted (ChildResource) to declarative resource
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (ChildClient)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (BaseClient) to (ChildClient)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (ChildClient)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildClient)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: found class (ChildResource) on (ChildClient)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: class (ChildResource) has metadata: {'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'name': 'baseresource', 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: registered component (baseresource) on: ChildClient
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: completed processing for (ChildClient) - metadata: {'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {}, 'name': 'baseresource', 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:40:31 | DEBUG | DeclarativeClient: found resource (baseresource) on: ChildClient
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (ChildClient) - metadata: {'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {}, 'name': 'baseresource', 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}}
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test'}
2025-03-24 17:40:31 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {}
2025-03-24 17:40:31 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (Nested)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Nested)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (Nested)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (Nested) - metadata: {}
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: found callable (method) on: Test
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: registered method (method) on: Test
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: found class (Nested) on (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: class (Nested) has metadata: {'value': 'test', 'components': {}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x104c104a0>}}
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: registered component (nested) on: Test
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'value': 'test', 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x104c104a0>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>}
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test', 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x104c104a0>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>}
2025-03-24 17:40:31 | DEBUG | container: converted (Test) to declarative container
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'components': {}, 'methods': {}}
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'components': {}, 'methods': {}}
2025-03-24 17:40:31 | DEBUG | container: converted (Test) to declarative container
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:40:31 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: TestResource
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'path': '/test', 'name': 'test_resource', 'components': {}, 'methods': {}}
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'path': '/test', 'name': 'test_resource', 'components': {}, 'methods': {}}
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (GrandChild)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (GrandChild)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (GrandChild)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: starting attribute processing for (GrandChild)
2025-03-24 17:40:31 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: GrandChild
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: initialized (components) container for (GrandChild)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: initialized (methods) container for (GrandChild)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: completed processing for (GrandChild) - metadata: {'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 17:40:31 | DEBUG | DeclarativeResource: set name to (grandchild) for: GrandChild
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (GrandChild) - metadata: {'path': 'grandchild', 'components': {}, 'methods': {}, 'name': 'grandchild'}
2025-03-24 17:40:31 | DEBUG | resource: converted (GrandChild) to declarative resource
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Child)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: starting attribute processing for (Child)
2025-03-24 17:40:31 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Child
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: found class (GrandChild) on (Child)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: class (GrandChild) has metadata: {'path': 'child', 'components': {}, 'methods': {}, 'name': 'grandchild'}
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: registered component (grandchild) on: Child
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: completed processing for (Child) - metadata: {'path': 'child', 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'name': 'grandchild', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'path': 'child', 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'name': 'grandchild', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 17:40:31 | DEBUG | resource: converted (Child) to declarative resource
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Parent)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: starting attribute processing for (Parent)
2025-03-24 17:40:31 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Parent
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: found class (Child) on (Parent)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: class (Child) has metadata: {'path': '/parent', 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'name': 'grandchild', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: registered component (grandchild) on: Parent
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: completed processing for (Parent) - metadata: {'path': '/parent', 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'name': 'grandchild', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'path': '/parent', 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'name': 'grandchild', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'components': {}, 'methods': {}}
2025-03-24 17:40:31 | DEBUG | DeclarativeResource: set name to (test) for: Test
2025-03-24 17:40:31 | DEBUG | DeclarativeResource: extracted path () from: Test
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'components': {}, 'methods': {}, 'name': 'test', 'path': ''}
2025-03-24 17:40:31 | DEBUG | resource: converted (Test) to declarative resource
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: found callable (test_method) on: TestResource
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: registered method (test_method) on: TestResource
2025-03-24 17:40:31 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x104c107c0>}}
2025-03-24 17:40:31 | DEBUG | DeclarativeResource: set name to (testresource) for: TestResource
2025-03-24 17:40:31 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 17:40:31 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x104c107c0>}, 'name': 'testresource', 'path': ''}
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (TestComponent)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (TestComponent)
2025-03-24 17:42:31 | DEBUG | DeclarativeComponent: Processing Attribute (attribute) on: TestComponent
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'attribute': 'value'}
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Parent)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 17:42:31 | DEBUG | DeclarativeComponent: Processing Attribute (parent_attr) on: Parent
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'parent_attr': 'parent'}
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (Parent) to (Child)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 17:42:31 | DEBUG | DeclarativeComponent: Processing Attribute (child_attr) on: Child
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (NestedComponent)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (NestedComponent)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (NestedComponent)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (NestedComponent) - metadata: {}
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: found callable (method) on: Container
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: registered method (method) on: Container
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: found class (NestedComponent) on (Container)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: class (NestedComponent) has metadata: {'components': {}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10504d9e0>}}
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: registered component (nestedcomponent) on: Container
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10504d9e0>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10504d9e0>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeComponent: Processing Attribute (attr) on: Test
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'attr': 'value'}
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (Declarative)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Declarative)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (Declarative)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (Declarative) - metadata: {}
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (Source)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Source)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (Source)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (Source) - metadata: {}
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (Target)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Target)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (Target)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (Target) - metadata: {'a': 1, 'b': 2}
2025-03-24 17:42:31 | DEBUG | copymetadata: Copied metadata from (Source) to (Target)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (Component)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Component)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (Component)
2025-03-24 17:42:31 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: Component
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (Component) - metadata: {'name': 'mycomponent'}
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: found class (Component) on (Container)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: class (Component) has metadata: {'name': 'mycomponent', 'components': {}, 'methods': {}}
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: Container
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'name': 'mycomponent', 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'name': 'mycomponent', 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'components': {}, 'methods': {}}
2025-03-24 17:42:31 | DEBUG | DeclarativeResource: set name to (testresource) for: TestResource
2025-03-24 17:42:31 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'components': {}, 'methods': {}, 'name': 'testresource', 'path': ''}
2025-03-24 17:42:31 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 17:42:31 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: TestClient
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'components': {}, 'methods': {}, 'name': 'testresource', 'path': '', 'baseurl': 'https://api.test.com'}
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: registered component (testresource) on: TestClient
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'name': 'testresource', 'path': '', 'baseurl': 'https://api.test.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>}
2025-03-24 17:42:31 | DEBUG | DeclarativeClient: found resource (testresource) on: TestClient
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'name': 'testresource', 'path': '', 'baseurl': 'https://api.test.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 17:42:31 | DEBUG | DeclarativeResource: set name to (testresource) for: TestResource
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'path': '/test', 'components': {}, 'methods': {}, 'name': 'testresource'}
2025-03-24 17:42:31 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: found class (TestResource) on (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'path': '/test', 'components': {}, 'methods': {}, 'name': 'testresource'}
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: registered component (testresource) on: Test
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'path': '/test', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'name': 'testresource', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>}
2025-03-24 17:42:31 | DEBUG | DeclarativeClient: extracted baseurl () from: Test
2025-03-24 17:42:31 | DEBUG | DeclarativeClient: found resource (testresource) on: Test
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'path': '/test', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'name': 'testresource', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'baseurl': '', 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 17:42:31 | DEBUG | client: converted (Test) to declarative client
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 17:42:31 | DEBUG | DeclarativeResource: set name to (testresource) for: TestResource
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'path': '/test', 'components': {}, 'methods': {}, 'name': 'testresource'}
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'path': '/test', 'components': {}, 'methods': {}, 'name': 'myresource'}
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: registered component (myresource) on: TestClient
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'path': '/test', 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {}, 'name': 'myresource', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>}
2025-03-24 17:42:31 | DEBUG | DeclarativeClient: extracted baseurl () from: TestClient
2025-03-24 17:42:31 | DEBUG | DeclarativeClient: found resource (myresource) on: TestClient
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'path': '/test', 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {}, 'name': 'myresource', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'baseurl': '', 'resources': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}}
2025-03-24 17:42:31 | DEBUG | client: converted (TestClient) to declarative client
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (BaseResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (BaseResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (BaseResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: BaseResource
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: initialized (components) container for (BaseResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: initialized (methods) container for (BaseResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: completed processing for (BaseResource) - metadata: {'path': '/base', 'components': {}, 'methods': {}}
2025-03-24 17:42:31 | DEBUG | DeclarativeResource: set name to (baseresource) for: BaseResource
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (BaseResource) - metadata: {'path': '/base', 'components': {}, 'methods': {}, 'name': 'baseresource'}
2025-03-24 17:42:31 | DEBUG | resource: converted (BaseResource) to declarative resource
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (BaseClient)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (BaseClient)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (BaseClient)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseClient)
2025-03-24 17:42:31 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: BaseClient
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: found class (BaseResource) on (BaseClient)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: class (BaseResource) has metadata: {'path': '/base', 'components': {}, 'methods': {}, 'name': 'baseresource', 'baseurl': 'https://api.base.com'}
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: registered component (baseresource) on: BaseClient
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: completed processing for (BaseClient) - metadata: {'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'name': 'baseresource', 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>}
2025-03-24 17:42:31 | DEBUG | DeclarativeClient: found resource (baseresource) on: BaseClient
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (BaseClient) - metadata: {'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'name': 'baseresource', 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (ChildResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (ChildResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (ChildResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: ChildResource
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: completed processing for (ChildResource) - metadata: {'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'name': 'baseresource', 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (ChildResource) - metadata: {'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'name': 'baseresource', 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:42:31 | DEBUG | resource: converted (ChildResource) to declarative resource
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (ChildClient)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (BaseClient) to (ChildClient)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (ChildClient)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildClient)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: found class (ChildResource) on (ChildClient)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: class (ChildResource) has metadata: {'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'name': 'baseresource', 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: registered component (baseresource) on: ChildClient
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: completed processing for (ChildClient) - metadata: {'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {}, 'name': 'baseresource', 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:42:31 | DEBUG | DeclarativeClient: found resource (baseresource) on: ChildClient
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (ChildClient) - metadata: {'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {}, 'name': 'baseresource', 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}}
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test'}
2025-03-24 17:42:31 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {}
2025-03-24 17:42:31 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (Nested)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Nested)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (Nested)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (Nested) - metadata: {}
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: found callable (method) on: Test
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: registered method (method) on: Test
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: found class (Nested) on (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: class (Nested) has metadata: {'value': 'test', 'components': {}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1050844a0>}}
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: registered component (nested) on: Test
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'value': 'test', 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1050844a0>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>}
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test', 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1050844a0>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>}
2025-03-24 17:42:31 | DEBUG | container: converted (Test) to declarative container
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'components': {}, 'methods': {}}
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'components': {}, 'methods': {}}
2025-03-24 17:42:31 | DEBUG | container: converted (Test) to declarative container
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:42:31 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: TestResource
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'path': '/test', 'name': 'test_resource', 'components': {}, 'methods': {}}
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'path': '/test', 'name': 'test_resource', 'components': {}, 'methods': {}}
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (GrandChild)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (GrandChild)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (GrandChild)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: starting attribute processing for (GrandChild)
2025-03-24 17:42:31 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: GrandChild
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: initialized (components) container for (GrandChild)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: initialized (methods) container for (GrandChild)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: completed processing for (GrandChild) - metadata: {'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 17:42:31 | DEBUG | DeclarativeResource: set name to (grandchild) for: GrandChild
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (GrandChild) - metadata: {'path': 'grandchild', 'components': {}, 'methods': {}, 'name': 'grandchild'}
2025-03-24 17:42:31 | DEBUG | resource: converted (GrandChild) to declarative resource
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Child)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: starting attribute processing for (Child)
2025-03-24 17:42:31 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Child
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: found class (GrandChild) on (Child)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: class (GrandChild) has metadata: {'path': 'child', 'components': {}, 'methods': {}, 'name': 'grandchild'}
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: registered component (grandchild) on: Child
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: completed processing for (Child) - metadata: {'path': 'child', 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'name': 'grandchild', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'path': 'child', 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'name': 'grandchild', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 17:42:31 | DEBUG | resource: converted (Child) to declarative resource
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Parent)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: starting attribute processing for (Parent)
2025-03-24 17:42:31 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Parent
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: found class (Child) on (Parent)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: class (Child) has metadata: {'path': '/parent', 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'name': 'grandchild', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: registered component (grandchild) on: Parent
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: completed processing for (Parent) - metadata: {'path': '/parent', 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'name': 'grandchild', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'path': '/parent', 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'name': 'grandchild', 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'components': {}, 'methods': {}}
2025-03-24 17:42:31 | DEBUG | DeclarativeResource: set name to (test) for: Test
2025-03-24 17:42:31 | DEBUG | DeclarativeResource: extracted path () from: Test
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'components': {}, 'methods': {}, 'name': 'test', 'path': ''}
2025-03-24 17:42:31 | DEBUG | resource: converted (Test) to declarative resource
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: found callable (test_method) on: TestResource
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: registered method (test_method) on: TestResource
2025-03-24 17:42:31 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x105084720>}}
2025-03-24 17:42:31 | DEBUG | DeclarativeResource: set name to (testresource) for: TestResource
2025-03-24 17:42:31 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 17:42:31 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x105084720>}, 'name': 'testresource', 'path': ''}
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (TestComponent)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: processing attributes for (TestComponent)
2025-03-24 17:43:55 | DEBUG | DeclarativeComponent: Processing Attribute (attribute) on: TestComponent
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'attribute': 'value'}
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Parent)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 17:43:55 | DEBUG | DeclarativeComponent: Processing Attribute (parent_attr) on: Parent
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'parent_attr': 'parent'}
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: copyinh metadata from base (Parent) to (Child)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 17:43:55 | DEBUG | DeclarativeComponent: Processing Attribute (child_attr) on: Child
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: creating class (NestedComponent)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (NestedComponent)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: processing attributes for (NestedComponent)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: completed creation of (NestedComponent) - metadata: {}
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: found callable (method) on: Container
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: registered method (method) on: Container
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: found class (NestedComponent) on (Container)
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: class (NestedComponent) has metadata: {'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10470d9e0>}, 'components': {}}
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: registered component (nestedcomponent) on: Container
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10470d9e0>}, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10470d9e0>}, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:43:55 | DEBUG | DeclarativeComponent: Processing Attribute (attr) on: Test
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'attr': 'value'}
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: creating class (Declarative)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Declarative)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: processing attributes for (Declarative)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: completed creation of (Declarative) - metadata: {}
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: creating class (Source)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Source)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: processing attributes for (Source)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: completed creation of (Source) - metadata: {}
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: creating class (Target)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Target)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: processing attributes for (Target)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: completed creation of (Target) - metadata: {'a': 1, 'b': 2}
2025-03-24 17:43:55 | DEBUG | copymetadata: Copied metadata from (Source) to (Target)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: creating class (Component)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Component)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: processing attributes for (Component)
2025-03-24 17:43:55 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: Component
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: completed creation of (Component) - metadata: {'name': 'mycomponent'}
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: found class (Component) on (Container)
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: class (Component) has metadata: {'name': 'mycomponent', 'methods': {}, 'components': {}}
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: Container
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'name': 'mycomponent', 'methods': {}, 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'name': 'mycomponent', 'methods': {}, 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:43:55 | DEBUG | DeclarativeResource: set name to (testresource) for: TestResource
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'methods': {}, 'components': {}}
2025-03-24 17:43:55 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'methods': {}, 'components': {}, 'path': ''}
2025-03-24 17:43:55 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 17:43:55 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: TestClient
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'testresource', 'methods': {}, 'components': {}, 'path': '', 'baseurl': 'https://api.test.com'}
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: registered component (testresource) on: TestClient
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'name': 'testresource', 'methods': {}, 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'path': '', 'baseurl': 'https://api.test.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>}
2025-03-24 17:43:55 | DEBUG | DeclarativeClient: found resource (testresource) on: TestClient
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'name': 'testresource', 'methods': {}, 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'path': '', 'baseurl': 'https://api.test.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:43:55 | DEBUG | DeclarativeResource: set name to (testresource) for: TestResource
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:43:55 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 17:43:55 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (Test)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: found class (TestResource) on (Test)
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: registered component (testresource) on: Test
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>}
2025-03-24 17:43:55 | DEBUG | DeclarativeClient: extracted baseurl () from: Test
2025-03-24 17:43:55 | DEBUG | DeclarativeClient: found resource (testresource) on: Test
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'baseurl': '', 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 17:43:55 | DEBUG | client: converted (Test) to declarative client
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:43:55 | DEBUG | DeclarativeResource: set name to (testresource) for: TestResource
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:43:55 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'myresource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: registered component (myresource) on: TestClient
2025-03-24 17:43:55 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'name': 'myresource', 'path': '/test', 'methods': {}, 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>}
2025-03-24 17:43:55 | DEBUG | DeclarativeClient: extracted baseurl () from: TestClient
2025-03-24 17:43:55 | DEBUG | DeclarativeClient: found resource (myresource) on: TestClient
2025-03-24 17:43:55 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'name': 'myresource', 'path': '/test', 'methods': {}, 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'baseurl': '', 'resources': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}}
2025-03-24 17:43:55 | DEBUG | client: converted (TestClient) to declarative client
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: creating class (BaseResource)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (BaseResource)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: processing attributes for (BaseResource)
2025-03-24 17:43:56 | DEBUG | DeclarativeResource: set name to (baseresource) for: BaseResource
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseResource)
2025-03-24 17:43:56 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: BaseResource
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: initialized (methods) container for (BaseResource)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: initialized (components) container for (BaseResource)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: completed processing for (BaseResource) - metadata: {'name': 'baseresource', 'path': '/base', 'methods': {}, 'components': {}}
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: completed creation of (BaseResource) - metadata: {'name': 'baseresource', 'path': '/base', 'methods': {}, 'components': {}}
2025-03-24 17:43:56 | DEBUG | resource: converted (BaseResource) to declarative resource
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: creating class (BaseClient)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (BaseClient)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: processing attributes for (BaseClient)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseClient)
2025-03-24 17:43:56 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: BaseClient
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: found class (BaseResource) on (BaseClient)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: class (BaseResource) has metadata: {'name': 'baseresource', 'path': '/base', 'methods': {}, 'components': {}, 'baseurl': 'https://api.base.com'}
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: registered component (baseresource) on: BaseClient
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: completed processing for (BaseClient) - metadata: {'name': 'baseresource', 'path': '/base', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>}
2025-03-24 17:43:56 | DEBUG | DeclarativeClient: found resource (baseresource) on: BaseClient
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: completed creation of (BaseClient) - metadata: {'name': 'baseresource', 'path': '/base', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: creating class (ChildResource)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (ChildResource)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: processing attributes for (ChildResource)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildResource)
2025-03-24 17:43:56 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: ChildResource
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: completed processing for (ChildResource) - metadata: {'name': 'baseresource', 'path': '/child', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: completed creation of (ChildResource) - metadata: {'name': 'baseresource', 'path': '/child', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:43:56 | DEBUG | resource: converted (ChildResource) to declarative resource
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: creating class (ChildClient)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: copyinh metadata from base (BaseClient) to (ChildClient)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: processing attributes for (ChildClient)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildClient)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: found class (ChildResource) on (ChildClient)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: class (ChildResource) has metadata: {'name': 'baseresource', 'path': '/child', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: registered component (baseresource) on: ChildClient
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: completed processing for (ChildClient) - metadata: {'name': 'baseresource', 'path': '/child', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:43:56 | DEBUG | DeclarativeClient: found resource (baseresource) on: ChildClient
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: completed creation of (ChildClient) - metadata: {'name': 'baseresource', 'path': '/child', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}}
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:43:56 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test'}
2025-03-24 17:43:56 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {}
2025-03-24 17:43:56 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: creating class (Nested)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Nested)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: processing attributes for (Nested)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: completed creation of (Nested) - metadata: {}
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:43:56 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: found callable (method) on: Test
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: registered method (method) on: Test
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: found class (Nested) on (Test)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: class (Nested) has metadata: {'value': 'test', 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1047444a0>}, 'components': {}}
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: registered component (nested) on: Test
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'value': 'test', 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1047444a0>}, 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>}
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test', 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1047444a0>}, 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>}
2025-03-24 17:43:56 | DEBUG | container: converted (Test) to declarative container
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'methods': {}, 'components': {}}
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'methods': {}, 'components': {}}
2025-03-24 17:43:56 | DEBUG | container: converted (Test) to declarative container
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:43:56 | DEBUG | DeclarativeResource: set name to (testresource) for: TestResource
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:43:56 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:43:56 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: TestResource
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'test_resource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'test_resource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: creating class (GrandChild)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (GrandChild)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: processing attributes for (GrandChild)
2025-03-24 17:43:56 | DEBUG | DeclarativeResource: set name to (grandchild) for: GrandChild
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: starting attribute processing for (GrandChild)
2025-03-24 17:43:56 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: GrandChild
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: initialized (methods) container for (GrandChild)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: initialized (components) container for (GrandChild)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: completed processing for (GrandChild) - metadata: {'name': 'grandchild', 'path': 'grandchild', 'methods': {}, 'components': {}}
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: completed creation of (GrandChild) - metadata: {'name': 'grandchild', 'path': 'grandchild', 'methods': {}, 'components': {}}
2025-03-24 17:43:56 | DEBUG | resource: converted (GrandChild) to declarative resource
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Child)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: starting attribute processing for (Child)
2025-03-24 17:43:56 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Child
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: found class (GrandChild) on (Child)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: class (GrandChild) has metadata: {'name': 'grandchild', 'path': 'child', 'methods': {}, 'components': {}}
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: registered component (grandchild) on: Child
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: completed processing for (Child) - metadata: {'name': 'grandchild', 'path': 'child', 'methods': {}, 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'name': 'grandchild', 'path': 'child', 'methods': {}, 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 17:43:56 | DEBUG | resource: converted (Child) to declarative resource
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Parent)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: starting attribute processing for (Parent)
2025-03-24 17:43:56 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Parent
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: found class (Child) on (Parent)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: class (Child) has metadata: {'name': 'grandchild', 'path': '/parent', 'methods': {}, 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: registered component (grandchild) on: Parent
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: completed processing for (Parent) - metadata: {'name': 'grandchild', 'path': '/parent', 'methods': {}, 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'name': 'grandchild', 'path': '/parent', 'methods': {}, 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Test)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:43:56 | DEBUG | DeclarativeResource: set name to (test) for: Test
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'name': 'test', 'methods': {}, 'components': {}}
2025-03-24 17:43:56 | DEBUG | DeclarativeResource: extracted path () from: Test
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'name': 'test', 'methods': {}, 'components': {}, 'path': ''}
2025-03-24 17:43:56 | DEBUG | resource: converted (Test) to declarative resource
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:43:56 | DEBUG | DeclarativeResource: set name to (testresource) for: TestResource
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: found callable (test_method) on: TestResource
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: registered method (test_method) on: TestResource
2025-03-24 17:43:56 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x104744720>}, 'components': {}}
2025-03-24 17:43:56 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 17:43:56 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x104744720>}, 'components': {}, 'path': ''}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (TestComponent)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (TestComponent)
2025-03-24 17:47:35 | DEBUG | DeclarativeComponent: Processing Attribute (attribute) on: TestComponent
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'attribute': 'value'}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Parent)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 17:47:35 | DEBUG | DeclarativeComponent: Processing Attribute (parent_attr) on: Parent
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'parent_attr': 'parent'}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (Parent) to (Child)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 17:47:35 | DEBUG | DeclarativeComponent: Processing Attribute (child_attr) on: Child
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (NestedComponent)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (NestedComponent)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (NestedComponent)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (NestedComponent) - metadata: {}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: found callable (method) on: Container
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: registered method (method) on: Container
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: found class (NestedComponent) on (Container)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: class (NestedComponent) has metadata: {'components': {}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102f959e0>}}
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: registered component (nestedcomponent) on: Container
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102f959e0>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102f959e0>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeComponent: Processing Attribute (attr) on: Test
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'attr': 'value'}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (Declarative)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Declarative)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (Declarative)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (Declarative) - metadata: {}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (Source)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Source)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (Source)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (Source) - metadata: {}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (Target)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Target)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (Target)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (Target) - metadata: {'a': 1, 'b': 2}
2025-03-24 17:47:35 | DEBUG | copymetadata: Copied metadata from (Source) to (Target)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (Component)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Component)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (Component)
2025-03-24 17:47:35 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: Component
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (Component) - metadata: {'name': 'mycomponent'}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: found class (Component) on (Container)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: class (Component) has metadata: {'name': 'mycomponent', 'components': {}, 'methods': {}}
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: Container
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'name': 'mycomponent', 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'name': 'mycomponent', 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {}}
2025-03-24 17:47:35 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {}, 'path': ''}
2025-03-24 17:47:35 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 17:47:35 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: TestClient
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'testresource', 'components': {}, 'methods': {}, 'path': '', 'baseurl': 'https://api.test.com'}
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: registered component (testresource) on: TestClient
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'name': 'testresource', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'path': '', 'baseurl': 'https://api.test.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>}
2025-03-24 17:47:35 | DEBUG | DeclarativeClient: found resource (testresource) on: TestClient
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'name': 'testresource', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'path': '', 'baseurl': 'https://api.test.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 17:47:35 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: found class (TestResource) on (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: registered component (testresource) on: Test
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'name': 'testresource', 'path': '/test', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>}
2025-03-24 17:47:35 | DEBUG | DeclarativeClient: extracted baseurl () from: Test
2025-03-24 17:47:35 | DEBUG | DeclarativeClient: found resource (testresource) on: Test
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'name': 'testresource', 'path': '/test', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'baseurl': '', 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 17:47:35 | DEBUG | client: converted (Test) to declarative client
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'myresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: registered component (myresource) on: TestClient
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'name': 'myresource', 'path': '/test', 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>}
2025-03-24 17:47:35 | DEBUG | DeclarativeClient: extracted baseurl () from: TestClient
2025-03-24 17:47:35 | DEBUG | DeclarativeClient: found resource (myresource) on: TestClient
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'name': 'myresource', 'path': '/test', 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'baseurl': '', 'resources': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}}
2025-03-24 17:47:35 | DEBUG | client: converted (TestClient) to declarative client
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (BaseResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: set resource name (baseresource) for: BaseResource
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (BaseResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (BaseResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: BaseResource
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: initialized (components) container for (BaseResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: initialized (methods) container for (BaseResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: completed processing for (BaseResource) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (BaseResource) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}}
2025-03-24 17:47:35 | DEBUG | resource: converted (BaseResource) to declarative resource
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (BaseClient)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (BaseClient)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (BaseClient)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseClient)
2025-03-24 17:47:35 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: BaseClient
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: found class (BaseResource) on (BaseClient)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: class (BaseResource) has metadata: {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}, 'baseurl': 'https://api.base.com'}
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: registered component (baseresource) on: BaseClient
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: completed processing for (BaseClient) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>}
2025-03-24 17:47:35 | DEBUG | DeclarativeClient: found resource (baseresource) on: BaseClient
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (BaseClient) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (ChildResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: set resource name (childresource) for: ChildResource
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (ChildResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (ChildResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: ChildResource
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: completed processing for (ChildResource) - metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (ChildResource) - metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:47:35 | DEBUG | resource: converted (ChildResource) to declarative resource
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (ChildClient)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (BaseClient) to (ChildClient)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (ChildClient)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildClient)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: found class (ChildResource) on (ChildClient)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: class (ChildResource) has metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: registered component (childresource) on: ChildClient
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: completed processing for (ChildClient) - metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:47:35 | DEBUG | DeclarativeClient: found resource (childresource) on: ChildClient
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (ChildClient) - metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test'}
2025-03-24 17:47:35 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {}
2025-03-24 17:47:35 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (Nested)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Nested)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (Nested)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (Nested) - metadata: {}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: found callable (method) on: Test
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: registered method (method) on: Test
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: found class (Nested) on (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: class (Nested) has metadata: {'value': 'test', 'components': {}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102f94d60>}}
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: registered component (nested) on: Test
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'value': 'test', 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102f94d60>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test', 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102f94d60>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>}
2025-03-24 17:47:35 | DEBUG | container: converted (Test) to declarative container
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'components': {}, 'methods': {}}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'components': {}, 'methods': {}}
2025-03-24 17:47:35 | DEBUG | container: converted (Test) to declarative container
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:47:35 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: TestResource
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'test_resource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'test_resource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (GrandChild)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: set resource name (grandchild) for: GrandChild
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (GrandChild)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (GrandChild)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: starting attribute processing for (GrandChild)
2025-03-24 17:47:35 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: GrandChild
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: initialized (components) container for (GrandChild)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: initialized (methods) container for (GrandChild)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: completed processing for (GrandChild) - metadata: {'name': 'grandchild', 'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (GrandChild) - metadata: {'name': 'grandchild', 'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 17:47:35 | DEBUG | resource: converted (GrandChild) to declarative resource
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: set resource name (child) for: Child
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Child)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: starting attribute processing for (Child)
2025-03-24 17:47:35 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Child
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: found class (GrandChild) on (Child)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: class (GrandChild) has metadata: {'name': 'child', 'path': 'child', 'components': {}, 'methods': {}}
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: registered component (child) on: Child
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: completed processing for (Child) - metadata: {'name': 'child', 'path': 'child', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'name': 'child', 'path': 'child', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 17:47:35 | DEBUG | resource: converted (Child) to declarative resource
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: set resource name (parent) for: Parent
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Parent)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: starting attribute processing for (Parent)
2025-03-24 17:47:35 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Parent
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: found class (Child) on (Parent)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: class (Child) has metadata: {'name': 'parent', 'path': '/parent', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: registered component (parent) on: Parent
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: completed processing for (Parent) - metadata: {'name': 'parent', 'path': '/parent', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'name': 'parent', 'path': '/parent', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: set resource name (test) for: Test
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'name': 'test', 'components': {}, 'methods': {}}
2025-03-24 17:47:35 | DEBUG | DeclarativeResource: extracted path () from: Test
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'name': 'test', 'components': {}, 'methods': {}, 'path': ''}
2025-03-24 17:47:35 | DEBUG | resource: converted (Test) to declarative resource
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: found callable (test_method) on: TestResource
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: registered method (test_method) on: TestResource
2025-03-24 17:47:35 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x102fcc5e0>}}
2025-03-24 17:47:35 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 17:47:35 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x102fcc5e0>}, 'path': ''}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (TestComponent)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (TestComponent)
2025-03-24 17:49:57 | DEBUG | DeclarativeComponent: Processing Attribute (attribute) on: TestComponent
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'attribute': 'value'}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Parent)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 17:49:57 | DEBUG | DeclarativeComponent: Processing Attribute (parent_attr) on: Parent
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'parent_attr': 'parent'}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (Parent) to (Child)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 17:49:57 | DEBUG | DeclarativeComponent: Processing Attribute (child_attr) on: Child
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (NestedComponent)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (NestedComponent)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (NestedComponent)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (NestedComponent) - metadata: {}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: processing (method) on (Container)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: found callable (method) on: Container
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: registered method (method) on: Container
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: processing (NestedComponent) on (Container)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: found class (NestedComponent) on (Container)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: class (NestedComponent) has metadata: {'components': {}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102d49a80>}}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeComponent: Processing Attribute (attr) on: Test
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'attr': 'value'}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (Declarative)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Declarative)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (Declarative)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (Declarative) - metadata: {}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (Source)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Source)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (Source)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (Source) - metadata: {}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (Target)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Target)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (Target)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (Target) - metadata: {'a': 1, 'b': 2}
2025-03-24 17:49:57 | DEBUG | copymetadata: Copied metadata from (Source) to (Target)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (Component)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Component)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (Component)
2025-03-24 17:49:57 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: Component
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (Component) - metadata: {'name': 'mycomponent'}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: processing (Component) on (Container)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: found class (Component) on (Container)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: class (Component) has metadata: {'name': 'mycomponent', 'components': {}, 'methods': {}}
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: Container
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'name': 'mycomponent', 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'name': 'mycomponent', 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {}}
2025-03-24 17:49:57 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {}, 'path': ''}
2025-03-24 17:49:57 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 17:49:57 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: TestClient
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: processing (baseurl) on (TestClient)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: processing (TestResource) on (TestClient)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'testresource', 'components': {}, 'methods': {}, 'path': '', 'baseurl': 'https://api.test.com'}
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: registered component (testresource) on: TestClient
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'name': 'testresource', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'path': '', 'baseurl': 'https://api.test.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>}
2025-03-24 17:49:57 | DEBUG | DeclarativeClient: found resource (testresource) on: TestClient
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'name': 'testresource', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'path': '', 'baseurl': 'https://api.test.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: processing (path) on (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 17:49:57 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: processing (TestResource) on (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: found class (TestResource) on (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: registered component (testresource) on: Test
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'name': 'testresource', 'path': '/test', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>}
2025-03-24 17:49:57 | DEBUG | DeclarativeClient: extracted baseurl () from: Test
2025-03-24 17:49:57 | DEBUG | DeclarativeClient: found resource (testresource) on: Test
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'name': 'testresource', 'path': '/test', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'baseurl': '', 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 17:49:57 | DEBUG | client: converted (Test) to declarative client
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: processing (path) on (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: processing (resource) on (TestClient)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'myresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: registered component (myresource) on: TestClient
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'name': 'myresource', 'path': '/test', 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>}
2025-03-24 17:49:57 | DEBUG | DeclarativeClient: extracted baseurl () from: TestClient
2025-03-24 17:49:57 | DEBUG | DeclarativeClient: found resource (myresource) on: TestClient
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'name': 'myresource', 'path': '/test', 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'baseurl': '', 'resources': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}}
2025-03-24 17:49:57 | DEBUG | client: converted (TestClient) to declarative client
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (BaseResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: set resource name (baseresource) for: BaseResource
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (BaseResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (BaseResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: BaseResource
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: initialized (components) container for (BaseResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: initialized (methods) container for (BaseResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: processing (path) on (BaseResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: completed processing for (BaseResource) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (BaseResource) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}}
2025-03-24 17:49:57 | DEBUG | resource: converted (BaseResource) to declarative resource
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (BaseClient)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (BaseClient)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (BaseClient)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseClient)
2025-03-24 17:49:57 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: BaseClient
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: processing (baseurl) on (BaseClient)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: processing (BaseResource) on (BaseClient)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: found class (BaseResource) on (BaseClient)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: class (BaseResource) has metadata: {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}, 'baseurl': 'https://api.base.com'}
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: registered component (baseresource) on: BaseClient
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: completed processing for (BaseClient) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>}
2025-03-24 17:49:57 | DEBUG | DeclarativeClient: found resource (baseresource) on: BaseClient
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (BaseClient) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (ChildResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: set resource name (childresource) for: ChildResource
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (ChildResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (ChildResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: ChildResource
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: processing (path) on (ChildResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: completed processing for (ChildResource) - metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (ChildResource) - metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:49:57 | DEBUG | resource: converted (ChildResource) to declarative resource
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (ChildClient)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (BaseClient) to (ChildClient)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (ChildClient)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildClient)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: processing (ChildResource) on (ChildClient)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: found class (ChildResource) on (ChildClient)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: class (ChildResource) has metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: registered component (childresource) on: ChildClient
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: completed processing for (ChildClient) - metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 17:49:57 | DEBUG | DeclarativeClient: found resource (childresource) on: ChildClient
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (ChildClient) - metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test'}
2025-03-24 17:49:57 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {}
2025-03-24 17:49:57 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (Nested)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Nested)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (Nested)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (Nested) - metadata: {}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: processing (value) on (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: processing (method) on (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: found callable (method) on: Test
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: registered method (method) on: Test
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: processing (Nested) on (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: found class (Nested) on (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: class (Nested) has metadata: {'value': 'test', 'components': {}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102da89a0>}}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'components': {}, 'methods': {}}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'components': {}, 'methods': {}}
2025-03-24 17:49:57 | DEBUG | container: converted (Test) to declarative container
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 17:49:57 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: TestResource
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: processing (path) on (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: processing (name) on (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'test_resource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'test_resource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (GrandChild)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: set resource name (grandchild) for: GrandChild
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (GrandChild)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (GrandChild)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: starting attribute processing for (GrandChild)
2025-03-24 17:49:57 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: GrandChild
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: initialized (components) container for (GrandChild)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: initialized (methods) container for (GrandChild)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: processing (path) on (GrandChild)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: completed processing for (GrandChild) - metadata: {'name': 'grandchild', 'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (GrandChild) - metadata: {'name': 'grandchild', 'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 17:49:57 | DEBUG | resource: converted (GrandChild) to declarative resource
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: set resource name (child) for: Child
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Child)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: starting attribute processing for (Child)
2025-03-24 17:49:57 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Child
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: processing (path) on (Child)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: processing (GrandChild) on (Child)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: found class (GrandChild) on (Child)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: class (GrandChild) has metadata: {'name': 'child', 'path': 'child', 'components': {}, 'methods': {}}
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: registered component (child) on: Child
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: completed processing for (Child) - metadata: {'name': 'child', 'path': 'child', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'name': 'child', 'path': 'child', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 17:49:57 | DEBUG | resource: converted (Child) to declarative resource
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: set resource name (parent) for: Parent
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Parent)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: starting attribute processing for (Parent)
2025-03-24 17:49:57 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Parent
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: processing (path) on (Parent)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: processing (Child) on (Parent)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: found class (Child) on (Parent)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: class (Child) has metadata: {'name': 'parent', 'path': '/parent', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: registered component (parent) on: Parent
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: completed processing for (Parent) - metadata: {'name': 'parent', 'path': '/parent', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'name': 'parent', 'path': '/parent', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: set resource name (test) for: Test
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'name': 'test', 'components': {}, 'methods': {}}
2025-03-24 17:49:57 | DEBUG | DeclarativeResource: extracted path () from: Test
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'name': 'test', 'components': {}, 'methods': {}, 'path': ''}
2025-03-24 17:49:57 | DEBUG | resource: converted (Test) to declarative resource
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: processing (test_method) on (TestResource)
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: found callable (test_method) on: TestResource
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: registered method (test_method) on: TestResource
2025-03-24 17:49:57 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x102da8f40>}}
2025-03-24 17:49:57 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 17:49:57 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x102da8f40>}, 'path': ''}
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (TestComponent)
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: processing attributes for (TestComponent)
2025-03-24 18:00:03 | DEBUG | DeclarativeComponent: Processing Attribute (attribute) on: TestComponent
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'attribute': 'value'}
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Parent)
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 18:00:03 | DEBUG | DeclarativeComponent: Processing Attribute (parent_attr) on: Parent
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'parent_attr': 'parent'}
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: copyinh metadata from base (Parent) to (Child)
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 18:00:03 | DEBUG | DeclarativeComponent: Processing Attribute (child_attr) on: Child
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: creating class (NestedComponent)
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (NestedComponent)
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: processing attributes for (NestedComponent)
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: completed creation of (NestedComponent) - metadata: {}
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 18:00:03 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 18:00:03 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 18:00:03 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 18:00:03 | DEBUG | DeclarativeContainer: found callable (method) on: Container
2025-03-24 18:00:03 | DEBUG | DeclarativeContainer: registered method (method) on: Container
2025-03-24 18:00:03 | DEBUG | DeclarativeContainer: found class (NestedComponent) on (Container)
2025-03-24 18:00:03 | DEBUG | DeclarativeContainer: class (NestedComponent) has metadata: {'components': {}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x106f359e0>}}
2025-03-24 18:00:03 | DEBUG | DeclarativeContainer: registered component (nestedcomponent) on: Container
2025-03-24 18:00:03 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x106f359e0>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x106f359e0>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 18:00:03 | DEBUG | DeclarativeComponent: Processing Attribute (attr) on: Test
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'attr': 'value'}
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: creating class (Declarative)
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Declarative)
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: processing attributes for (Declarative)
2025-03-24 18:00:03 | DEBUG | DeclarativeMeta: completed creation of (Declarative) - metadata: {}
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: creating class (Source)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Source)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: processing attributes for (Source)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: completed creation of (Source) - metadata: {}
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: creating class (Target)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Target)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: processing attributes for (Target)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: completed creation of (Target) - metadata: {'a': 1, 'b': 2}
2025-03-24 18:00:04 | DEBUG | copymetadata: Copied metadata from (Source) to (Target)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: creating class (Component)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Component)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: processing attributes for (Component)
2025-03-24 18:00:04 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: Component
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: completed creation of (Component) - metadata: {'name': 'mycomponent'}
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: found class (Component) on (Container)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: class (Component) has metadata: {'name': 'mycomponent', 'components': {}, 'methods': {}}
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: Container
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'name': 'mycomponent', 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'name': 'mycomponent', 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {}}
2025-03-24 18:00:04 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {}, 'path': ''}
2025-03-24 18:00:04 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: registered nested resource (testresource) on: TestClient
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 18:00:04 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: TestClient
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'testresource', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'path': '', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'baseurl': 'https://api.test.com'}
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: registered component (testresource) on: TestClient
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'name': 'testresource', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'path': '', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'baseurl': 'https://api.test.com'}
2025-03-24 18:00:04 | DEBUG | DeclarativeClient: found resource (testresource) on: TestClient
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'path': '', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'baseurl': 'https://api.test.com', 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 18:00:04 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: registered nested resource (testresource) on: Test
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: found class (TestResource) on (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'testresource', 'path': '/test', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>}
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: registered component (testresource) on: Test
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'name': 'testresource', 'path': '/test', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>}
2025-03-24 18:00:04 | DEBUG | DeclarativeClient: extracted baseurl () from: Test
2025-03-24 18:00:04 | DEBUG | DeclarativeClient: found resource (testresource) on: Test
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'baseurl': '', 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 18:00:04 | DEBUG | client: converted (Test) to declarative client
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: registered nested resource (myresource) on: TestClient
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: processing attributes for (resource)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'myresource', 'path': '/test', 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>}
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: registered component (myresource) on: TestClient
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'name': 'myresource', 'path': '/test', 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>}
2025-03-24 18:00:04 | DEBUG | DeclarativeClient: extracted baseurl () from: TestClient
2025-03-24 18:00:04 | DEBUG | DeclarativeClient: found resource (myresource) on: TestClient
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: completed creation of (resource) - metadata: {'name': 'myresource', 'path': '/test', 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'baseurl': '', 'resources': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}}
2025-03-24 18:00:04 | DEBUG | client: converted (TestClient) to declarative client
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: creating class (BaseResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: set resource name (baseresource) for: BaseResource
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (BaseResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: processing attributes for (BaseResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: BaseResource
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: initialized (components) container for (BaseResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: initialized (methods) container for (BaseResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: completed processing for (BaseResource) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}}
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: completed creation of (BaseResource) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}}
2025-03-24 18:00:04 | DEBUG | resource: converted (BaseResource) to declarative resource
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: creating class (BaseClient)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (BaseClient)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: registered nested resource (baseresource) on: BaseClient
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: processing attributes for (BaseResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseClient)
2025-03-24 18:00:04 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: BaseClient
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: found class (BaseResource) on (BaseClient)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: class (BaseResource) has metadata: {'name': 'baseresource', 'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'baseurl': 'https://api.base.com'}
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: registered component (baseresource) on: BaseClient
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: completed processing for (BaseClient) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'baseurl': 'https://api.base.com'}
2025-03-24 18:00:04 | DEBUG | DeclarativeClient: found resource (baseresource) on: BaseClient
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: completed creation of (BaseResource) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'baseurl': 'https://api.base.com', 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: creating class (ChildResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: set resource name (childresource) for: ChildResource
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (ChildResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: processing attributes for (ChildResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: ChildResource
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: completed processing for (ChildResource) - metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'baseurl': 'https://api.base.com', 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: completed creation of (ChildResource) - metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'baseurl': 'https://api.base.com', 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 18:00:04 | DEBUG | resource: converted (ChildResource) to declarative resource
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: creating class (ChildClient)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: copyinh metadata from base (BaseClient) to (ChildClient)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: registered nested resource (childresource) on: ChildClient
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: processing attributes for (ChildResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildClient)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: found class (ChildResource) on (ChildClient)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: class (ChildResource) has metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'baseurl': 'https://api.base.com', 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: registered component (childresource) on: ChildClient
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: completed processing for (ChildClient) - metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'baseurl': 'https://api.base.com', 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 18:00:04 | DEBUG | DeclarativeClient: found resource (childresource) on: ChildClient
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: completed creation of (ChildResource) - metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'baseurl': 'https://api.base.com', 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}}
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test'}
2025-03-24 18:00:04 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {}
2025-03-24 18:00:04 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: creating class (Nested)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Nested)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: processing attributes for (Nested)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: completed creation of (Nested) - metadata: {}
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: found callable (method) on: Test
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: registered method (method) on: Test
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: found class (Nested) on (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: class (Nested) has metadata: {'value': 'test', 'components': {}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x106f34d60>}}
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: registered component (nested) on: Test
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'value': 'test', 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x106f34d60>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>}
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test', 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x106f34d60>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>}
2025-03-24 18:00:04 | DEBUG | container: converted (Test) to declarative container
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'components': {}, 'methods': {}}
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'components': {}, 'methods': {}}
2025-03-24 18:00:04 | DEBUG | container: converted (Test) to declarative container
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 18:00:04 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: TestResource
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'test_resource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'test_resource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: creating class (GrandChild)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: set resource name (grandchild) for: GrandChild
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (GrandChild)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: processing attributes for (GrandChild)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: starting attribute processing for (GrandChild)
2025-03-24 18:00:04 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: GrandChild
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: initialized (components) container for (GrandChild)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: initialized (methods) container for (GrandChild)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: completed processing for (GrandChild) - metadata: {'name': 'grandchild', 'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: completed creation of (GrandChild) - metadata: {'name': 'grandchild', 'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 18:00:04 | DEBUG | resource: converted (GrandChild) to declarative resource
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: set resource name (child) for: Child
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Child)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: registered nested resource (child) on: Child
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: processing attributes for (GrandChild)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: starting attribute processing for (Child)
2025-03-24 18:00:04 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Child
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: found class (GrandChild) on (Child)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: class (GrandChild) has metadata: {'name': 'child', 'path': 'child', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: registered component (child) on: Child
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: completed processing for (Child) - metadata: {'name': 'child', 'path': 'child', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: completed creation of (GrandChild) - metadata: {'name': 'child', 'path': 'child', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 18:00:04 | DEBUG | resource: converted (Child) to declarative resource
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: set resource name (parent) for: Parent
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Parent)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: registered nested resource (parent) on: Parent
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: starting attribute processing for (Parent)
2025-03-24 18:00:04 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Parent
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: found class (Child) on (Parent)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: class (Child) has metadata: {'name': 'parent', 'path': '/parent', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: registered component (parent) on: Parent
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: completed processing for (Parent) - metadata: {'name': 'parent', 'path': '/parent', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'name': 'parent', 'path': '/parent', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: set resource name (test) for: Test
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'name': 'test', 'components': {}, 'methods': {}}
2025-03-24 18:00:04 | DEBUG | DeclarativeResource: extracted path () from: Test
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'name': 'test', 'components': {}, 'methods': {}, 'path': ''}
2025-03-24 18:00:04 | DEBUG | resource: converted (Test) to declarative resource
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: found callable (test_method) on: TestResource
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: registered method (test_method) on: TestResource
2025-03-24 18:00:04 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x106f6c5e0>}}
2025-03-24 18:00:04 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 18:00:04 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x106f6c5e0>}, 'path': ''}
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (TestComponent)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: processing attributes for (TestComponent)
2025-03-24 18:14:29 | DEBUG | DeclarativeComponent: Processing Attribute (attribute) on: TestComponent
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'attribute': 'value'}
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Parent)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 18:14:29 | DEBUG | DeclarativeComponent: Processing Attribute (parent_attr) on: Parent
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'parent_attr': 'parent'}
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: copyinh metadata from base (Parent) to (Child)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 18:14:29 | DEBUG | DeclarativeComponent: Processing Attribute (child_attr) on: Child
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: creating class (NestedComponent)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (NestedComponent)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: processing attributes for (NestedComponent)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: completed creation of (NestedComponent) - metadata: {}
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: found callable (method) on: Container
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: registered method (method) on: Container
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: found class (NestedComponent) on (Container)
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: class (NestedComponent) has metadata: {'components': {}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104195b20>}}
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 18:14:29 | DEBUG | DeclarativeComponent: Processing Attribute (attr) on: Test
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'attr': 'value'}
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: creating class (Declarative)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Declarative)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: processing attributes for (Declarative)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: completed creation of (Declarative) - metadata: {}
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: creating class (Source)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Source)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: processing attributes for (Source)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: completed creation of (Source) - metadata: {}
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: creating class (Target)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Target)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: processing attributes for (Target)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: completed creation of (Target) - metadata: {'a': 1, 'b': 2}
2025-03-24 18:14:29 | DEBUG | copymetadata: Copied metadata from (Source) to (Target)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: creating class (Component)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Component)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: processing attributes for (Component)
2025-03-24 18:14:29 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: Component
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: completed creation of (Component) - metadata: {'name': 'mycomponent'}
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: found class (Component) on (Container)
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: class (Component) has metadata: {'name': 'mycomponent', 'components': {}, 'methods': {}}
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: Container
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'name': 'mycomponent', 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'name': 'mycomponent', 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {}}
2025-03-24 18:14:29 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {}, 'path': ''}
2025-03-24 18:14:29 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 18:14:29 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: TestClient
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'testresource', 'components': {}, 'methods': {}, 'path': '', 'baseurl': 'https://api.test.com'}
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: registered component (testresource) on: TestClient
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'name': 'testresource', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'path': '', 'baseurl': 'https://api.test.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>}
2025-03-24 18:14:29 | DEBUG | DeclarativeClient: found resource (testresource) on: TestClient
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'name': 'testresource', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'path': '', 'baseurl': 'https://api.test.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 18:14:29 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 18:14:29 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (Test)
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: found class (TestResource) on (Test)
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: registered component (testresource) on: Test
2025-03-24 18:14:29 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'name': 'testresource', 'path': '/test', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>}
2025-03-24 18:14:29 | DEBUG | DeclarativeClient: extracted baseurl () from: Test
2025-03-24 18:14:29 | DEBUG | DeclarativeClient: found resource (testresource) on: Test
2025-03-24 18:14:29 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'name': 'testresource', 'path': '/test', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'baseurl': '', 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 18:14:29 | DEBUG | client: converted (Test) to declarative client
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'myresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: registered component (myresource) on: TestClient
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'name': 'myresource', 'path': '/test', 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>}
2025-03-24 18:14:30 | DEBUG | DeclarativeClient: extracted baseurl () from: TestClient
2025-03-24 18:14:30 | DEBUG | DeclarativeClient: found resource (myresource) on: TestClient
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'name': 'myresource', 'path': '/test', 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'baseurl': '', 'resources': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}}
2025-03-24 18:14:30 | DEBUG | client: converted (TestClient) to declarative client
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: creating class (BaseResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: set resource name (baseresource) for: BaseResource
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (BaseResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: processing attributes for (BaseResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: BaseResource
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: initialized (components) container for (BaseResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: initialized (methods) container for (BaseResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: completed processing for (BaseResource) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}}
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: completed creation of (BaseResource) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}}
2025-03-24 18:14:30 | DEBUG | resource: converted (BaseResource) to declarative resource
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: creating class (BaseClient)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (BaseClient)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: processing attributes for (BaseClient)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseClient)
2025-03-24 18:14:30 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: BaseClient
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: found class (BaseResource) on (BaseClient)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: class (BaseResource) has metadata: {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}, 'baseurl': 'https://api.base.com'}
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: registered component (baseresource) on: BaseClient
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: completed processing for (BaseClient) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>}
2025-03-24 18:14:30 | DEBUG | DeclarativeClient: found resource (baseresource) on: BaseClient
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: completed creation of (BaseClient) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: creating class (ChildResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (ChildResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: processing attributes for (ChildResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: ChildResource
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: completed processing for (ChildResource) - metadata: {'name': 'baseresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: completed creation of (ChildResource) - metadata: {'name': 'baseresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 18:14:30 | DEBUG | resource: converted (ChildResource) to declarative resource
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: creating class (ChildClient)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: copyinh metadata from base (BaseClient) to (ChildClient)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: processing attributes for (ChildClient)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildClient)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: found class (ChildResource) on (ChildClient)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: class (ChildResource) has metadata: {'name': 'baseresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: registered component (baseresource) on: ChildClient
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: completed processing for (ChildClient) - metadata: {'name': 'baseresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 18:14:30 | DEBUG | DeclarativeClient: found resource (baseresource) on: ChildClient
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: completed creation of (ChildClient) - metadata: {'name': 'baseresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}}
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 18:14:30 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test'}
2025-03-24 18:14:30 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {}
2025-03-24 18:14:30 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: creating class (Nested)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Nested)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: processing attributes for (Nested)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: completed creation of (Nested) - metadata: {}
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 18:14:30 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: found callable (method) on: Test
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: registered method (method) on: Test
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: found class (Nested) on (Test)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: class (Nested) has metadata: {'value': 'test', 'components': {}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1041d4b80>}}
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'components': {}, 'methods': {}}
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'components': {}, 'methods': {}}
2025-03-24 18:14:30 | DEBUG | container: converted (Test) to declarative container
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 18:14:30 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: TestResource
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'test_resource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'test_resource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: creating class (GrandChild)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: set resource name (grandchild) for: GrandChild
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (GrandChild)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: processing attributes for (GrandChild)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: starting attribute processing for (GrandChild)
2025-03-24 18:14:30 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: GrandChild
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: initialized (components) container for (GrandChild)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: initialized (methods) container for (GrandChild)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: completed processing for (GrandChild) - metadata: {'name': 'grandchild', 'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: completed creation of (GrandChild) - metadata: {'name': 'grandchild', 'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 18:14:30 | DEBUG | resource: converted (GrandChild) to declarative resource
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Child)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: starting attribute processing for (Child)
2025-03-24 18:14:30 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Child
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: found class (GrandChild) on (Child)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: class (GrandChild) has metadata: {'name': 'grandchild', 'path': 'child', 'components': {}, 'methods': {}}
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: registered component (grandchild) on: Child
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: completed processing for (Child) - metadata: {'name': 'grandchild', 'path': 'child', 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'name': 'grandchild', 'path': 'child', 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 18:14:30 | DEBUG | resource: converted (Child) to declarative resource
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Parent)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: starting attribute processing for (Parent)
2025-03-24 18:14:30 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Parent
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: found class (Child) on (Parent)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: class (Child) has metadata: {'name': 'grandchild', 'path': '/parent', 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: registered component (grandchild) on: Parent
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: completed processing for (Parent) - metadata: {'name': 'grandchild', 'path': '/parent', 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'name': 'grandchild', 'path': '/parent', 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: set resource name (test) for: Test
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Test)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'name': 'test', 'components': {}, 'methods': {}}
2025-03-24 18:14:30 | DEBUG | DeclarativeResource: extracted path () from: Test
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'name': 'test', 'components': {}, 'methods': {}, 'path': ''}
2025-03-24 18:14:30 | DEBUG | resource: converted (Test) to declarative resource
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: found callable (test_method) on: TestResource
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: registered method (test_method) on: TestResource
2025-03-24 18:14:30 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x1041d42c0>}}
2025-03-24 18:14:30 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 18:14:30 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x1041d42c0>}, 'path': ''}
2025-03-24 19:04:14 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-24 19:04:14 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (TestComponent)
2025-03-24 19:04:14 | DEBUG | DeclarativeMeta: processing attributes for (TestComponent)
2025-03-24 19:04:14 | DEBUG | DeclarativeComponent: Processing Attribute (attribute) on: TestComponent
2025-03-24 19:04:14 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'attribute': 'value'}
2025-03-24 19:04:14 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 19:04:14 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Parent)
2025-03-24 19:04:14 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 19:04:14 | DEBUG | DeclarativeComponent: Processing Attribute (parent_attr) on: Parent
2025-03-24 19:04:14 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'parent_attr': 'parent'}
2025-03-24 19:04:14 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 19:04:14 | DEBUG | DeclarativeMeta: copyinh metadata from base (Parent) to (Child)
2025-03-24 19:04:14 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 19:04:14 | DEBUG | DeclarativeComponent: Processing Attribute (child_attr) on: Child
2025-03-24 19:04:14 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 19:04:14 | DEBUG | DeclarativeMeta: creating class (NestedComponent)
2025-03-24 19:04:14 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (NestedComponent)
2025-03-24 19:04:14 | DEBUG | DeclarativeMeta: processing attributes for (NestedComponent)
2025-03-24 19:04:14 | DEBUG | DeclarativeMeta: completed creation of (NestedComponent) - metadata: {}
2025-03-24 19:04:14 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 19:04:14 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 19:04:14 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 19:04:14 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 19:04:14 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 19:04:14 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 19:04:14 | DEBUG | DeclarativeContainer: found callable (method) on: Container
2025-03-24 19:04:14 | DEBUG | DeclarativeContainer: registered method (method) on: Container
2025-03-24 19:04:14 | DEBUG | DeclarativeContainer: found class (NestedComponent) on (Container)
2025-03-24 19:04:14 | DEBUG | DeclarativeContainer: class (NestedComponent) has metadata: {'components': {}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x106cf1b20>}}
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeComponent: Processing Attribute (attr) on: Test
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'attr': 'value'}
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (Declarative)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Declarative)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (Declarative)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: completed creation of (Declarative) - metadata: {}
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (Source)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Source)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (Source)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: completed creation of (Source) - metadata: {}
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (Target)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Target)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (Target)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: completed creation of (Target) - metadata: {'a': 1, 'b': 2}
2025-03-24 19:04:15 | DEBUG | copymetadata: Copied metadata from (Source) to (Target)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (Component)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Component)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (Component)
2025-03-24 19:04:15 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: Component
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: completed creation of (Component) - metadata: {'name': 'mycomponent'}
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: found class (Component) on (Container)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: class (Component) has metadata: {'name': 'mycomponent', 'components': {}, 'methods': {}}
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: Container
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'name': 'mycomponent', 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'name': 'mycomponent', 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {}}
2025-03-24 19:04:15 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {}, 'path': ''}
2025-03-24 19:04:15 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 19:04:15 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: TestClient
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'testresource', 'components': {}, 'methods': {}, 'path': '', 'baseurl': 'https://api.test.com'}
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: registered component (testresource) on: TestClient
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'name': 'testresource', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'path': '', 'baseurl': 'https://api.test.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>}
2025-03-24 19:04:15 | DEBUG | DeclarativeClient: found resource (testresource) on: TestClient
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'name': 'testresource', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'path': '', 'baseurl': 'https://api.test.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:04:15 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: found class (TestResource) on (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: registered component (testresource) on: Test
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'name': 'testresource', 'path': '/test', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>}
2025-03-24 19:04:15 | DEBUG | DeclarativeClient: extracted baseurl () from: Test
2025-03-24 19:04:15 | DEBUG | DeclarativeClient: found resource (testresource) on: Test
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'name': 'testresource', 'path': '/test', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'baseurl': '', 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 19:04:15 | DEBUG | client: converted (Test) to declarative client
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'myresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: registered component (myresource) on: TestClient
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'name': 'myresource', 'path': '/test', 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>}
2025-03-24 19:04:15 | DEBUG | DeclarativeClient: extracted baseurl () from: TestClient
2025-03-24 19:04:15 | DEBUG | DeclarativeClient: found resource (myresource) on: TestClient
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'name': 'myresource', 'path': '/test', 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'baseurl': '', 'resources': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}}
2025-03-24 19:04:15 | DEBUG | client: converted (TestClient) to declarative client
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (BaseResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: set resource name (baseresource) for: BaseResource
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (BaseResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (BaseResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: BaseResource
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: initialized (components) container for (BaseResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: initialized (methods) container for (BaseResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: completed processing for (BaseResource) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}}
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: completed creation of (BaseResource) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}}
2025-03-24 19:04:15 | DEBUG | resource: converted (BaseResource) to declarative resource
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (BaseClient)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (BaseClient)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (BaseClient)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseClient)
2025-03-24 19:04:15 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: BaseClient
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: found class (BaseResource) on (BaseClient)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: class (BaseResource) has metadata: {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}, 'baseurl': 'https://api.base.com'}
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: registered component (baseresource) on: BaseClient
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: completed processing for (BaseClient) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>}
2025-03-24 19:04:15 | DEBUG | DeclarativeClient: found resource (baseresource) on: BaseClient
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: completed creation of (BaseClient) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (ChildResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (ChildResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (ChildResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: ChildResource
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: completed processing for (ChildResource) - metadata: {'name': 'baseresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: completed creation of (ChildResource) - metadata: {'name': 'baseresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:04:15 | DEBUG | resource: converted (ChildResource) to declarative resource
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (ChildClient)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (BaseClient) to (ChildClient)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (ChildClient)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildClient)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: found class (ChildResource) on (ChildClient)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: class (ChildResource) has metadata: {'name': 'baseresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: registered component (baseresource) on: ChildClient
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: completed processing for (ChildClient) - metadata: {'name': 'baseresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:04:15 | DEBUG | DeclarativeClient: found resource (baseresource) on: ChildClient
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: completed creation of (ChildClient) - metadata: {'name': 'baseresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}}
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test'}
2025-03-24 19:04:15 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {}
2025-03-24 19:04:15 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (Nested)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Nested)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (Nested)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: completed creation of (Nested) - metadata: {}
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: found callable (method) on: Test
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: registered method (method) on: Test
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: found class (Nested) on (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: class (Nested) has metadata: {'value': 'test', 'components': {}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x106d34b80>}}
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'components': {}, 'methods': {}}
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'components': {}, 'methods': {}}
2025-03-24 19:04:15 | DEBUG | container: converted (Test) to declarative container
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 19:04:15 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: TestResource
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'test_resource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'test_resource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (GrandChild)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: set resource name (grandchild) for: GrandChild
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (GrandChild)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (GrandChild)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: starting attribute processing for (GrandChild)
2025-03-24 19:04:15 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: GrandChild
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: initialized (components) container for (GrandChild)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: initialized (methods) container for (GrandChild)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: completed processing for (GrandChild) - metadata: {'name': 'grandchild', 'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: completed creation of (GrandChild) - metadata: {'name': 'grandchild', 'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 19:04:15 | DEBUG | resource: converted (GrandChild) to declarative resource
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Child)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: starting attribute processing for (Child)
2025-03-24 19:04:15 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Child
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: found class (GrandChild) on (Child)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: class (GrandChild) has metadata: {'name': 'grandchild', 'path': 'child', 'components': {}, 'methods': {}}
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: registered component (grandchild) on: Child
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: completed processing for (Child) - metadata: {'name': 'grandchild', 'path': 'child', 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'name': 'grandchild', 'path': 'child', 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:04:15 | DEBUG | resource: converted (Child) to declarative resource
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Parent)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: starting attribute processing for (Parent)
2025-03-24 19:04:15 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Parent
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: found class (Child) on (Parent)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: class (Child) has metadata: {'name': 'grandchild', 'path': '/parent', 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: registered component (grandchild) on: Parent
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: completed processing for (Parent) - metadata: {'name': 'grandchild', 'path': '/parent', 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'name': 'grandchild', 'path': '/parent', 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: set resource name (test) for: Test
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'name': 'test', 'components': {}, 'methods': {}}
2025-03-24 19:04:15 | DEBUG | DeclarativeResource: extracted path () from: Test
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'name': 'test', 'components': {}, 'methods': {}, 'path': ''}
2025-03-24 19:04:15 | DEBUG | resource: converted (Test) to declarative resource
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: found callable (test_method) on: TestResource
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: registered method (test_method) on: TestResource
2025-03-24 19:04:15 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x106d342c0>}}
2025-03-24 19:04:15 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 19:04:15 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x106d342c0>}, 'path': ''}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (TestComponent)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (TestComponent)
2025-03-24 19:06:40 | DEBUG | DeclarativeComponent: Processing Attribute (attribute) on: TestComponent
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'attribute': 'value'}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Parent)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 19:06:40 | DEBUG | DeclarativeComponent: Processing Attribute (parent_attr) on: Parent
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'parent_attr': 'parent'}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (Parent) to (Child)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 19:06:40 | DEBUG | DeclarativeComponent: Processing Attribute (child_attr) on: Child
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (NestedComponent)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (NestedComponent)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (NestedComponent)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (NestedComponent) - metadata: {}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: found callable (method) on: Container
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: registered method (method) on: Container
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: found class (NestedComponent) on (Container)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: class (NestedComponent) has metadata: {'components': {}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1029318a0>}}
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: registered component (nestedcomponent) on: Container
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1029318a0>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1029318a0>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeComponent: Processing Attribute (attr) on: Test
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'attr': 'value'}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (Declarative)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Declarative)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (Declarative)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (Declarative) - metadata: {}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (Source)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Source)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (Source)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (Source) - metadata: {}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (Target)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Target)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (Target)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (Target) - metadata: {'a': 1, 'b': 2}
2025-03-24 19:06:40 | DEBUG | copymetadata: Copied metadata from (Source) to (Target)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (Component)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Component)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (Component)
2025-03-24 19:06:40 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: Component
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (Component) - metadata: {'name': 'mycomponent'}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Container)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: found class (Component) on (Container)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: class (Component) has metadata: {'name': 'mycomponent', 'components': {}, 'methods': {}}
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: Container
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'name': 'mycomponent', 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'name': 'mycomponent', 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {}}
2025-03-24 19:06:40 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {}, 'path': ''}
2025-03-24 19:06:40 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: registered nested resource (testresource) on: TestClient
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 19:06:40 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: TestClient
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'testresource', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'path': '', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'baseurl': 'https://api.test.com'}
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: registered component (testresource) on: TestClient
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'name': 'testresource', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'path': '', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'baseurl': 'https://api.test.com'}
2025-03-24 19:06:40 | DEBUG | DeclarativeClient: found resource (testresource) on: TestClient
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'path': '', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'baseurl': 'https://api.test.com', 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:06:40 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: registered nested resource (testresource) on: Test
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: found class (TestResource) on (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'testresource', 'path': '/test', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>}
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: registered component (testresource) on: Test
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'name': 'testresource', 'path': '/test', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>}
2025-03-24 19:06:40 | DEBUG | DeclarativeClient: extracted baseurl () from: Test
2025-03-24 19:06:40 | DEBUG | DeclarativeClient: found resource (testresource) on: Test
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'baseurl': '', 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 19:06:40 | DEBUG | client: converted (Test) to declarative client
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: registered nested resource (myresource) on: TestClient
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (resource)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'myresource', 'path': '/test', 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>}
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: registered component (myresource) on: TestClient
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'name': 'myresource', 'path': '/test', 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>}
2025-03-24 19:06:40 | DEBUG | DeclarativeClient: extracted baseurl () from: TestClient
2025-03-24 19:06:40 | DEBUG | DeclarativeClient: found resource (myresource) on: TestClient
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (resource) - metadata: {'name': 'myresource', 'path': '/test', 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'baseurl': '', 'resources': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}}
2025-03-24 19:06:40 | DEBUG | client: converted (TestClient) to declarative client
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (BaseResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: set resource name (baseresource) for: BaseResource
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (BaseResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (BaseResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: BaseResource
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: initialized (components) container for (BaseResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: initialized (methods) container for (BaseResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: completed processing for (BaseResource) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (BaseResource) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}}
2025-03-24 19:06:40 | DEBUG | resource: converted (BaseResource) to declarative resource
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (BaseClient)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeClient) to (BaseClient)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: registered nested resource (baseresource) on: BaseClient
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (BaseResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseClient)
2025-03-24 19:06:40 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: BaseClient
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: found class (BaseResource) on (BaseClient)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: class (BaseResource) has metadata: {'name': 'baseresource', 'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'baseurl': 'https://api.base.com'}
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: registered component (baseresource) on: BaseClient
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: completed processing for (BaseClient) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'baseurl': 'https://api.base.com'}
2025-03-24 19:06:40 | DEBUG | DeclarativeClient: found resource (baseresource) on: BaseClient
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (BaseResource) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'baseurl': 'https://api.base.com', 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (ChildResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: set resource name (childresource) for: ChildResource
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (ChildResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (ChildResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: ChildResource
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: completed processing for (ChildResource) - metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'baseurl': 'https://api.base.com', 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (ChildResource) - metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'baseurl': 'https://api.base.com', 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:06:40 | DEBUG | resource: converted (ChildResource) to declarative resource
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (ChildClient)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (BaseClient) to (ChildClient)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: registered nested resource (childresource) on: ChildClient
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (ChildResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildClient)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: found class (ChildResource) on (ChildClient)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: class (ChildResource) has metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'baseurl': 'https://api.base.com', 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: registered component (childresource) on: ChildClient
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: completed processing for (ChildClient) - metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'baseurl': 'https://api.base.com', 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:06:40 | DEBUG | DeclarativeClient: found resource (childresource) on: ChildClient
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (ChildResource) - metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'baseurl': 'https://api.base.com', 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test'}
2025-03-24 19:06:40 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {}
2025-03-24 19:06:40 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (Nested)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeComponent) to (Nested)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (Nested)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (Nested) - metadata: {}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: found callable (method) on: Test
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: registered method (method) on: Test
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: found class (Nested) on (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: class (Nested) has metadata: {'value': 'test', 'components': {}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102930c20>}}
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: registered component (nested) on: Test
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'value': 'test', 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102930c20>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test', 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102930c20>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>}
2025-03-24 19:06:40 | DEBUG | container: converted (Test) to declarative container
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeContainer) to (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'components': {}, 'methods': {}}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'components': {}, 'methods': {}}
2025-03-24 19:06:40 | DEBUG | container: converted (Test) to declarative container
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 19:06:40 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: TestResource
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'test_resource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'test_resource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (GrandChild)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: set resource name (grandchild) for: GrandChild
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (GrandChild)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (GrandChild)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: starting attribute processing for (GrandChild)
2025-03-24 19:06:40 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: GrandChild
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: initialized (components) container for (GrandChild)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: initialized (methods) container for (GrandChild)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: completed processing for (GrandChild) - metadata: {'name': 'grandchild', 'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (GrandChild) - metadata: {'name': 'grandchild', 'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 19:06:40 | DEBUG | resource: converted (GrandChild) to declarative resource
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: set resource name (child) for: Child
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Child)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: registered nested resource (child) on: Child
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (GrandChild)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: starting attribute processing for (Child)
2025-03-24 19:06:40 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Child
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: found class (GrandChild) on (Child)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: class (GrandChild) has metadata: {'name': 'child', 'path': 'child', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: registered component (child) on: Child
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: completed processing for (Child) - metadata: {'name': 'child', 'path': 'child', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (GrandChild) - metadata: {'name': 'child', 'path': 'child', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:06:40 | DEBUG | resource: converted (Child) to declarative resource
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: set resource name (parent) for: Parent
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Parent)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: registered nested resource (parent) on: Parent
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: starting attribute processing for (Parent)
2025-03-24 19:06:40 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Parent
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: found class (Child) on (Parent)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: class (Child) has metadata: {'name': 'parent', 'path': '/parent', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: registered component (parent) on: Parent
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: completed processing for (Parent) - metadata: {'name': 'parent', 'path': '/parent', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'name': 'parent', 'path': '/parent', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: set resource name (test) for: Test
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'name': 'test', 'components': {}, 'methods': {}}
2025-03-24 19:06:40 | DEBUG | DeclarativeResource: extracted path () from: Test
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'name': 'test', 'components': {}, 'methods': {}, 'path': ''}
2025-03-24 19:06:40 | DEBUG | resource: converted (Test) to declarative resource
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: copyinh metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: found callable (test_method) on: TestResource
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: registered method (test_method) on: TestResource
2025-03-24 19:06:40 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x1029744a0>}}
2025-03-24 19:06:40 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 19:06:40 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x1029744a0>}, 'path': ''}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (TestComponent)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (TestComponent)
2025-03-24 19:20:22 | DEBUG | DeclarativeComponent: Processing Attribute (attribute) on: TestComponent
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'attribute': 'value'}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Parent)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 19:20:22 | DEBUG | DeclarativeComponent: Processing Attribute (parent_attr) on: Parent
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'parent_attr': 'parent'}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (Parent) to (Child)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 19:20:22 | DEBUG | DeclarativeComponent: Processing Attribute (child_attr) on: Child
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (NestedComponent)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (NestedComponent)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (NestedComponent)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (NestedComponent) - metadata: {}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeContainer) to (Container)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: found callable (method) on: Container
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: registered method (method) on: Container
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: found class (NestedComponent) on (Container)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: class (NestedComponent) has metadata: {'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a99940>}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: registered component (nestedcomponent) on: Container
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a99940>}, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a99940>}, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeComponent: Processing Attribute (attr) on: Test
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'attr': 'value'}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (Declarative)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Declarative)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (Declarative)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (Declarative) - metadata: {}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (Source)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Source)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (Source)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (Source) - metadata: {}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (Target)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Target)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (Target)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (Target) - metadata: {'a': 1, 'b': 2}
2025-03-24 19:20:22 | DEBUG | copymetadata: Copied metadata from (Source) to (Target)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (Component)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Component)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (Component)
2025-03-24 19:20:22 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: Component
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (Component) - metadata: {'name': 'mycomponent'}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeContainer) to (Container)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: found class (Component) on (Container)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: class (Component) has metadata: {'name': 'mycomponent', 'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: Container
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'name': 'mycomponent', 'methods': {}, 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'name': 'mycomponent', 'methods': {}, 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource'}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'testresource', 'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'testresource', 'methods': {}, 'components': {}, 'path': ''}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'methods': {}, 'components': {}, 'path': ''}
2025-03-24 19:20:22 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: registered nested resource (testresource) on: TestClient
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 19:20:22 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: TestClient
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'testresource', 'methods': {}, 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'path': '', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'baseurl': 'https://api.test.com'}
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: registered component (testresource) on: TestClient
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'name': 'testresource', 'methods': {}, 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'path': '', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'baseurl': 'https://api.test.com'}
2025-03-24 19:20:22 | DEBUG | DeclarativeClient: found resource (testresource) on: TestClient
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'methods': {}, 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'path': '', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'baseurl': 'https://api.test.com', 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource'}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: registered nested resource (testresource) on: Test
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: found class (TestResource) on (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>}
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: registered component (testresource) on: Test
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>}
2025-03-24 19:20:22 | DEBUG | DeclarativeClient: extracted baseurl () from: Test
2025-03-24 19:20:22 | DEBUG | DeclarativeClient: found resource (testresource) on: Test
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'baseurl': '', 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 19:20:22 | DEBUG | client: converted (Test) to declarative client
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource'}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: registered nested resource (myresource) on: TestClient
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (resource)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'myresource', 'path': '/test', 'methods': {}, 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>}
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: registered component (myresource) on: TestClient
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'name': 'myresource', 'path': '/test', 'methods': {}, 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>}
2025-03-24 19:20:22 | DEBUG | DeclarativeClient: extracted baseurl () from: TestClient
2025-03-24 19:20:22 | DEBUG | DeclarativeClient: found resource (myresource) on: TestClient
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (resource) - metadata: {'name': 'myresource', 'path': '/test', 'methods': {}, 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'baseurl': '', 'resources': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}}
2025-03-24 19:20:22 | DEBUG | client: converted (TestClient) to declarative client
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (BaseResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: set resource name (baseresource) for: BaseResource
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (BaseResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (BaseResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: starting attribute processing for (BaseResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'baseresource'}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: name already set to (baseresource) for: BaseResource
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: BaseResource
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: BaseResource
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: initialized (methods) container for (BaseResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: initialized (components) container for (BaseResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: completed processing for (BaseResource) - metadata: {'name': 'baseresource', 'path': '/base', 'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: BaseResource
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'baseresource', 'path': '/base', 'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: completed processing for (BaseResource) - final metadata: {'name': 'baseresource', 'path': '/base', 'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (BaseResource) - metadata: {'name': 'baseresource', 'path': '/base', 'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | resource: converted (BaseResource) to declarative resource
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (BaseClient)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (BaseClient)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: registered nested resource (baseresource) on: BaseClient
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (BaseResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseClient)
2025-03-24 19:20:22 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: BaseClient
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: found class (BaseResource) on (BaseClient)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: class (BaseResource) has metadata: {'name': 'baseresource', 'path': '/base', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'baseurl': 'https://api.base.com'}
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: registered component (baseresource) on: BaseClient
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: completed processing for (BaseClient) - metadata: {'name': 'baseresource', 'path': '/base', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'baseurl': 'https://api.base.com'}
2025-03-24 19:20:22 | DEBUG | DeclarativeClient: found resource (baseresource) on: BaseClient
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (BaseResource) - metadata: {'name': 'baseresource', 'path': '/base', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'baseurl': 'https://api.base.com', 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (ChildResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: set resource name (childresource) for: ChildResource
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (ChildResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (ChildResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: starting attribute processing for (ChildResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'childresource', 'path': '/base', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'baseurl': 'https://api.base.com', 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: name already set to (childresource) for: ChildResource
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: ChildResource
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: ChildResource
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: completed processing for (ChildResource) - metadata: {'name': 'childresource', 'path': '/child', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'baseurl': 'https://api.base.com', 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: ChildResource
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'childresource', 'path': '/child', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'baseurl': 'https://api.base.com', 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: completed processing for (ChildResource) - final metadata: {'name': 'childresource', 'path': '/child', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'baseurl': 'https://api.base.com', 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (ChildResource) - metadata: {'name': 'childresource', 'path': '/child', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'baseurl': 'https://api.base.com', 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:20:22 | DEBUG | resource: converted (ChildResource) to declarative resource
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (ChildClient)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (BaseClient) to (ChildClient)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: registered nested resource (childresource) on: ChildClient
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (ChildResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildClient)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: found class (ChildResource) on (ChildClient)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: class (ChildResource) has metadata: {'name': 'childresource', 'path': '/child', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'baseurl': 'https://api.base.com', 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: registered component (childresource) on: ChildClient
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: completed processing for (ChildClient) - metadata: {'name': 'childresource', 'path': '/child', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'baseurl': 'https://api.base.com', 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:20:22 | DEBUG | DeclarativeClient: found resource (childresource) on: ChildClient
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (ChildResource) - metadata: {'name': 'childresource', 'path': '/child', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'baseurl': 'https://api.base.com', 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test'}
2025-03-24 19:20:22 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {}
2025-03-24 19:20:22 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (Nested)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Nested)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (Nested)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (Nested) - metadata: {}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeContainer) to (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: found callable (method) on: Test
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: registered method (method) on: Test
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: found class (Nested) on (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: class (Nested) has metadata: {'value': 'test', 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102a98cc0>}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: registered component (nested) on: Test
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'value': 'test', 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102a98cc0>}, 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test', 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102a98cc0>}, 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>}
2025-03-24 19:20:22 | DEBUG | container: converted (Test) to declarative container
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeContainer) to (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | container: converted (Test) to declarative container
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource'}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'test_resource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'test_resource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'test_resource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'test_resource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (GrandChild)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: set resource name (grandchild) for: GrandChild
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (GrandChild)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (GrandChild)
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: starting attribute processing for (GrandChild)
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'grandchild'}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: name already set to (grandchild) for: GrandChild
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: GrandChild
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: starting attribute processing for (GrandChild)
2025-03-24 19:20:22 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: GrandChild
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: initialized (methods) container for (GrandChild)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: initialized (components) container for (GrandChild)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: completed processing for (GrandChild) - metadata: {'name': 'grandchild', 'path': 'grandchild', 'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: GrandChild
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'grandchild', 'path': 'grandchild', 'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: completed processing for (GrandChild) - final metadata: {'name': 'grandchild', 'path': 'grandchild', 'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (GrandChild) - metadata: {'name': 'grandchild', 'path': 'grandchild', 'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | resource: converted (GrandChild) to declarative resource
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: set resource name (child) for: Child
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (Child)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: registered nested resource (child) on: Child
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (GrandChild)
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: starting attribute processing for (Child)
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'child', 'path': 'grandchild', 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: name already set to (child) for: Child
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Child
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: starting attribute processing for (Child)
2025-03-24 19:20:22 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Child
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: found class (GrandChild) on (Child)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: class (GrandChild) has metadata: {'name': 'child', 'path': 'child', 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: registered component (child) on: Child
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: completed processing for (Child) - metadata: {'name': 'child', 'path': 'child', 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Child
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'child', 'path': 'child', 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: completed processing for (Child) - final metadata: {'name': 'child', 'path': 'child', 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (GrandChild) - metadata: {'name': 'child', 'path': 'child', 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:20:22 | DEBUG | resource: converted (Child) to declarative resource
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: set resource name (parent) for: Parent
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (Parent)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: registered nested resource (parent) on: Parent
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: starting attribute processing for (Parent)
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'parent', 'path': 'child', 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: name already set to (parent) for: Parent
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Parent
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: starting attribute processing for (Parent)
2025-03-24 19:20:22 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Parent
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: found class (Child) on (Parent)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: class (Child) has metadata: {'name': 'parent', 'path': '/parent', 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: registered component (parent) on: Parent
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: completed processing for (Parent) - metadata: {'name': 'parent', 'path': '/parent', 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Parent
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'parent', 'path': '/parent', 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: completed processing for (Parent) - final metadata: {'name': 'parent', 'path': '/parent', 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'name': 'parent', 'path': '/parent', 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: set resource name (test) for: Test
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: starting attribute processing for (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'test'}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: name already set to (test) for: Test
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Test
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'name': 'test', 'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Test
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'test', 'methods': {}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: extracted path () from: Test
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: completed processing for (Test) - final metadata: {'name': 'test', 'methods': {}, 'components': {}, 'path': ''}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'name': 'test', 'methods': {}, 'components': {}, 'path': ''}
2025-03-24 19:20:22 | DEBUG | resource: converted (Test) to declarative resource
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource'}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: found callable (test_method) on: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: registered method (test_method) on: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x102ad4540>}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'testresource', 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x102ad4540>}, 'components': {}}
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 19:20:22 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'testresource', 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x102ad4540>}, 'components': {}, 'path': ''}
2025-03-24 19:20:22 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x102ad4540>}, 'components': {}, 'path': ''}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (TestComponent)
2025-03-24 19:24:17 | DEBUG | DeclarativeComponent: Processing Attribute (attribute) on: TestComponent
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (TestComponent)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'attribute': 'value'}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 19:24:17 | DEBUG | DeclarativeComponent: Processing Attribute (parent_attr) on: Parent
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Parent)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'parent_attr': 'parent'}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 19:24:17 | DEBUG | DeclarativeComponent: Processing Attribute (child_attr) on: Child
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (Parent) to (Child)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (NestedComponent)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (NestedComponent)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (NestedComponent)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (NestedComponent) - metadata: {}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: found callable (method) on: Container
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: registered method (method) on: Container
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: found class (NestedComponent) on (Container)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: class (NestedComponent) has metadata: {'components': {}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a0d940>}}
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: registered component (nestedcomponent) on: Container
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a0d940>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeContainer) to (Container)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x102a0d940>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeComponent: Processing Attribute (attr) on: Test
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'attr': 'value'}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (Declarative)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (Declarative)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Declarative)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (Declarative) - metadata: {}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (Source)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (Source)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Source)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (Source) - metadata: {}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (Target)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (Target)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Target)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (Target) - metadata: {'a': 1, 'b': 2}
2025-03-24 19:24:17 | DEBUG | copymetadata: Copied metadata from (Source) to (Target)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (Component)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (Component)
2025-03-24 19:24:17 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: Component
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Component)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (Component) - metadata: {'name': 'mycomponent'}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: found class (Component) on (Container)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: class (Component) has metadata: {'name': 'mycomponent', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: Container
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'name': 'mycomponent', 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeContainer) to (Container)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'name': 'mycomponent', 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource'}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'testresource', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'testresource', 'components': {}, 'methods': {}, 'path': ''}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {}, 'path': ''}
2025-03-24 19:24:17 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 19:24:17 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: TestClient
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'testresource', 'components': {}, 'methods': {}, 'path': '', 'baseurl': 'https://api.test.com'}
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: registered component (testresource) on: TestClient
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'name': 'testresource', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'path': '', 'baseurl': 'https://api.test.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>}
2025-03-24 19:24:17 | DEBUG | DeclarativeClient: found resource (testresource) on: TestClient
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'name': 'testresource', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'path': '', 'baseurl': 'https://api.test.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource'}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: found class (TestResource) on (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: registered component (testresource) on: Test
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'name': 'testresource', 'path': '/test', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>}
2025-03-24 19:24:17 | DEBUG | DeclarativeClient: extracted baseurl () from: Test
2025-03-24 19:24:17 | DEBUG | DeclarativeClient: found resource (testresource) on: Test
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'name': 'testresource', 'path': '/test', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'baseurl': '', 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 19:24:17 | DEBUG | client: converted (Test) to declarative client
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource'}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'myresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: registered component (myresource) on: TestClient
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'name': 'myresource', 'path': '/test', 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>}
2025-03-24 19:24:17 | DEBUG | DeclarativeClient: extracted baseurl () from: TestClient
2025-03-24 19:24:17 | DEBUG | DeclarativeClient: found resource (myresource) on: TestClient
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'name': 'myresource', 'path': '/test', 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'baseurl': '', 'resources': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}}
2025-03-24 19:24:17 | DEBUG | client: converted (TestClient) to declarative client
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (BaseResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: set resource name (baseresource) for: BaseResource
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (BaseResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: starting attribute processing for (BaseResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'baseresource'}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: name already set to (baseresource) for: BaseResource
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: BaseResource
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: BaseResource
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: initialized (components) container for (BaseResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: initialized (methods) container for (BaseResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: completed processing for (BaseResource) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: BaseResource
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: completed processing for (BaseResource) - final metadata: {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (BaseResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (BaseResource) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | resource: converted (BaseResource) to declarative resource
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (BaseClient)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (BaseClient)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseClient)
2025-03-24 19:24:17 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: BaseClient
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: found class (BaseResource) on (BaseClient)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: class (BaseResource) has metadata: {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}, 'baseurl': 'https://api.base.com'}
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: registered component (baseresource) on: BaseClient
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: completed processing for (BaseClient) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>}
2025-03-24 19:24:17 | DEBUG | DeclarativeClient: found resource (baseresource) on: BaseClient
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (BaseClient)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (BaseClient) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (ChildResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: set resource name (childresource) for: ChildResource
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (ChildResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: starting attribute processing for (ChildResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'childresource', 'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: name already set to (childresource) for: ChildResource
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: ChildResource
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: ChildResource
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: completed processing for (ChildResource) - metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: ChildResource
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: completed processing for (ChildResource) - final metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (ChildResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (ChildResource) - metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:24:17 | DEBUG | resource: converted (ChildResource) to declarative resource
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (ChildClient)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (ChildClient)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildClient)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: found class (ChildResource) on (ChildClient)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: class (ChildResource) has metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: registered component (childresource) on: ChildClient
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: completed processing for (ChildClient) - metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:24:17 | DEBUG | DeclarativeClient: found resource (childresource) on: ChildClient
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (BaseClient) to (ChildClient)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (ChildClient) - metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test'}
2025-03-24 19:24:17 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {}
2025-03-24 19:24:17 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (Nested)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (Nested)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Nested)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (Nested) - metadata: {}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: found callable (method) on: Test
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: registered method (method) on: Test
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: found class (Nested) on (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: class (Nested) has metadata: {'value': 'test', 'components': {}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102a0ccc0>}}
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: registered component (nested) on: Test
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'value': 'test', 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102a0ccc0>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeContainer) to (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test', 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x102a0ccc0>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>}
2025-03-24 19:24:17 | DEBUG | container: converted (Test) to declarative container
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeContainer) to (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | container: converted (Test) to declarative container
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource'}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'test_resource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'test_resource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'test_resource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'test_resource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (GrandChild)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: set resource name (grandchild) for: GrandChild
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (GrandChild)
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: starting attribute processing for (GrandChild)
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'grandchild'}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: name already set to (grandchild) for: GrandChild
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: GrandChild
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: starting attribute processing for (GrandChild)
2025-03-24 19:24:17 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: GrandChild
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: initialized (components) container for (GrandChild)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: initialized (methods) container for (GrandChild)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: completed processing for (GrandChild) - metadata: {'name': 'grandchild', 'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: GrandChild
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'grandchild', 'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: completed processing for (GrandChild) - final metadata: {'name': 'grandchild', 'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (GrandChild)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (GrandChild) - metadata: {'name': 'grandchild', 'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | resource: converted (GrandChild) to declarative resource
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: set resource name (child) for: Child
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: starting attribute processing for (Child)
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'child', 'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: name already set to (child) for: Child
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Child
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: starting attribute processing for (Child)
2025-03-24 19:24:17 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Child
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: found class (GrandChild) on (Child)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: class (GrandChild) has metadata: {'name': 'child', 'path': 'child', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: registered component (child) on: Child
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: completed processing for (Child) - metadata: {'name': 'child', 'path': 'child', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Child
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'child', 'path': 'child', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: completed processing for (Child) - final metadata: {'name': 'child', 'path': 'child', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (Child)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'name': 'child', 'path': 'child', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:24:17 | DEBUG | resource: converted (Child) to declarative resource
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: set resource name (parent) for: Parent
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: starting attribute processing for (Parent)
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'parent', 'path': 'child', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: name already set to (parent) for: Parent
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Parent
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: starting attribute processing for (Parent)
2025-03-24 19:24:17 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Parent
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: found class (Child) on (Parent)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: class (Child) has metadata: {'name': 'parent', 'path': '/parent', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: registered component (parent) on: Parent
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: completed processing for (Parent) - metadata: {'name': 'parent', 'path': '/parent', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Parent
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'parent', 'path': '/parent', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: completed processing for (Parent) - final metadata: {'name': 'parent', 'path': '/parent', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (Parent)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'name': 'parent', 'path': '/parent', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: set resource name (test) for: Test
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: starting attribute processing for (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'test'}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: name already set to (test) for: Test
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Test
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'name': 'test', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Test
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'test', 'components': {}, 'methods': {}}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: extracted path () from: Test
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: completed processing for (Test) - final metadata: {'name': 'test', 'components': {}, 'methods': {}, 'path': ''}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (Test)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'name': 'test', 'components': {}, 'methods': {}, 'path': ''}
2025-03-24 19:24:17 | DEBUG | resource: converted (Test) to declarative resource
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource'}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: found callable (test_method) on: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: registered method (test_method) on: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x102a48540>}}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'testresource', 'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x102a48540>}}
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 19:24:17 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'testresource', 'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x102a48540>}, 'path': ''}
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:24:17 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x102a48540>}, 'path': ''}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (TestComponent)
2025-03-24 19:25:45 | DEBUG | DeclarativeComponent: Processing Attribute (attribute) on: TestComponent
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (TestComponent)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'attribute': 'value'}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 19:25:45 | DEBUG | DeclarativeComponent: Processing Attribute (parent_attr) on: Parent
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Parent)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'parent_attr': 'parent'}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'parent_attr': 'parent'}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 19:25:45 | DEBUG | DeclarativeComponent: Processing Attribute (child_attr) on: Child
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (Parent) to (Child)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (NestedComponent)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (NestedComponent)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (NestedComponent)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (NestedComponent) - metadata: {}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: found callable (method) on: Container
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: registered method (method) on: Container
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: found class (NestedComponent) on (Container)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: class (NestedComponent) has metadata: {'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104775940>}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: registered component (nestedcomponent) on: Container
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104775940>}, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeContainer) to (Container)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x104775940>}, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeComponent: Processing Attribute (attr) on: Test
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'attr': 'value'}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (Declarative)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (Declarative)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Declarative)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (Declarative) - metadata: {}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (Source)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (Source)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Source)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (Source) - metadata: {}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (Target)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'a': 1, 'b': 2}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (Target)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Target)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (Target) - metadata: {'a': 1, 'b': 2}
2025-03-24 19:25:45 | DEBUG | copymetadata: Copied metadata from (Source) to (Target)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (Component)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (Component)
2025-03-24 19:25:45 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: Component
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Component)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (Component) - metadata: {'name': 'mycomponent'}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'mycomponent'}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: found class (Component) on (Container)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: class (Component) has metadata: {'name': 'mycomponent', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: Container
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'name': 'mycomponent', 'methods': {}, 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeContainer) to (Container)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'name': 'mycomponent', 'methods': {}, 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'testresource'}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource'}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'testresource', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'testresource', 'methods': {}, 'components': {}, 'path': ''}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'methods': {}, 'components': {}, 'path': ''}
2025-03-24 19:25:45 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'testresource', 'methods': {}, 'components': {}, 'path': ''}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 19:25:45 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: TestClient
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'testresource', 'methods': {}, 'components': {}, 'path': '', 'baseurl': 'https://api.test.com'}
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: registered component (testresource) on: TestClient
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'name': 'testresource', 'methods': {}, 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'path': '', 'baseurl': 'https://api.test.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>}
2025-03-24 19:25:45 | DEBUG | DeclarativeClient: found resource (testresource) on: TestClient
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'name': 'testresource', 'methods': {}, 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'path': '', 'baseurl': 'https://api.test.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'testresource'}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource'}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: found class (TestResource) on (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: registered component (testresource) on: Test
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>}
2025-03-24 19:25:45 | DEBUG | DeclarativeClient: extracted baseurl () from: Test
2025-03-24 19:25:45 | DEBUG | DeclarativeClient: found resource (testresource) on: Test
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'baseurl': '', 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 19:25:45 | DEBUG | client: converted (Test) to declarative client
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'testresource'}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource'}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'myresource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'myresource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: registered component (myresource) on: TestClient
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'name': 'myresource', 'path': '/test', 'methods': {}, 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>}
2025-03-24 19:25:45 | DEBUG | DeclarativeClient: extracted baseurl () from: TestClient
2025-03-24 19:25:45 | DEBUG | DeclarativeClient: found resource (myresource) on: TestClient
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'name': 'myresource', 'path': '/test', 'methods': {}, 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'baseurl': '', 'resources': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}}
2025-03-24 19:25:45 | DEBUG | client: converted (TestClient) to declarative client
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (BaseResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: set resource name (baseresource) for: BaseResource
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'baseresource'}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (BaseResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: starting attribute processing for (BaseResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'baseresource'}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: name already set to (baseresource) for: BaseResource
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: BaseResource
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: BaseResource
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: initialized (methods) container for (BaseResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: initialized (components) container for (BaseResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: completed processing for (BaseResource) - metadata: {'name': 'baseresource', 'path': '/base', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: BaseResource
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'baseresource', 'path': '/base', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: completed processing for (BaseResource) - final metadata: {'name': 'baseresource', 'path': '/base', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (BaseResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (BaseResource) - metadata: {'name': 'baseresource', 'path': '/base', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | resource: converted (BaseResource) to declarative resource
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (BaseClient)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'baseresource', 'path': '/base', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (BaseClient)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseClient)
2025-03-24 19:25:45 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: BaseClient
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: found class (BaseResource) on (BaseClient)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: class (BaseResource) has metadata: {'name': 'baseresource', 'path': '/base', 'methods': {}, 'components': {}, 'baseurl': 'https://api.base.com'}
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: registered component (baseresource) on: BaseClient
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: completed processing for (BaseClient) - metadata: {'name': 'baseresource', 'path': '/base', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>}
2025-03-24 19:25:45 | DEBUG | DeclarativeClient: found resource (baseresource) on: BaseClient
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (BaseClient)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (BaseClient) - metadata: {'name': 'baseresource', 'path': '/base', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (ChildResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: set resource name (childresource) for: ChildResource
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'childresource', 'path': '/base', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (ChildResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: starting attribute processing for (ChildResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'childresource', 'path': '/base', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: name already set to (childresource) for: ChildResource
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: ChildResource
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: ChildResource
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: completed processing for (ChildResource) - metadata: {'name': 'childresource', 'path': '/child', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: ChildResource
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'childresource', 'path': '/child', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: completed processing for (ChildResource) - final metadata: {'name': 'childresource', 'path': '/child', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (ChildResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (ChildResource) - metadata: {'name': 'childresource', 'path': '/child', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:25:45 | DEBUG | resource: converted (ChildResource) to declarative resource
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (ChildClient)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'childresource', 'path': '/child', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (ChildClient)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildClient)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: found class (ChildResource) on (ChildClient)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: class (ChildResource) has metadata: {'name': 'childresource', 'path': '/child', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: registered component (childresource) on: ChildClient
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: completed processing for (ChildClient) - metadata: {'name': 'childresource', 'path': '/child', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:25:45 | DEBUG | DeclarativeClient: found resource (childresource) on: ChildClient
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (BaseClient) to (ChildClient)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (ChildClient) - metadata: {'name': 'childresource', 'path': '/child', 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test'}
2025-03-24 19:25:45 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {}
2025-03-24 19:25:45 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (Nested)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (Nested)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Nested)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (Nested) - metadata: {}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: found callable (method) on: Test
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: registered method (method) on: Test
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: found class (Nested) on (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: class (Nested) has metadata: {'value': 'test', 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x104774cc0>}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: registered component (nested) on: Test
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'value': 'test', 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x104774cc0>}, 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeContainer) to (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test', 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x104774cc0>}, 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>}
2025-03-24 19:25:45 | DEBUG | container: converted (Test) to declarative container
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeContainer) to (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | container: converted (Test) to declarative container
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'testresource'}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource'}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'test_resource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'test_resource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'test_resource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'test_resource', 'path': '/test', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (GrandChild)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: set resource name (grandchild) for: GrandChild
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'grandchild'}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (GrandChild)
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: starting attribute processing for (GrandChild)
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'grandchild'}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: name already set to (grandchild) for: GrandChild
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: GrandChild
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: starting attribute processing for (GrandChild)
2025-03-24 19:25:45 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: GrandChild
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: initialized (methods) container for (GrandChild)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: initialized (components) container for (GrandChild)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: completed processing for (GrandChild) - metadata: {'name': 'grandchild', 'path': 'grandchild', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: GrandChild
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'grandchild', 'path': 'grandchild', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: completed processing for (GrandChild) - final metadata: {'name': 'grandchild', 'path': 'grandchild', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (GrandChild)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (GrandChild) - metadata: {'name': 'grandchild', 'path': 'grandchild', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | resource: converted (GrandChild) to declarative resource
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: set resource name (child) for: Child
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'child', 'path': 'grandchild', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: starting attribute processing for (Child)
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'child', 'path': 'grandchild', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: name already set to (child) for: Child
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Child
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: starting attribute processing for (Child)
2025-03-24 19:25:45 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Child
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: found class (GrandChild) on (Child)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: class (GrandChild) has metadata: {'name': 'child', 'path': 'child', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: registered component (child) on: Child
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: completed processing for (Child) - metadata: {'name': 'child', 'path': 'child', 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Child
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'child', 'path': 'child', 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: completed processing for (Child) - final metadata: {'name': 'child', 'path': 'child', 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (Child)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'name': 'child', 'path': 'child', 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:25:45 | DEBUG | resource: converted (Child) to declarative resource
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: set resource name (parent) for: Parent
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'parent', 'path': 'child', 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: starting attribute processing for (Parent)
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'parent', 'path': 'child', 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: name already set to (parent) for: Parent
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Parent
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: starting attribute processing for (Parent)
2025-03-24 19:25:45 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Parent
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: found class (Child) on (Parent)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: class (Child) has metadata: {'name': 'parent', 'path': '/parent', 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: registered component (parent) on: Parent
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: completed processing for (Parent) - metadata: {'name': 'parent', 'path': '/parent', 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Parent
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'parent', 'path': '/parent', 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: completed processing for (Parent) - final metadata: {'name': 'parent', 'path': '/parent', 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (Parent)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'name': 'parent', 'path': '/parent', 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: set resource name (test) for: Test
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'test'}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: starting attribute processing for (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'test'}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: name already set to (test) for: Test
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Test
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'name': 'test', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Test
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'test', 'methods': {}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: extracted path () from: Test
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: completed processing for (Test) - final metadata: {'name': 'test', 'methods': {}, 'components': {}, 'path': ''}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (Test)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'name': 'test', 'methods': {}, 'components': {}, 'path': ''}
2025-03-24 19:25:45 | DEBUG | resource: converted (Test) to declarative resource
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'testresource'}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource'}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: found callable (test_method) on: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: registered method (test_method) on: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x1047b0540>}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'testresource', 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x1047b0540>}, 'components': {}}
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 19:25:45 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'testresource', 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x1047b0540>}, 'components': {}, 'path': ''}
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:25:45 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x1047b0540>}, 'components': {}, 'path': ''}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (TestComponent)
2025-03-24 19:29:52 | DEBUG | DeclarativeComponent: Processing Attribute (attribute) on: TestComponent
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (TestComponent)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'attribute': 'value'}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 19:29:52 | DEBUG | DeclarativeComponent: Processing Attribute (parent_attr) on: Parent
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Parent)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'parent_attr': 'parent'}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {'parent_attr': 'parent'}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'parent_attr': 'parent'}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 19:29:52 | DEBUG | DeclarativeComponent: Processing Attribute (child_attr) on: Child
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (Parent) to (Child)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (NestedComponent)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (NestedComponent)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (NestedComponent)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (NestedComponent) - metadata: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: found callable (method) on: Container
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: registered method (method) on: Container
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: found class (NestedComponent) on (Container)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: class (NestedComponent) has metadata: {'components': {}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1045c5940>}}
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: registered component (nestedcomponent) on: Container
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1045c5940>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeContainer) to (Container)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1045c5940>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container'>}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeComponent: Processing Attribute (attr) on: Test
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'attr': 'value'}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (Declarative)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (Declarative)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Declarative)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (Declarative) - metadata: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (Source)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (Source)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Source)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (Source) - metadata: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (Target)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {'a': 1, 'b': 2}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'a': 1, 'b': 2}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (Target)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Target)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (Target) - metadata: {'a': 1, 'b': 2}
2025-03-24 19:29:52 | DEBUG | copymetadata: Copied metadata from (Source) to (Target)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (Component)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (Component)
2025-03-24 19:29:52 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: Component
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Component)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (Component) - metadata: {'name': 'mycomponent'}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {'name': 'mycomponent'}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'mycomponent'}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: initialized (components) container for (Container)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: initialized (methods) container for (Container)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: found class (Component) on (Container)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: class (Component) has metadata: {'name': 'mycomponent', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: Container
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'name': 'mycomponent', 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeContainer) to (Container)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'name': 'mycomponent', 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container'>}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'testresource'}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource'}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'testresource', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'testresource', 'components': {}, 'methods': {}, 'path': ''}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {}, 'path': ''}
2025-03-24 19:29:52 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {'name': 'testresource', 'components': {}, 'methods': {}, 'path': ''}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'testresource', 'components': {}, 'methods': {}, 'path': ''}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 19:29:52 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: TestClient
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'testresource', 'components': {}, 'methods': {}, 'path': '', 'baseurl': 'https://api.test.com'}
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: registered component (testresource) on: TestClient
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'name': 'testresource', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'path': '', 'baseurl': 'https://api.test.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>}
2025-03-24 19:29:52 | DEBUG | DeclarativeClient: found resource (testresource) on: TestClient
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'name': 'testresource', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'path': '', 'baseurl': 'https://api.test.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_declarative_client_basic.<locals>.TestClient'>, 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'testresource'}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource'}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: found class (TestResource) on (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: registered component (testresource) on: Test
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'name': 'testresource', 'path': '/test', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>}
2025-03-24 19:29:52 | DEBUG | DeclarativeClient: extracted baseurl () from: Test
2025-03-24 19:29:52 | DEBUG | DeclarativeClient: found resource (testresource) on: Test
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'name': 'testresource', 'path': '/test', 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.Test'>, 'baseurl': '', 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 19:29:52 | DEBUG | client: converted (Test) to declarative client
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'testresource'}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource'}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {'name': 'myresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'myresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'myresource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: registered component (myresource) on: TestClient
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'name': 'myresource', 'path': '/test', 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>}
2025-03-24 19:29:52 | DEBUG | DeclarativeClient: extracted baseurl () from: TestClient
2025-03-24 19:29:52 | DEBUG | DeclarativeClient: found resource (myresource) on: TestClient
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'name': 'myresource', 'path': '/test', 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.TestClient'>, 'baseurl': '', 'resources': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}}
2025-03-24 19:29:52 | DEBUG | client: converted (TestClient) to declarative client
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (BaseResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: set resource name (baseresource) for: BaseResource
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'baseresource'}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (BaseResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: starting attribute processing for (BaseResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'baseresource'}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: name already set to (baseresource) for: BaseResource
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: BaseResource
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: BaseResource
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: initialized (components) container for (BaseResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: initialized (methods) container for (BaseResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: completed processing for (BaseResource) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: BaseResource
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: completed processing for (BaseResource) - final metadata: {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (BaseResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (BaseResource) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | resource: converted (BaseResource) to declarative resource
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (BaseClient)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (BaseClient)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseClient)
2025-03-24 19:29:52 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: BaseClient
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: found class (BaseResource) on (BaseClient)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: class (BaseResource) has metadata: {'name': 'baseresource', 'path': '/base', 'components': {}, 'methods': {}, 'baseurl': 'https://api.base.com'}
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: registered component (baseresource) on: BaseClient
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: completed processing for (BaseClient) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>}
2025-03-24 19:29:52 | DEBUG | DeclarativeClient: found resource (baseresource) on: BaseClient
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (BaseClient)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (BaseClient) - metadata: {'name': 'baseresource', 'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (ChildResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {'name': 'baseresource', 'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: set resource name (childresource) for: ChildResource
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'childresource', 'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (ChildResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: starting attribute processing for (ChildResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'childresource', 'path': '/base', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: name already set to (childresource) for: ChildResource
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: ChildResource
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: ChildResource
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: completed processing for (ChildResource) - metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: ChildResource
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: completed processing for (ChildResource) - final metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (ChildResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (ChildResource) - metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:29:52 | DEBUG | resource: converted (ChildResource) to declarative resource
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (ChildClient)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (ChildClient)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildClient)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: found class (ChildResource) on (ChildClient)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: class (ChildResource) has metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.BaseClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: registered component (childresource) on: ChildClient
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: completed processing for (ChildClient) - metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:29:52 | DEBUG | DeclarativeClient: found resource (childresource) on: ChildClient
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (BaseClient) to (ChildClient)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (ChildClient) - metadata: {'name': 'childresource', 'path': '/child', 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'parent': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_inheritance.<locals>.ChildClient'>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test'}
2025-03-24 19:29:52 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {}
2025-03-24 19:29:52 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (Nested)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (Nested)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Nested)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (Nested) - metadata: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: found callable (method) on: Test
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: registered method (method) on: Test
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: found class (Nested) on (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: class (Nested) has metadata: {'value': 'test', 'components': {}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1045c4cc0>}}
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: registered component (nested) on: Test
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'value': 'test', 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1045c4cc0>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeContainer) to (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test', 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1045c4cc0>}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_decorators.Test'>}
2025-03-24 19:29:52 | DEBUG | container: converted (Test) to declarative container
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeContainer) to (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | container: converted (Test) to declarative container
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'testresource'}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource'}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'test_resource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'test_resource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'test_resource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'test_resource', 'path': '/test', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (GrandChild)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: set resource name (grandchild) for: GrandChild
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'grandchild'}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (GrandChild)
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: starting attribute processing for (GrandChild)
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'grandchild'}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: name already set to (grandchild) for: GrandChild
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: GrandChild
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: starting attribute processing for (GrandChild)
2025-03-24 19:29:52 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: GrandChild
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: initialized (components) container for (GrandChild)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: initialized (methods) container for (GrandChild)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: completed processing for (GrandChild) - metadata: {'name': 'grandchild', 'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: GrandChild
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'grandchild', 'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: completed processing for (GrandChild) - final metadata: {'name': 'grandchild', 'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (GrandChild)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (GrandChild) - metadata: {'name': 'grandchild', 'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | resource: converted (GrandChild) to declarative resource
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {'name': 'grandchild', 'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: set resource name (child) for: Child
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'child', 'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: starting attribute processing for (Child)
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'child', 'path': 'grandchild', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: name already set to (child) for: Child
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Child
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: starting attribute processing for (Child)
2025-03-24 19:29:52 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Child
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: found class (GrandChild) on (Child)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: class (GrandChild) has metadata: {'name': 'child', 'path': 'child', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: registered component (child) on: Child
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: completed processing for (Child) - metadata: {'name': 'child', 'path': 'child', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Child
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'child', 'path': 'child', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: completed processing for (Child) - final metadata: {'name': 'child', 'path': 'child', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (Child)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'name': 'child', 'path': 'child', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:29:52 | DEBUG | resource: converted (Child) to declarative resource
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {'name': 'child', 'path': 'child', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: set resource name (parent) for: Parent
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'parent', 'path': 'child', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: starting attribute processing for (Parent)
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'parent', 'path': 'child', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: name already set to (parent) for: Parent
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Parent
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: starting attribute processing for (Parent)
2025-03-24 19:29:52 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Parent
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: found class (Child) on (Parent)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: class (Child) has metadata: {'name': 'parent', 'path': '/parent', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: registered component (parent) on: Parent
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: completed processing for (Parent) - metadata: {'name': 'parent', 'path': '/parent', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Parent
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'parent', 'path': '/parent', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: completed processing for (Parent) - final metadata: {'name': 'parent', 'path': '/parent', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (Parent)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'name': 'parent', 'path': '/parent', 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'parent': <class 'ClientFactory.tests.unit.declarative.test_resource.test_resource_path_resolution.<locals>.Parent'>}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: set resource name (test) for: Test
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'test'}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: starting attribute processing for (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'test'}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: name already set to (test) for: Test
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Test
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: initialized (components) container for (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: initialized (methods) container for (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'name': 'test', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Test
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'test', 'components': {}, 'methods': {}}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: extracted path () from: Test
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: completed processing for (Test) - final metadata: {'name': 'test', 'components': {}, 'methods': {}, 'path': ''}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (Test)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'name': 'test', 'components': {}, 'methods': {}, 'path': ''}
2025-03-24 19:29:52 | DEBUG | resource: converted (Test) to declarative resource
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: metadata before processing class attributes: {'name': 'testresource'}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource'}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: initialized (components) container for (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: initialized (methods) container for (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: found callable (test_method) on: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: registered method (test_method) on: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x104600540>}}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'testresource', 'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x104600540>}}
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: extracted path () from: TestResource
2025-03-24 19:29:52 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'testresource', 'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x104600540>}, 'path': ''}
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:29:52 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x104600540>}, 'path': ''}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (TestComponent)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (TestComponent)
2025-03-24 19:37:57 | DEBUG | DeclarativeComponent: Processing Attribute (attribute) on: TestComponent
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'attribute': 'value'}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Parent)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 19:37:57 | DEBUG | DeclarativeComponent: Processing Attribute (parent_attr) on: Parent
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'parent_attr': 'parent'}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (Parent) to (Child)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (parent_attr) from (Parent) to (Child)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 19:37:57 | DEBUG | DeclarativeComponent: Processing Attribute (child_attr) on: Child
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (NestedComponent)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (NestedComponent)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (NestedComponent)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (NestedComponent) - metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeContainer) to (Container)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeContainer) to (Container)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeContainer) to (Container)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeContainer) to (Container)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeContainer) to (Container)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeContainer) to (Container)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeContainer) to (Container)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeContainer) to (Container)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeContainer) to (Container)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: found callable (method) on: Container
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: registered method (method) on: Container
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: found class (NestedComponent) on (Container)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: class (NestedComponent) has metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: registered component (nestedcomponent) on: Container
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1062a1a80>}}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x1062a1a80>}}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeComponent: Processing Attribute (attr) on: Test
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'attr': 'value'}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (Declarative)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Declarative)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (Declarative)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (Declarative) - metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (Source)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Source)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (Source)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (Source) - metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (Target)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Target)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (Target)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (Target) - metadata: {}
2025-03-24 19:37:57 | DEBUG | copymetadata: Copied metadata from (Source) to (Target)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (Component)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Component)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (Component)
2025-03-24 19:37:57 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: Component
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (Component) - metadata: {'name': 'mycomponent'}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeContainer) to (Container)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeContainer) to (Container)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeContainer) to (Container)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeContainer) to (Container)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeContainer) to (Container)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeContainer) to (Container)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeContainer) to (Container)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeContainer) to (Container)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeContainer) to (Container)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: found class (Component) on (Container)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: class (Component) has metadata: {'name': 'mycomponent'}
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: Container
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {}}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}, 'methods': {}}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeClient) to (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeClient) to (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeClient) to (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeClient) to (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeClient) to (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeClient) to (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeClient) to (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeClient) to (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (baseurl) from (DeclarativeClient) to (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getresources) from (DeclarativeClient) to (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getbaseurl) from (DeclarativeClient) to (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (resources) from (DeclarativeClient) to (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: TestClient
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: registered component (testresource) on: TestClient
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1062213a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x106221440>)>, 'resources': {}}
2025-03-24 19:37:57 | DEBUG | DeclarativeClient: found resource (testresource) on: TestClient
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1062213a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x106221440>)>, 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeClient) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeClient) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeClient) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeClient) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeClient) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeClient) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeClient) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeClient) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (baseurl) from (DeclarativeClient) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getresources) from (DeclarativeClient) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getbaseurl) from (DeclarativeClient) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (resources) from (DeclarativeClient) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: found class (TestResource) on (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: registered component (testresource) on: Test
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1062213a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x106221440>)>, 'resources': {}}
2025-03-24 19:37:57 | DEBUG | DeclarativeClient: found resource (testresource) on: Test
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'methods': {}, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1062213a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x106221440>)>, 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 19:37:57 | DEBUG | client: converted (Test) to declarative client
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeClient) to (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeClient) to (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeClient) to (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeClient) to (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeClient) to (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeClient) to (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeClient) to (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeClient) to (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (baseurl) from (DeclarativeClient) to (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getresources) from (DeclarativeClient) to (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getbaseurl) from (DeclarativeClient) to (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (resources) from (DeclarativeClient) to (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'myresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: registered component (myresource) on: TestClient
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {}, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1062213a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x106221440>)>, 'resources': {}}
2025-03-24 19:37:57 | DEBUG | DeclarativeClient: found resource (myresource) on: TestClient
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'methods': {}, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1062213a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x106221440>)>, 'resources': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}}
2025-03-24 19:37:57 | DEBUG | client: converted (TestClient) to declarative client
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (BaseResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: set resource name (baseresource) for: BaseResource
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (BaseResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (BaseResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (BaseResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (BaseResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (BaseResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (BaseResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (BaseResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (BaseResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (BaseResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (BaseResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (BaseResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (BaseResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (BaseResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (BaseResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: starting attribute processing for (BaseResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'baseresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: name already set to (baseresource) for: BaseResource
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: BaseResource
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: BaseResource
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: completed processing for (BaseResource) - metadata: {'name': 'baseresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '/base', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: BaseResource
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'baseresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '/base', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: completed processing for (BaseResource) - final metadata: {'name': 'baseresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '/base', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (BaseResource) - metadata: {'name': 'baseresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '/base', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | resource: converted (BaseResource) to declarative resource
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (BaseClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (BaseClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeClient) to (BaseClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeClient) to (BaseClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeClient) to (BaseClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeClient) to (BaseClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeClient) to (BaseClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeClient) to (BaseClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeClient) to (BaseClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeClient) to (BaseClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (baseurl) from (DeclarativeClient) to (BaseClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getresources) from (DeclarativeClient) to (BaseClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getbaseurl) from (DeclarativeClient) to (BaseClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (resources) from (DeclarativeClient) to (BaseClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (BaseClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: BaseClient
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: found class (BaseResource) on (BaseClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: class (BaseResource) has metadata: {'name': 'baseresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '/base', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: registered component (baseresource) on: BaseClient
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: completed processing for (BaseClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1062213a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x106221440>)>, 'resources': {}}
2025-03-24 19:37:57 | DEBUG | DeclarativeClient: found resource (baseresource) on: BaseClient
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (BaseClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1062213a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x106221440>)>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (ChildResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: set resource name (childresource) for: ChildResource
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (ChildResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (ChildResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (ChildResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (ChildResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (ChildResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (ChildResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (ChildResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (ChildResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (ChildResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (ChildResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (ChildResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (ChildResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (ChildResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (ChildResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: starting attribute processing for (ChildResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'childresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: name already set to (childresource) for: ChildResource
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: ChildResource
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: ChildResource
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: completed processing for (ChildResource) - metadata: {'name': 'childresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '/child', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: ChildResource
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'childresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '/child', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: completed processing for (ChildResource) - final metadata: {'name': 'childresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '/child', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (ChildResource) - metadata: {'name': 'childresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '/child', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | resource: converted (ChildResource) to declarative resource
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (ChildClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (BaseClient) to (ChildClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmetadata) from (BaseClient) to (ChildClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (setmetadata) from (BaseClient) to (ChildClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (BaseClient) to (ChildClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (BaseClient) to (ChildClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (BaseClient) to (ChildClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (findmetadata) from (BaseClient) to (ChildClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (components) from (BaseClient) to (ChildClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (methods) from (BaseClient) to (ChildClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (baseurl) from (BaseClient) to (ChildClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getresources) from (BaseClient) to (ChildClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getbaseurl) from (BaseClient) to (ChildClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (resources) from (BaseClient) to (ChildClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (ChildClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: found class (ChildResource) on (ChildClient)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: class (ChildResource) has metadata: {'name': 'childresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '/child', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: registered component (childresource) on: ChildClient
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: completed processing for (ChildClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1062213a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x106221440>)>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:37:57 | DEBUG | DeclarativeClient: found resource (childresource) on: ChildClient
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (ChildClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'methods': {}, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x1062213a0>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x106221440>)>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test'}
2025-03-24 19:37:57 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {}
2025-03-24 19:37:57 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (Nested)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Nested)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (Nested)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (Nested) - metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeContainer) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeContainer) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeContainer) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeContainer) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeContainer) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeContainer) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeContainer) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeContainer) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeContainer) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: found callable (method) on: Test
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: registered method (method) on: Test
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: found class (Nested) on (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: class (Nested) has metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: registered component (nested) on: Test
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1062a0e00>}, 'value': 'test'}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x1062a0e00>}, 'value': 'test'}
2025-03-24 19:37:57 | DEBUG | container: converted (Test) to declarative container
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeContainer) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeContainer) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeContainer) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeContainer) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeContainer) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeContainer) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeContainer) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeContainer) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeContainer) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}}
2025-03-24 19:37:57 | DEBUG | container: converted (Test) to declarative container
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 19:37:57 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: TestResource
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'test_resource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'test_resource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'test_resource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'test_resource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (GrandChild)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: set resource name (grandchild) for: GrandChild
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (GrandChild)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (GrandChild)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (GrandChild)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (GrandChild)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (GrandChild)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (GrandChild)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (GrandChild)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (GrandChild)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (GrandChild)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (GrandChild)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (GrandChild)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (GrandChild)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (GrandChild)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (GrandChild)
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: starting attribute processing for (GrandChild)
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'grandchild', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: name already set to (grandchild) for: GrandChild
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: GrandChild
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: starting attribute processing for (GrandChild)
2025-03-24 19:37:57 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: GrandChild
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: completed processing for (GrandChild) - metadata: {'name': 'grandchild', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': 'grandchild', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: GrandChild
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'grandchild', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': 'grandchild', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: completed processing for (GrandChild) - final metadata: {'name': 'grandchild', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': 'grandchild', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (GrandChild) - metadata: {'name': 'grandchild', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': 'grandchild', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | resource: converted (GrandChild) to declarative resource
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: set resource name (child) for: Child
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (Child)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (Child)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (Child)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (Child)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (Child)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (Child)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (Child)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (Child)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (Child)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (Child)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (Child)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (Child)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (Child)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: starting attribute processing for (Child)
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'child', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: name already set to (child) for: Child
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Child
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: starting attribute processing for (Child)
2025-03-24 19:37:57 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Child
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: found class (GrandChild) on (Child)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: class (GrandChild) has metadata: {'name': 'grandchild', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': 'grandchild', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: registered component (grandchild) on: Child
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: completed processing for (Child) - metadata: {'name': 'child', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'path': 'child', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Child
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'child', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'path': 'child', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: completed processing for (Child) - final metadata: {'name': 'child', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'path': 'child', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'name': 'child', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'path': 'child', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | resource: converted (Child) to declarative resource
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: set resource name (parent) for: Parent
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (Parent)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (Parent)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (Parent)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (Parent)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (Parent)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (Parent)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (Parent)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (Parent)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (Parent)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (Parent)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (Parent)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (Parent)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (Parent)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: starting attribute processing for (Parent)
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'parent', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: name already set to (parent) for: Parent
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Parent
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: starting attribute processing for (Parent)
2025-03-24 19:37:57 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Parent
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: found class (Child) on (Parent)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: class (Child) has metadata: {'name': 'child', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'methods': {}, 'path': 'child', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: registered component (child) on: Parent
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: completed processing for (Parent) - metadata: {'name': 'parent', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'path': '/parent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Parent
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'parent', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'path': '/parent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: completed processing for (Parent) - final metadata: {'name': 'parent', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'path': '/parent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'name': 'parent', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'methods': {}, 'path': '/parent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: set resource name (test) for: Test
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: starting attribute processing for (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'test', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: name already set to (test) for: Test
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Test
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'name': 'test', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Test
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'test', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: completed processing for (Test) - final metadata: {'name': 'test', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'name': 'test', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | resource: converted (Test) to declarative resource
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: found callable (test_method) on: TestResource
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: registered method (test_method) on: TestResource
2025-03-24 19:37:57 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x1062a1a80>}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x1062a1a80>}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x1062a1a80>}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:37:57 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1062202c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106220360>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106220400>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1062204a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106220540>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1062205e0>)>, 'components': {}, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x1062a1a80>}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106220ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106220f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106220fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (TestComponent)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (TestComponent)
2025-03-24 19:41:32 | DEBUG | DeclarativeComponent: Processing Attribute (attribute) on: TestComponent
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'attribute': 'value'}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Parent)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 19:41:32 | DEBUG | DeclarativeComponent: Processing Attribute (parent_attr) on: Parent
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'parent_attr': 'parent'}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (Parent) to (Child)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (parent_attr) from (Parent) to (Child)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 19:41:32 | DEBUG | DeclarativeComponent: Processing Attribute (child_attr) on: Child
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'parent_attr': 'parent', 'child_attr': 'child'}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (NestedComponent)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (NestedComponent)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (NestedComponent)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (NestedComponent) - metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeContainer) to (Container)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeContainer) to (Container)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeContainer) to (Container)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeContainer) to (Container)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeContainer) to (Container)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeContainer) to (Container)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeContainer) to (Container)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeContainer) to (Container)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeContainer) to (Container)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: found callable (method) on: Container
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: registered method (method) on: Container
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: found class (NestedComponent) on (Container)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: class (NestedComponent) has metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: registered component (nestedcomponent) on: Container
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10661da80>}, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {'method': <function test_declarative_container.<locals>.Container.method at 0x10661da80>}, 'components': {'nestedcomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container.<locals>.Container.NestedComponent'>}}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeComponent: Processing Attribute (attr) on: Test
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'attr': 'value'}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (Declarative)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Declarative)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (Declarative)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (Declarative) - metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (Source)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Source)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (Source)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (Source) - metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (Target)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Target)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (Target)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (Target) - metadata: {}
2025-03-24 19:41:32 | DEBUG | copymetadata: Copied metadata from (Source) to (Target)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (Component)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Component)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (Component)
2025-03-24 19:41:32 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: Component
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (Component) - metadata: {'name': 'mycomponent'}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeContainer) to (Container)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeContainer) to (Container)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeContainer) to (Container)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeContainer) to (Container)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeContainer) to (Container)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeContainer) to (Container)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeContainer) to (Container)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeContainer) to (Container)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeContainer) to (Container)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: found class (Component) on (Container)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: class (Component) has metadata: {'name': 'mycomponent'}
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: registered component (mycomponent) on: Container
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {'mycomponent': <class 'ClientFactory.tests.unit.declarative.test_base.test_declarative_container_discovery.<locals>.Container.Component'>}}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeClient) to (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeClient) to (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeClient) to (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeClient) to (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeClient) to (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeClient) to (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeClient) to (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeClient) to (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (baseurl) from (DeclarativeClient) to (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getresources) from (DeclarativeClient) to (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getbaseurl) from (DeclarativeClient) to (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (resources) from (DeclarativeClient) to (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: TestClient
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: registered component (testresource) on: TestClient
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x106589300>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1065893a0>)>, 'resources': {}}
2025-03-24 19:41:32 | DEBUG | DeclarativeClient: found resource (testresource) on: TestClient
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'baseurl': 'https://api.test.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x106589300>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1065893a0>)>, 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | resource: converted (TestResource) to declarative resource
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeClient) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeClient) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeClient) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeClient) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeClient) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeClient) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeClient) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeClient) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (baseurl) from (DeclarativeClient) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getresources) from (DeclarativeClient) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getbaseurl) from (DeclarativeClient) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (resources) from (DeclarativeClient) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: found class (TestResource) on (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: registered component (testresource) on: Test
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x106589300>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1065893a0>)>, 'resources': {}}
2025-03-24 19:41:32 | DEBUG | DeclarativeClient: found resource (testresource) on: Test
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x106589300>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1065893a0>)>, 'resources': {'testresource': <class 'ClientFactory.tests.unit.declarative.test_client.TestResource'>}}
2025-03-24 19:41:32 | DEBUG | client: converted (Test) to declarative client
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeClient) to (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeClient) to (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeClient) to (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeClient) to (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeClient) to (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeClient) to (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeClient) to (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeClient) to (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (baseurl) from (DeclarativeClient) to (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getresources) from (DeclarativeClient) to (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getbaseurl) from (DeclarativeClient) to (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (resources) from (DeclarativeClient) to (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: found class (TestResource) on (TestClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: class (TestResource) has metadata: {'name': 'myresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: registered component (myresource) on: TestClient
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x106589300>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1065893a0>)>, 'resources': {}}
2025-03-24 19:41:32 | DEBUG | DeclarativeClient: found resource (myresource) on: TestClient
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x106589300>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1065893a0>)>, 'resources': {'myresource': <class 'ClientFactory.tests.unit.declarative.test_client.test_client_resource_registration.<locals>.TestResource'>}}
2025-03-24 19:41:32 | DEBUG | client: converted (TestClient) to declarative client
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (BaseResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: set resource name (baseresource) for: BaseResource
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (BaseResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (BaseResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (BaseResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (BaseResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (BaseResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (BaseResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (BaseResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (BaseResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (BaseResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (BaseResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (BaseResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (BaseResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (BaseResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (BaseResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: starting attribute processing for (BaseResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'baseresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: name already set to (baseresource) for: BaseResource
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: BaseResource
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: BaseResource
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: completed processing for (BaseResource) - metadata: {'name': 'baseresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '/base', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: BaseResource
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'baseresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '/base', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: completed processing for (BaseResource) - final metadata: {'name': 'baseresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '/base', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (BaseResource) - metadata: {'name': 'baseresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '/base', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | resource: converted (BaseResource) to declarative resource
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (BaseClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (BaseClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeClient) to (BaseClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeClient) to (BaseClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeClient) to (BaseClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeClient) to (BaseClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeClient) to (BaseClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeClient) to (BaseClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeClient) to (BaseClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeClient) to (BaseClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (baseurl) from (DeclarativeClient) to (BaseClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getresources) from (DeclarativeClient) to (BaseClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getbaseurl) from (DeclarativeClient) to (BaseClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (resources) from (DeclarativeClient) to (BaseClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (BaseClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: starting attribute processing for (BaseClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeComponent: Processing Attribute (baseurl) on: BaseClient
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: found class (BaseResource) on (BaseClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: class (BaseResource) has metadata: {'name': 'baseresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '/base', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: registered component (baseresource) on: BaseClient
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: completed processing for (BaseClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x106589300>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1065893a0>)>, 'resources': {}}
2025-03-24 19:41:32 | DEBUG | DeclarativeClient: found resource (baseresource) on: BaseClient
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (BaseClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x106589300>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1065893a0>)>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (ChildResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: set resource name (childresource) for: ChildResource
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (ChildResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (ChildResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (ChildResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (ChildResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (ChildResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (ChildResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (ChildResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (ChildResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (ChildResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (ChildResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (ChildResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (ChildResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (ChildResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (ChildResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: starting attribute processing for (ChildResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'childresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: name already set to (childresource) for: ChildResource
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: ChildResource
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: ChildResource
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: completed processing for (ChildResource) - metadata: {'name': 'childresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '/child', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: ChildResource
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'childresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '/child', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: completed processing for (ChildResource) - final metadata: {'name': 'childresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '/child', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (ChildResource) - metadata: {'name': 'childresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '/child', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | resource: converted (ChildResource) to declarative resource
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (ChildClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (BaseClient) to (ChildClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmetadata) from (BaseClient) to (ChildClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (setmetadata) from (BaseClient) to (ChildClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (BaseClient) to (ChildClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (BaseClient) to (ChildClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (BaseClient) to (ChildClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (findmetadata) from (BaseClient) to (ChildClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (methods) from (BaseClient) to (ChildClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (components) from (BaseClient) to (ChildClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (baseurl) from (BaseClient) to (ChildClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getresources) from (BaseClient) to (ChildClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getbaseurl) from (BaseClient) to (ChildClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (resources) from (BaseClient) to (ChildClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (ChildClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: found class (ChildResource) on (ChildClient)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: class (ChildResource) has metadata: {'name': 'childresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '/child', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: registered component (childresource) on: ChildClient
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: completed processing for (ChildClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x106589300>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1065893a0>)>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>}}
2025-03-24 19:41:32 | DEBUG | DeclarativeClient: found resource (childresource) on: ChildClient
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (ChildClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}, 'baseurl': 'https://api.base.com', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x106589300>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x1065893a0>)>, 'resources': {'baseresource': <class 'ClientFactory.tests.unit.declarative.test_client.BaseResource'>, 'childresource': <class 'ClientFactory.tests.unit.declarative.test_client.ChildResource'>}}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'value': 'test'}
2025-03-24 19:41:32 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {}
2025-03-24 19:41:32 | DEBUG | declarative: converted (Test) to declarative component
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (Nested)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeComponent) to (Nested)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (Nested)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (Nested) - metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeContainer) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeContainer) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeContainer) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeContainer) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeContainer) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeContainer) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeContainer) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeContainer) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeContainer) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeComponent: Processing Attribute (value) on: Test
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: found callable (method) on: Test
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: registered method (method) on: Test
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: found class (Nested) on (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: class (Nested) has metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: registered component (nested) on: Test
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x10661ce00>}, 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'value': 'test'}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {'method': <function test_container_decorator.<locals>.Test.method at 0x10661ce00>}, 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_decorators.test_container_decorator.<locals>.Test.Nested'>}, 'value': 'test'}
2025-03-24 19:41:32 | DEBUG | container: converted (Test) to declarative container
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeContainer) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeContainer) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeContainer) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeContainer) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeContainer) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeContainer) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeContainer) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeContainer) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeContainer) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}}
2025-03-24 19:41:32 | DEBUG | container: converted (Test) to declarative container
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: TestResource
2025-03-24 19:41:32 | DEBUG | DeclarativeComponent: Processing Attribute (name) on: TestResource
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'test_resource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'test_resource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'test_resource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'test_resource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '/test', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (GrandChild)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: set resource name (grandchild) for: GrandChild
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (GrandChild)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (GrandChild)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (GrandChild)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (GrandChild)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (GrandChild)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (GrandChild)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (GrandChild)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (GrandChild)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (GrandChild)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (GrandChild)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (GrandChild)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (GrandChild)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (GrandChild)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (GrandChild)
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: starting attribute processing for (GrandChild)
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'grandchild', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: name already set to (grandchild) for: GrandChild
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: GrandChild
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: starting attribute processing for (GrandChild)
2025-03-24 19:41:32 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: GrandChild
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: completed processing for (GrandChild) - metadata: {'name': 'grandchild', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': 'grandchild', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: GrandChild
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'grandchild', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': 'grandchild', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: completed processing for (GrandChild) - final metadata: {'name': 'grandchild', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': 'grandchild', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (GrandChild) - metadata: {'name': 'grandchild', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': 'grandchild', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | resource: converted (GrandChild) to declarative resource
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: set resource name (child) for: Child
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (Child)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (Child)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (Child)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (Child)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (Child)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (Child)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (Child)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (Child)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (Child)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (Child)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (Child)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (Child)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (Child)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: starting attribute processing for (Child)
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'child', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: name already set to (child) for: Child
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Child
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: starting attribute processing for (Child)
2025-03-24 19:41:32 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Child
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: found class (GrandChild) on (Child)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: class (GrandChild) has metadata: {'name': 'grandchild', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': 'grandchild', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: registered component (grandchild) on: Child
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: completed processing for (Child) - metadata: {'name': 'child', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'path': 'child', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Child
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'child', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'path': 'child', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: completed processing for (Child) - final metadata: {'name': 'child', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'path': 'child', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'name': 'child', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'path': 'child', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | resource: converted (Child) to declarative resource
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: set resource name (parent) for: Parent
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (Parent)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (Parent)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (Parent)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (Parent)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (Parent)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (Parent)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (Parent)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (Parent)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (Parent)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (Parent)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (Parent)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (Parent)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (Parent)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: starting attribute processing for (Parent)
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'parent', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: name already set to (parent) for: Parent
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Parent
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: starting attribute processing for (Parent)
2025-03-24 19:41:32 | DEBUG | DeclarativeComponent: Processing Attribute (path) on: Parent
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: found class (Child) on (Parent)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: class (Child) has metadata: {'name': 'child', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {'grandchild': <class 'ClientFactory.tests.unit.declarative.test_resource.GrandChild'>}, 'path': 'child', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: registered component (child) on: Parent
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: completed processing for (Parent) - metadata: {'name': 'parent', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'path': '/parent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Parent
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'parent', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'path': '/parent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: completed processing for (Parent) - final metadata: {'name': 'parent', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'path': '/parent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'name': 'parent', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {'child': <class 'ClientFactory.tests.unit.declarative.test_resource.Child'>}, 'path': '/parent', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: set resource name (test) for: Test
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: starting attribute processing for (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'test', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: name already set to (test) for: Test
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Test
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: starting attribute processing for (Test)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: completed processing for (Test) - metadata: {'name': 'test', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Test
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'test', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: completed processing for (Test) - final metadata: {'name': 'test', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (Test) - metadata: {'name': 'test', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | resource: converted (Test) to declarative resource
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: creating class (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: set resource name (testresource) for: TestResource
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: processing attributes for (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: starting attribute processing for (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: name already set to (testresource) for: TestResource
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: TestResource
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: starting attribute processing for (TestResource)
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: found callable (test_method) on: TestResource
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: registered method (test_method) on: TestResource
2025-03-24 19:41:32 | DEBUG | DeclarativeContainer: completed processing for (TestResource) - metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x10661cae0>}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: TestResource
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x10661cae0>}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeResource: completed processing for (TestResource) - final metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x10661cae0>}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:41:32 | DEBUG | DeclarativeMeta: completed creation of (TestResource) - metadata: {'name': 'testresource', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106588220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1065882c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106588360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106588400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1065884a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106588540>)>, 'methods': {'test_method': <function test_resource_methods.<locals>.TestResource.test_method at 0x10661cae0>}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x106588ea0>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x106588f40>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x106588fe0>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: creating class (Users)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: set resource name (users) for: Users
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (Users)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (Users)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (Users)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (Users)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (Users)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (Users)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (Users)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (Users)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (Users)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (Users)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (Users)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (Users)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (Users)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: processing attributes for (Users)
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: starting attribute processing for (Users)
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'users', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: name already set to (users) for: Users
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Users
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: starting attribute processing for (Users)
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: found callable (list) on: Users
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: registered method (list) on: Users
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: found callable (get) on: Users
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: registered method (get) on: Users
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: completed processing for (Users) - metadata: {'name': 'users', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {'list': <function test_complete_api_definition.<locals>.TestAPI.Users.list at 0x1028ef740>, 'get': <function test_complete_api_definition.<locals>.TestAPI.Users.get at 0x1028ef7e0>}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Users
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'users', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {'list': <function test_complete_api_definition.<locals>.TestAPI.Users.list at 0x1028ef740>, 'get': <function test_complete_api_definition.<locals>.TestAPI.Users.get at 0x1028ef7e0>}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: completed processing for (Users) - final metadata: {'name': 'users', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {'list': <function test_complete_api_definition.<locals>.TestAPI.Users.list at 0x1028ef740>, 'get': <function test_complete_api_definition.<locals>.TestAPI.Users.get at 0x1028ef7e0>}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: completed creation of (Users) - metadata: {'name': 'users', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {'list': <function test_complete_api_definition.<locals>.TestAPI.Users.list at 0x1028ef740>, 'get': <function test_complete_api_definition.<locals>.TestAPI.Users.get at 0x1028ef7e0>}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | resource: converted (Users) to declarative resource
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: creating class (Comments)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: set resource name (comments) for: Comments
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (Comments)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (Comments)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (Comments)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (Comments)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (Comments)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (Comments)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (Comments)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (Comments)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (Comments)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (Comments)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (Comments)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (Comments)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (Comments)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: processing attributes for (Comments)
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: starting attribute processing for (Comments)
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'comments', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: name already set to (comments) for: Comments
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Comments
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: starting attribute processing for (Comments)
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: found callable (list) on: Comments
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: registered method (list) on: Comments
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: completed processing for (Comments) - metadata: {'name': 'comments', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {'list': <function test_complete_api_definition.<locals>.TestAPI.Posts.Comments.list at 0x1028efba0>}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Comments
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'comments', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {'list': <function test_complete_api_definition.<locals>.TestAPI.Posts.Comments.list at 0x1028efba0>}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: completed processing for (Comments) - final metadata: {'name': 'comments', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {'list': <function test_complete_api_definition.<locals>.TestAPI.Posts.Comments.list at 0x1028efba0>}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: completed creation of (Comments) - metadata: {'name': 'comments', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {'list': <function test_complete_api_definition.<locals>.TestAPI.Posts.Comments.list at 0x1028efba0>}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | resource: converted (Comments) to declarative resource
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: creating class (Posts)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: set resource name (posts) for: Posts
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (Posts)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (Posts)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (Posts)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (Posts)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (Posts)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (Posts)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (Posts)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (Posts)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (Posts)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (Posts)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (Posts)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (Posts)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (Posts)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: processing attributes for (Posts)
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: starting attribute processing for (Posts)
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'posts', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: name already set to (posts) for: Posts
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Posts
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: starting attribute processing for (Posts)
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: found callable (create) on: Posts
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: registered method (create) on: Posts
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: found class (Comments) on (Posts)
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: class (Comments) has metadata: {'name': 'comments', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {'list': <function test_complete_api_definition.<locals>.TestAPI.Posts.Comments.list at 0x1028efba0>}, 'path': '{id}/comments', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: registered component (comments) on: Posts
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: completed processing for (Posts) - metadata: {'name': 'posts', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {'comments': <class 'ClientFactory.tests.integration.declarative.test_integration.Comments'>}, 'methods': {'create': <function test_complete_api_definition.<locals>.TestAPI.Posts.create at 0x1028efe20>}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Posts
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'posts', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {'comments': <class 'ClientFactory.tests.integration.declarative.test_integration.Comments'>}, 'methods': {'create': <function test_complete_api_definition.<locals>.TestAPI.Posts.create at 0x1028efe20>}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: completed processing for (Posts) - final metadata: {'name': 'posts', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {'comments': <class 'ClientFactory.tests.integration.declarative.test_integration.Comments'>}, 'methods': {'create': <function test_complete_api_definition.<locals>.TestAPI.Posts.create at 0x1028efe20>}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: completed creation of (Posts) - metadata: {'name': 'posts', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {'comments': <class 'ClientFactory.tests.integration.declarative.test_integration.Comments'>}, 'methods': {'create': <function test_complete_api_definition.<locals>.TestAPI.Posts.create at 0x1028efe20>}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | resource: converted (Posts) to declarative resource
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: creating class (TestAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (TestAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeClient) to (TestAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeClient) to (TestAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeClient) to (TestAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeClient) to (TestAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeClient) to (TestAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeClient) to (TestAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeClient) to (TestAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeClient) to (TestAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (baseurl) from (DeclarativeClient) to (TestAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getresources) from (DeclarativeClient) to (TestAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getbaseurl) from (DeclarativeClient) to (TestAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (resources) from (DeclarativeClient) to (TestAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: processing attributes for (TestAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: starting attribute processing for (TestAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: found class (Users) on (TestAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: class (Users) has metadata: {'name': 'users', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {'list': <function test_complete_api_definition.<locals>.TestAPI.Users.list at 0x1028ef740>, 'get': <function test_complete_api_definition.<locals>.TestAPI.Users.get at 0x1028ef7e0>}, 'path': '/users', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: registered component (users) on: TestAPI
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: found class (Posts) on (TestAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: class (Posts) has metadata: {'name': 'posts', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {'comments': <class 'ClientFactory.tests.integration.declarative.test_integration.Comments'>}, 'methods': {'create': <function test_complete_api_definition.<locals>.TestAPI.Posts.create at 0x1028efe20>}, 'path': '/posts', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: registered component (posts) on: TestAPI
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: completed processing for (TestAPI) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {'users': <class 'ClientFactory.tests.integration.declarative.test_integration.Users'>, 'posts': <class 'ClientFactory.tests.integration.declarative.test_integration.Posts'>}, 'methods': {}, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10289d300>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10289d3a0>)>, 'resources': {}}
2025-03-24 19:42:01 | DEBUG | DeclarativeClient: found resource (users) on: TestAPI
2025-03-24 19:42:01 | DEBUG | DeclarativeClient: found resource (posts) on: TestAPI
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: completed creation of (TestAPI) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {'users': <class 'ClientFactory.tests.integration.declarative.test_integration.Users'>, 'posts': <class 'ClientFactory.tests.integration.declarative.test_integration.Posts'>}, 'methods': {}, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10289d300>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10289d3a0>)>, 'resources': {'users': <class 'ClientFactory.tests.integration.declarative.test_integration.Users'>, 'posts': <class 'ClientFactory.tests.integration.declarative.test_integration.Posts'>}}
2025-03-24 19:42:01 | DEBUG | client: converted (TestAPI) to declarative client
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: creating class (Protected)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: set resource name (protected) for: Protected
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (Protected)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (Protected)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (Protected)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (Protected)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (Protected)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (Protected)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (Protected)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (Protected)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (Protected)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (Protected)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (Protected)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (Protected)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (Protected)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: processing attributes for (Protected)
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: starting attribute processing for (Protected)
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'protected', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: name already set to (protected) for: Protected
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Protected
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: starting attribute processing for (Protected)
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: found callable (secure_method) on: Protected
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: registered method (secure_method) on: Protected
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: completed processing for (Protected) - metadata: {'name': 'protected', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {'secure_method': <function test_auth_integration.<locals>.AuthAPI.Protected.secure_method at 0x1028efc40>}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Protected
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'protected', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {'secure_method': <function test_auth_integration.<locals>.AuthAPI.Protected.secure_method at 0x1028efc40>}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: completed processing for (Protected) - final metadata: {'name': 'protected', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {'secure_method': <function test_auth_integration.<locals>.AuthAPI.Protected.secure_method at 0x1028efc40>}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: completed creation of (Protected) - metadata: {'name': 'protected', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {'secure_method': <function test_auth_integration.<locals>.AuthAPI.Protected.secure_method at 0x1028efc40>}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | resource: converted (Protected) to declarative resource
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: creating class (AuthAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (AuthAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeClient) to (AuthAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeClient) to (AuthAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeClient) to (AuthAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeClient) to (AuthAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeClient) to (AuthAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeClient) to (AuthAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeClient) to (AuthAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeClient) to (AuthAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (baseurl) from (DeclarativeClient) to (AuthAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getresources) from (DeclarativeClient) to (AuthAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getbaseurl) from (DeclarativeClient) to (AuthAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (resources) from (DeclarativeClient) to (AuthAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: processing attributes for (AuthAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: starting attribute processing for (AuthAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeComponent: Processing Attribute (auth_type) on: AuthAPI
2025-03-24 19:42:01 | DEBUG | DeclarativeComponent: Processing Attribute (auth_token) on: AuthAPI
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: found class (Protected) on (AuthAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: class (Protected) has metadata: {'name': 'protected', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {'secure_method': <function test_auth_integration.<locals>.AuthAPI.Protected.secure_method at 0x1028efc40>}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: registered component (protected) on: AuthAPI
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: completed processing for (AuthAPI) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {'protected': <class 'ClientFactory.tests.integration.declarative.test_integration.Protected'>}, 'methods': {}, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10289d300>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10289d3a0>)>, 'resources': {}, 'auth_type': 'bearer', 'auth_token': 'test_token'}
2025-03-24 19:42:01 | DEBUG | DeclarativeClient: found resource (protected) on: AuthAPI
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: completed creation of (AuthAPI) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {'protected': <class 'ClientFactory.tests.integration.declarative.test_integration.Protected'>}, 'methods': {}, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10289d300>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10289d3a0>)>, 'resources': {'protected': <class 'ClientFactory.tests.integration.declarative.test_integration.Protected'>}, 'auth_type': 'bearer', 'auth_token': 'test_token'}
2025-03-24 19:42:01 | DEBUG | client: converted (AuthAPI) to declarative client
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: creating class (C)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: set resource name (c) for: C
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (C)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (C)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (C)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (C)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (C)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (C)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (C)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (C)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (C)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (C)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (C)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (C)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (C)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: processing attributes for (C)
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: starting attribute processing for (C)
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'c', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: name already set to (c) for: C
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: C
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: starting attribute processing for (C)
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: found callable (method) on: C
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: registered method (method) on: C
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: completed processing for (C) - metadata: {'name': 'c', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {'method': <function test_nested_resource_integration.<locals>.NestedAPI.A.B.C.method at 0x102940cc0>}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: C
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'c', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {'method': <function test_nested_resource_integration.<locals>.NestedAPI.A.B.C.method at 0x102940cc0>}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: completed processing for (C) - final metadata: {'name': 'c', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {'method': <function test_nested_resource_integration.<locals>.NestedAPI.A.B.C.method at 0x102940cc0>}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: completed creation of (C) - metadata: {'name': 'c', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {'method': <function test_nested_resource_integration.<locals>.NestedAPI.A.B.C.method at 0x102940cc0>}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | resource: converted (C) to declarative resource
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: creating class (B)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: set resource name (b) for: B
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (B)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (B)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (B)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (B)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (B)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (B)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (B)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (B)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (B)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (B)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (B)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (B)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (B)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: processing attributes for (B)
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: starting attribute processing for (B)
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'b', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: name already set to (b) for: B
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: B
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: starting attribute processing for (B)
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: found class (C) on (B)
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: class (C) has metadata: {'name': 'c', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {'method': <function test_nested_resource_integration.<locals>.NestedAPI.A.B.C.method at 0x102940cc0>}, 'path': 'c', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: registered component (c) on: B
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: completed processing for (B) - metadata: {'name': 'b', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {'c': <class 'ClientFactory.tests.integration.declarative.test_integration.C'>}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: B
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'b', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {'c': <class 'ClientFactory.tests.integration.declarative.test_integration.C'>}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: completed processing for (B) - final metadata: {'name': 'b', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {'c': <class 'ClientFactory.tests.integration.declarative.test_integration.C'>}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: completed creation of (B) - metadata: {'name': 'b', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {'c': <class 'ClientFactory.tests.integration.declarative.test_integration.C'>}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | resource: converted (B) to declarative resource
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: creating class (A)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: set resource name (a) for: A
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeResource) to (A)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeResource) to (A)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeResource) to (A)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeResource) to (A)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeResource) to (A)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeResource) to (A)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeResource) to (A)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeResource) to (A)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeResource) to (A)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (path) from (DeclarativeResource) to (A)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getfullpath) from (DeclarativeResource) to (A)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getmethods) from (DeclarativeResource) to (A)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getnestedresources) from (DeclarativeResource) to (A)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: processing attributes for (A)
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: starting attribute processing for (A)
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: current metadata before processing: {'name': 'a', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: name already set to (a) for: A
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: A
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: starting attribute processing for (A)
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: found class (B) on (A)
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: class (B) has metadata: {'name': 'b', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {'c': <class 'ClientFactory.tests.integration.declarative.test_integration.C'>}, 'methods': {}, 'path': 'b', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: registered component (b) on: A
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: completed processing for (A) - metadata: {'name': 'a', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {'b': <class 'ClientFactory.tests.integration.declarative.test_integration.B'>}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: A
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: metadata after super(): {'name': 'a', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {'b': <class 'ClientFactory.tests.integration.declarative.test_integration.B'>}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeResource: completed processing for (A) - final metadata: {'name': 'a', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {'b': <class 'ClientFactory.tests.integration.declarative.test_integration.B'>}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: completed creation of (A) - metadata: {'name': 'a', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {'b': <class 'ClientFactory.tests.integration.declarative.test_integration.B'>}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | resource: converted (A) to declarative resource
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: creating class (NestedAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copying metadata from base (DeclarativeClient) to (NestedAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getmetadata) from (DeclarativeClient) to (NestedAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (setmetadata) from (DeclarativeClient) to (NestedAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (hasmetadata) from (DeclarativeClient) to (NestedAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (updatemetdata) from (DeclarativeClient) to (NestedAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getallmetadata) from (DeclarativeClient) to (NestedAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (findmetadata) from (DeclarativeClient) to (NestedAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (components) from (DeclarativeClient) to (NestedAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (methods) from (DeclarativeClient) to (NestedAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (baseurl) from (DeclarativeClient) to (NestedAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getresources) from (DeclarativeClient) to (NestedAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (getbaseurl) from (DeclarativeClient) to (NestedAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: copied (resources) from (DeclarativeClient) to (NestedAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: processing attributes for (NestedAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: starting attribute processing for (NestedAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: found class (A) on (NestedAPI)
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: class (A) has metadata: {'name': 'a', 'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {'b': <class 'ClientFactory.tests.integration.declarative.test_integration.B'>}, 'methods': {}, 'path': '/a', 'getfullpath': <classmethod(<function DeclarativeResource.getfullpath at 0x10289ce00>)>, 'getmethods': <classmethod(<function DeclarativeResource.getmethods at 0x10289cea0>)>, 'getnestedresources': <classmethod(<function DeclarativeResource.getnestedresources at 0x10289cf40>)>}
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: registered component (a) on: NestedAPI
2025-03-24 19:42:01 | DEBUG | DeclarativeContainer: completed processing for (NestedAPI) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {'a': <class 'ClientFactory.tests.integration.declarative.test_integration.A'>}, 'methods': {}, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10289d300>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10289d3a0>)>, 'resources': {}}
2025-03-24 19:42:01 | DEBUG | DeclarativeClient: found resource (a) on: NestedAPI
2025-03-24 19:42:01 | DEBUG | DeclarativeMeta: completed creation of (NestedAPI) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289c220>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289c2c0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289c360>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289c400>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289c4a0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289c540>)>, 'components': {'a': <class 'ClientFactory.tests.integration.declarative.test_integration.A'>}, 'methods': {}, 'baseurl': '', 'getresources': <classmethod(<function DeclarativeClient.getresources at 0x10289d300>)>, 'getbaseurl': <classmethod(<function DeclarativeClient.getbaseurl at 0x10289d3a0>)>, 'resources': {'a': <class 'ClientFactory.tests.integration.declarative.test_integration.A'>}}
2025-03-24 19:42:01 | DEBUG | client: converted (NestedAPI) to declarative client
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'normal_attr': 'value', 'number_attr': 42, 'list_attr': [1, 2, 3], 'dict_attr': {'key': 'value'}, 'prop': <property object at 0x10680ee80>}
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'parent_attr': 'parent', 'shared_attr': 'parent_value'}
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'parent_attr': 'parent', 'shared_attr': 'child_value', 'child_attr': 'child'}
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: creating class (Nested)
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: completed creation of (Nested) - metadata: {'nested_attr': 'nested'}
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106720900>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067209a0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106720a40>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106720ae0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106720b80>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106720c20>)>, 'container_attr': 'container'}
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'config': test_dataclass_handling.<locals>.Config(name='test', value=42)}
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: creating class (ParentNested)
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: completed creation of (ParentNested) - metadata: {'parent_nested_attr': 'parent'}
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: creating class (ParentContainer)
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: completed creation of (ParentContainer) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106720900>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067209a0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106720a40>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106720ae0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106720b80>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106720c20>)>}
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: creating class (ChildNested)
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: completed creation of (ChildNested) - metadata: {'child_nested_attr': 'child'}
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: creating class (ChildContainer)
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: completed creation of (ChildContainer) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106720900>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067209a0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106720a40>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106720ae0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106720b80>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106720c20>)>}
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: creating class (TestContainer)
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:06:13 | DEBUG | DeclarativeMeta: completed creation of (TestContainer) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106720900>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067209a0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106720a40>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106720ae0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106720b80>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106720c20>)>}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing base class (DeclarativeComponent) for (TestComponent)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: base (DeclarativeComponent) has metadata: {}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing attributes for (TestComponent)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing attribute (normal_attr) with value (value) for (TestComponent)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing attribute (number_attr) with value (42) for (TestComponent)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing attribute (list_attr) with value ([1, 2, 3]) for (TestComponent)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing attribute (dict_attr) with value ({'key': 'value'}) for (TestComponent)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing attribute (prop) with value (<property object at 0x1063a1a80>) for (TestComponent)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestComponent)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestComponent)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'normal_attr': 'value', 'number_attr': 42, 'list_attr': [1, 2, 3], 'dict_attr': {'key': 'value'}, 'prop': <property object at 0x1063a1a80>}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing base class (DeclarativeComponent) for (Parent)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: base (DeclarativeComponent) has metadata: {}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing attribute (parent_attr) with value (parent) for (Parent)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing attribute (shared_attr) with value (parent_value) for (Parent)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: calling _processclassattributes for (Parent)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: _processclassattributes completed for (Parent)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'parent_attr': 'parent', 'shared_attr': 'parent_value'}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing base class (Parent) for (Child)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: base (Parent) has metadata: {'parent_attr': 'parent', 'shared_attr': 'parent_value'}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (parent_attr) from (Parent) to (Child) - cancopy: True
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (shared_attr) from (Parent) to (Child) - cancopy: True
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing attribute (child_attr) with value (child) for (Child)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing attribute (shared_attr) with value (child_value) for (Child)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: calling _processclassattributes for (Child)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: _processclassattributes completed for (Child)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'parent_attr': 'parent', 'shared_attr': 'child_value', 'child_attr': 'child'}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: creating class (Nested)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing base class (DeclarativeComponent) for (Nested)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: base (DeclarativeComponent) has metadata: {}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing attributes for (Nested)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing attribute (nested_attr) with value (nested) for (Nested)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: calling _processclassattributes for (Nested)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: _processclassattributes completed for (Nested)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: completed creation of (Nested) - metadata: {'nested_attr': 'nested'}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing base class (DeclarativeContainer) for (Container)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: base (DeclarativeContainer) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10630b4c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10630b560>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10630b600>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10630b6a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10630b740>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10630b7e0>)>, 'methods': {}, 'components': {}}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (getmetadata) from (DeclarativeContainer) to (Container) - cancopy: False
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (setmetadata) from (DeclarativeContainer) to (Container) - cancopy: False
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (DeclarativeContainer) to (Container) - cancopy: False
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (DeclarativeContainer) to (Container) - cancopy: False
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (DeclarativeContainer) to (Container) - cancopy: False
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (findmetadata) from (DeclarativeContainer) to (Container) - cancopy: False
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (methods) from (DeclarativeContainer) to (Container) - cancopy: True
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (components) from (DeclarativeContainer) to (Container) - cancopy: True
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing attribute (container_attr) with value (container) for (Container)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: calling _processclassattributes for (Container)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (Container)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (Container)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: examining attribute (container_attr) on (Container)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: examining attribute (method) on (Container)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: found callable (method) on: Container
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: registered method (method) on: Container
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: examining attribute (Nested) on (Container)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: found class (Nested) on (Container)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: class (Nested) has metadata: {'nested_attr': 'nested'}
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: registered component (nested) on: Container
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (Container)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (Container)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (Container)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10630b4c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10630b560>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10630b600>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10630b6a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10630b740>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10630b7e0>)>, 'methods': {'method': <function test_container_processing.<locals>.Container.method at 0x1063c62a0>}, 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_class_attribution.test_container_processing.<locals>.Container.Nested'>}, 'container_attr': 'container'}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: _processclassattributes completed for (Container)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10630b4c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10630b560>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10630b600>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10630b6a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10630b740>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10630b7e0>)>, 'methods': {'method': <function test_container_processing.<locals>.Container.method at 0x1063c62a0>}, 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_class_attribution.test_container_processing.<locals>.Container.Nested'>}, 'container_attr': 'container'}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing base class (DeclarativeComponent) for (TestComponent)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: base (DeclarativeComponent) has metadata: {}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing attributes for (TestComponent)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing attribute (config) with value (test_dataclass_handling.<locals>.Config(name='test', value=42)) for (TestComponent)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestComponent)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestComponent)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'config': test_dataclass_handling.<locals>.Config(name='test', value=42)}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: creating class (ParentNested)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing base class (DeclarativeComponent) for (ParentNested)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: base (DeclarativeComponent) has metadata: {}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing attributes for (ParentNested)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing attribute (parent_nested_attr) with value (parent) for (ParentNested)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: calling _processclassattributes for (ParentNested)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: _processclassattributes completed for (ParentNested)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: completed creation of (ParentNested) - metadata: {'parent_nested_attr': 'parent'}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: creating class (ParentContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing base class (DeclarativeContainer) for (ParentContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: base (DeclarativeContainer) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10630b4c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10630b560>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10630b600>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10630b6a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10630b740>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10630b7e0>)>, 'methods': {}, 'components': {}}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (getmetadata) from (DeclarativeContainer) to (ParentContainer) - cancopy: False
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (setmetadata) from (DeclarativeContainer) to (ParentContainer) - cancopy: False
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (DeclarativeContainer) to (ParentContainer) - cancopy: False
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (DeclarativeContainer) to (ParentContainer) - cancopy: False
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (DeclarativeContainer) to (ParentContainer) - cancopy: False
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (findmetadata) from (DeclarativeContainer) to (ParentContainer) - cancopy: False
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (methods) from (DeclarativeContainer) to (ParentContainer) - cancopy: True
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (components) from (DeclarativeContainer) to (ParentContainer) - cancopy: True
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing attributes for (ParentContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: calling _processclassattributes for (ParentContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: starting attribute processing for (ParentContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (ParentContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (ParentContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: examining attribute (ParentNested) on (ParentContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: found class (ParentNested) on (ParentContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: class (ParentNested) has metadata: {'parent_nested_attr': 'parent'}
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: registered component (parentnested) on: ParentContainer
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (ParentContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (ParentContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (ParentContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: completed processing for (ParentContainer) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10630b4c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10630b560>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10630b600>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10630b6a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10630b740>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10630b7e0>)>, 'methods': {}, 'components': {'parentnested': <class 'ClientFactory.tests.unit.declarative.test_class_attribution.test_nested_container_inheritance.<locals>.ParentContainer.ParentNested'>}}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: _processclassattributes completed for (ParentContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: completed creation of (ParentContainer) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10630b4c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10630b560>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10630b600>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10630b6a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10630b740>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10630b7e0>)>, 'methods': {}, 'components': {'parentnested': <class 'ClientFactory.tests.unit.declarative.test_class_attribution.test_nested_container_inheritance.<locals>.ParentContainer.ParentNested'>}}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: creating class (ChildNested)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing base class (DeclarativeComponent) for (ChildNested)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: base (DeclarativeComponent) has metadata: {}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing attributes for (ChildNested)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing attribute (child_nested_attr) with value (child) for (ChildNested)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: calling _processclassattributes for (ChildNested)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: _processclassattributes completed for (ChildNested)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: completed creation of (ChildNested) - metadata: {'child_nested_attr': 'child'}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: creating class (ChildContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing base class (ParentContainer) for (ChildContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: base (ParentContainer) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10630b4c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10630b560>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10630b600>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10630b6a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10630b740>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10630b7e0>)>, 'methods': {}, 'components': {'parentnested': <class 'ClientFactory.tests.unit.declarative.test_class_attribution.test_nested_container_inheritance.<locals>.ParentContainer.ParentNested'>}}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (getmetadata) from (ParentContainer) to (ChildContainer) - cancopy: False
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (setmetadata) from (ParentContainer) to (ChildContainer) - cancopy: False
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (ParentContainer) to (ChildContainer) - cancopy: False
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (ParentContainer) to (ChildContainer) - cancopy: False
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (ParentContainer) to (ChildContainer) - cancopy: False
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (findmetadata) from (ParentContainer) to (ChildContainer) - cancopy: False
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (methods) from (ParentContainer) to (ChildContainer) - cancopy: True
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (components) from (ParentContainer) to (ChildContainer) - cancopy: True
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing attributes for (ChildContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: calling _processclassattributes for (ChildContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (ChildContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (ChildContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: examining attribute (ChildNested) on (ChildContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: found class (ChildNested) on (ChildContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: class (ChildNested) has metadata: {'child_nested_attr': 'child'}
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: registered component (childnested) on: ChildContainer
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (ChildContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (ChildContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (ChildContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: completed processing for (ChildContainer) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10630b4c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10630b560>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10630b600>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10630b6a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10630b740>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10630b7e0>)>, 'methods': {}, 'components': {'parentnested': <class 'ClientFactory.tests.unit.declarative.test_class_attribution.test_nested_container_inheritance.<locals>.ParentContainer.ParentNested'>, 'childnested': <class 'ClientFactory.tests.unit.declarative.test_class_attribution.test_nested_container_inheritance.<locals>.ChildContainer.ChildNested'>}}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: _processclassattributes completed for (ChildContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: completed creation of (ChildContainer) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10630b4c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10630b560>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10630b600>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10630b6a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10630b740>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10630b7e0>)>, 'methods': {}, 'components': {'parentnested': <class 'ClientFactory.tests.unit.declarative.test_class_attribution.test_nested_container_inheritance.<locals>.ParentContainer.ParentNested'>, 'childnested': <class 'ClientFactory.tests.unit.declarative.test_class_attribution.test_nested_container_inheritance.<locals>.ChildContainer.ChildNested'>}}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: creating class (TestContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing base class (DeclarativeContainer) for (TestContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: base (DeclarativeContainer) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10630b4c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10630b560>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10630b600>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10630b6a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10630b740>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10630b7e0>)>, 'methods': {}, 'components': {}}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (getmetadata) from (DeclarativeContainer) to (TestContainer) - cancopy: False
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (setmetadata) from (DeclarativeContainer) to (TestContainer) - cancopy: False
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (DeclarativeContainer) to (TestContainer) - cancopy: False
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (DeclarativeContainer) to (TestContainer) - cancopy: False
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (DeclarativeContainer) to (TestContainer) - cancopy: False
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (findmetadata) from (DeclarativeContainer) to (TestContainer) - cancopy: False
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (methods) from (DeclarativeContainer) to (TestContainer) - cancopy: True
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: copying (components) from (DeclarativeContainer) to (TestContainer) - cancopy: True
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: processing attributes for (TestContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: starting attribute processing for (TestContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (TestContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (TestContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: examining attribute (test_method) on (TestContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: found callable (test_method) on: TestContainer
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: registered method (test_method) on: TestContainer
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (TestContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (TestContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (TestContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 11:09:47 | DEBUG | DeclarativeContainer: completed processing for (TestContainer) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10630b4c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10630b560>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10630b600>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10630b6a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10630b740>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10630b7e0>)>, 'methods': {'test_method': <function test_declarative_method_metadata.<locals>.TestContainer.test_method at 0x1063c6840>}, 'components': {}}
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestContainer)
2025-03-25 11:09:47 | DEBUG | DeclarativeMeta: completed creation of (TestContainer) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10630b4c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10630b560>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10630b600>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10630b6a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10630b740>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10630b7e0>)>, 'methods': {'test_method': <function test_declarative_method_metadata.<locals>.TestContainer.test_method at 0x1063c6840>}, 'components': {}}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing base class (DeclarativeComponent) for (TestComponent)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: base (DeclarativeComponent) has metadata: {}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing attributes for (TestComponent)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing attribute (normal_attr) with value (value) for (TestComponent)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing attribute (number_attr) with value (42) for (TestComponent)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing attribute (list_attr) with value ([1, 2, 3]) for (TestComponent)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing attribute (dict_attr) with value ({'key': 'value'}) for (TestComponent)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestComponent)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestComponent)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'normal_attr': 'value', 'number_attr': 42, 'list_attr': [1, 2, 3], 'dict_attr': {'key': 'value'}}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: creating class (Parent)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing base class (DeclarativeComponent) for (Parent)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: base (DeclarativeComponent) has metadata: {}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing attributes for (Parent)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing attribute (parent_attr) with value (parent) for (Parent)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing attribute (shared_attr) with value (parent_value) for (Parent)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: calling _processclassattributes for (Parent)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: _processclassattributes completed for (Parent)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: completed creation of (Parent) - metadata: {'parent_attr': 'parent', 'shared_attr': 'parent_value'}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: creating class (Child)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing base class (Parent) for (Child)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: base (Parent) has metadata: {'parent_attr': 'parent', 'shared_attr': 'parent_value'}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (parent_attr) from (Parent) to (Child) - cancopy: True
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (shared_attr) from (Parent) to (Child) - cancopy: True
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing attributes for (Child)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing attribute (child_attr) with value (child) for (Child)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing attribute (shared_attr) with value (child_value) for (Child)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: calling _processclassattributes for (Child)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: _processclassattributes completed for (Child)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: completed creation of (Child) - metadata: {'parent_attr': 'parent', 'shared_attr': 'child_value', 'child_attr': 'child'}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: creating class (Nested)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing base class (DeclarativeComponent) for (Nested)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: base (DeclarativeComponent) has metadata: {}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing attributes for (Nested)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing attribute (nested_attr) with value (nested) for (Nested)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: calling _processclassattributes for (Nested)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: _processclassattributes completed for (Nested)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: completed creation of (Nested) - metadata: {'nested_attr': 'nested'}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: creating class (Container)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing base class (DeclarativeContainer) for (Container)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: base (DeclarativeContainer) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1049ab4c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1049ab560>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1049ab600>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1049ab6a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1049ab740>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1049ab7e0>)>, 'components': {}, 'methods': {}}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (getmetadata) from (DeclarativeContainer) to (Container) - cancopy: False
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (setmetadata) from (DeclarativeContainer) to (Container) - cancopy: False
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (DeclarativeContainer) to (Container) - cancopy: False
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (DeclarativeContainer) to (Container) - cancopy: False
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (DeclarativeContainer) to (Container) - cancopy: False
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (findmetadata) from (DeclarativeContainer) to (Container) - cancopy: False
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (components) from (DeclarativeContainer) to (Container) - cancopy: True
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (methods) from (DeclarativeContainer) to (Container) - cancopy: True
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing attributes for (Container)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing attribute (container_attr) with value (container) for (Container)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: calling _processclassattributes for (Container)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: starting attribute processing for (Container)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (Container)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (Container)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: examining attribute (container_attr) on (Container)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: examining attribute (method) on (Container)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: found callable (method) on: Container
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: registered method (method) on: Container
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: examining attribute (Nested) on (Container)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: found class (Nested) on (Container)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: class (Nested) has metadata: {'nested_attr': 'nested'}
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: registered component (nested) on: Container
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (Container)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (Container)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (Container)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: completed processing for (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1049ab4c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1049ab560>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1049ab600>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1049ab6a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1049ab740>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1049ab7e0>)>, 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_class_attribution.test_container_processing.<locals>.Container.Nested'>}, 'methods': {'method': <function test_container_processing.<locals>.Container.method at 0x104a27d80>}, 'container_attr': 'container'}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: _processclassattributes completed for (Container)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: completed creation of (Container) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1049ab4c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1049ab560>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1049ab600>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1049ab6a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1049ab740>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1049ab7e0>)>, 'components': {'nested': <class 'ClientFactory.tests.unit.declarative.test_class_attribution.test_container_processing.<locals>.Container.Nested'>}, 'methods': {'method': <function test_container_processing.<locals>.Container.method at 0x104a27d80>}, 'container_attr': 'container'}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: creating class (TestComponent)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing base class (DeclarativeComponent) for (TestComponent)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: base (DeclarativeComponent) has metadata: {}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing attributes for (TestComponent)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing attribute (config) with value (test_dataclass_handling.<locals>.Config(name='test', value=42)) for (TestComponent)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestComponent)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestComponent)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: completed creation of (TestComponent) - metadata: {'config': test_dataclass_handling.<locals>.Config(name='test', value=42)}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: creating class (ParentNested)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing base class (DeclarativeComponent) for (ParentNested)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: base (DeclarativeComponent) has metadata: {}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing attributes for (ParentNested)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing attribute (parent_nested_attr) with value (parent) for (ParentNested)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: calling _processclassattributes for (ParentNested)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: _processclassattributes completed for (ParentNested)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: completed creation of (ParentNested) - metadata: {'parent_nested_attr': 'parent'}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: creating class (ParentContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing base class (DeclarativeContainer) for (ParentContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: base (DeclarativeContainer) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1049ab4c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1049ab560>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1049ab600>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1049ab6a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1049ab740>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1049ab7e0>)>, 'components': {}, 'methods': {}}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (getmetadata) from (DeclarativeContainer) to (ParentContainer) - cancopy: False
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (setmetadata) from (DeclarativeContainer) to (ParentContainer) - cancopy: False
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (DeclarativeContainer) to (ParentContainer) - cancopy: False
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (DeclarativeContainer) to (ParentContainer) - cancopy: False
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (DeclarativeContainer) to (ParentContainer) - cancopy: False
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (findmetadata) from (DeclarativeContainer) to (ParentContainer) - cancopy: False
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (components) from (DeclarativeContainer) to (ParentContainer) - cancopy: True
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (methods) from (DeclarativeContainer) to (ParentContainer) - cancopy: True
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing attributes for (ParentContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: calling _processclassattributes for (ParentContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: starting attribute processing for (ParentContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (ParentContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (ParentContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: examining attribute (ParentNested) on (ParentContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: found class (ParentNested) on (ParentContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: class (ParentNested) has metadata: {'parent_nested_attr': 'parent'}
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: registered component (parentnested) on: ParentContainer
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (ParentContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (ParentContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (ParentContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: completed processing for (ParentContainer) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1049ab4c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1049ab560>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1049ab600>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1049ab6a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1049ab740>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1049ab7e0>)>, 'components': {'parentnested': <class 'ClientFactory.tests.unit.declarative.test_class_attribution.test_nested_container_inheritance.<locals>.ParentContainer.ParentNested'>}, 'methods': {}}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: _processclassattributes completed for (ParentContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: completed creation of (ParentContainer) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1049ab4c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1049ab560>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1049ab600>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1049ab6a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1049ab740>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1049ab7e0>)>, 'components': {'parentnested': <class 'ClientFactory.tests.unit.declarative.test_class_attribution.test_nested_container_inheritance.<locals>.ParentContainer.ParentNested'>}, 'methods': {}}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: creating class (ChildNested)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing base class (DeclarativeComponent) for (ChildNested)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: base (DeclarativeComponent) has metadata: {}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing attributes for (ChildNested)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing attribute (child_nested_attr) with value (child) for (ChildNested)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: calling _processclassattributes for (ChildNested)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: _processclassattributes completed for (ChildNested)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: completed creation of (ChildNested) - metadata: {'child_nested_attr': 'child'}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: creating class (ChildContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing base class (ParentContainer) for (ChildContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: base (ParentContainer) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1049ab4c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1049ab560>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1049ab600>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1049ab6a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1049ab740>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1049ab7e0>)>, 'components': {'parentnested': <class 'ClientFactory.tests.unit.declarative.test_class_attribution.test_nested_container_inheritance.<locals>.ParentContainer.ParentNested'>}, 'methods': {}}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (getmetadata) from (ParentContainer) to (ChildContainer) - cancopy: False
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (setmetadata) from (ParentContainer) to (ChildContainer) - cancopy: False
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (ParentContainer) to (ChildContainer) - cancopy: False
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (ParentContainer) to (ChildContainer) - cancopy: False
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (ParentContainer) to (ChildContainer) - cancopy: False
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (findmetadata) from (ParentContainer) to (ChildContainer) - cancopy: False
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (components) from (ParentContainer) to (ChildContainer) - cancopy: True
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (methods) from (ParentContainer) to (ChildContainer) - cancopy: True
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing attributes for (ChildContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: calling _processclassattributes for (ChildContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: starting attribute processing for (ChildContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (ChildContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (ChildContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: examining attribute (ChildNested) on (ChildContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: found class (ChildNested) on (ChildContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: class (ChildNested) has metadata: {'child_nested_attr': 'child'}
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: registered component (childnested) on: ChildContainer
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (ChildContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (ChildContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (ChildContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: completed processing for (ChildContainer) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1049ab4c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1049ab560>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1049ab600>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1049ab6a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1049ab740>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1049ab7e0>)>, 'components': {'parentnested': <class 'ClientFactory.tests.unit.declarative.test_class_attribution.test_nested_container_inheritance.<locals>.ParentContainer.ParentNested'>, 'childnested': <class 'ClientFactory.tests.unit.declarative.test_class_attribution.test_nested_container_inheritance.<locals>.ChildContainer.ChildNested'>}, 'methods': {}}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: _processclassattributes completed for (ChildContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: completed creation of (ChildContainer) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1049ab4c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1049ab560>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1049ab600>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1049ab6a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1049ab740>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1049ab7e0>)>, 'components': {'parentnested': <class 'ClientFactory.tests.unit.declarative.test_class_attribution.test_nested_container_inheritance.<locals>.ParentContainer.ParentNested'>, 'childnested': <class 'ClientFactory.tests.unit.declarative.test_class_attribution.test_nested_container_inheritance.<locals>.ChildContainer.ChildNested'>}, 'methods': {}}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: creating class (TestContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing base class (DeclarativeContainer) for (TestContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: base (DeclarativeContainer) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1049ab4c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1049ab560>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1049ab600>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1049ab6a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1049ab740>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1049ab7e0>)>, 'components': {}, 'methods': {}}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (getmetadata) from (DeclarativeContainer) to (TestContainer) - cancopy: False
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (setmetadata) from (DeclarativeContainer) to (TestContainer) - cancopy: False
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (DeclarativeContainer) to (TestContainer) - cancopy: False
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (DeclarativeContainer) to (TestContainer) - cancopy: False
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (DeclarativeContainer) to (TestContainer) - cancopy: False
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (findmetadata) from (DeclarativeContainer) to (TestContainer) - cancopy: False
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (components) from (DeclarativeContainer) to (TestContainer) - cancopy: True
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: copying (methods) from (DeclarativeContainer) to (TestContainer) - cancopy: True
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: processing attributes for (TestContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: starting attribute processing for (TestContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (TestContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (TestContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: examining attribute (test_method) on (TestContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: found callable (test_method) on: TestContainer
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: registered method (test_method) on: TestContainer
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (TestContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (TestContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (TestContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 11:13:14 | DEBUG | DeclarativeContainer: completed processing for (TestContainer) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1049ab4c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1049ab560>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1049ab600>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1049ab6a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1049ab740>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1049ab7e0>)>, 'components': {}, 'methods': {'test_method': <function test_declarative_method_metadata.<locals>.TestContainer.test_method at 0x104a27600>}}
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestContainer)
2025-03-25 11:13:14 | DEBUG | DeclarativeMeta: completed creation of (TestContainer) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1049ab4c0>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1049ab560>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1049ab600>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1049ab6a0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1049ab740>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1049ab7e0>)>, 'components': {}, 'methods': {'test_method': <function test_declarative_method_metadata.<locals>.TestContainer.test_method at 0x104a27600>}}
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: creating class (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: processing base class (ManagedResource) for (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: base (ManagedResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'operations': {}, 'name': 'managedresource'}
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getmetadata) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (setmetadata) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (findmetadata) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (components) from (ManagedResource) to (CustomManaged) - cancopy: True
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (methods) from (ManagedResource) to (CustomManaged) - cancopy: True
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (path) from (ManagedResource) to (CustomManaged) - cancopy: True
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getfullpath) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getmethods) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getnestedresources) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (operations) from (ManagedResource) to (CustomManaged) - cancopy: True
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: processing attributes for (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: processing attribute (operations) with value ({'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=<clientfactory.core.payload.Payload object at 0x106858ad0>, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None), 'get': Operation(type=<OperationType.READ: 2>, method=<RequestMethod.GET: 'GET'>, path='{id}', payload=None, preprocess=None, postprocess=None), 'update': Operation(type=<OperationType.UPDATE: 3>, method=<RequestMethod.PUT: 'PUT'>, path='{id}', payload=None, preprocess=None, postprocess=None), 'delete': Operation(type=<OperationType.DELETE: 4>, method=<RequestMethod.DELETE: 'DELETE'>, path='{id}', payload=None, preprocess=None, postprocess=None)}) for (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: calling _processclassattributes for (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: starting attribute processing for (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: current metadata before processing: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=<clientfactory.core.payload.Payload object at 0x106858ad0>, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None), 'get': Operation(type=<OperationType.READ: 2>, method=<RequestMethod.GET: 'GET'>, path='{id}', payload=None, preprocess=None, postprocess=None), 'update': Operation(type=<OperationType.UPDATE: 3>, method=<RequestMethod.PUT: 'PUT'>, path='{id}', payload=None, preprocess=None, postprocess=None), 'delete': Operation(type=<OperationType.DELETE: 4>, method=<RequestMethod.DELETE: 'DELETE'>, path='{id}', payload=None, preprocess=None, postprocess=None)}}
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: set name to (custommanaged) for: CustomManaged
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: CustomManaged
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: starting attribute processing for (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (operations) on (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: completed processing for (CustomManaged) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=<clientfactory.core.payload.Payload object at 0x106858ad0>, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None), 'get': Operation(type=<OperationType.READ: 2>, method=<RequestMethod.GET: 'GET'>, path='{id}', payload=None, preprocess=None, postprocess=None), 'update': Operation(type=<OperationType.UPDATE: 3>, method=<RequestMethod.PUT: 'PUT'>, path='{id}', payload=None, preprocess=None, postprocess=None), 'delete': Operation(type=<OperationType.DELETE: 4>, method=<RequestMethod.DELETE: 'DELETE'>, path='{id}', payload=None, preprocess=None, postprocess=None)}, 'name': 'custommanaged'}
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: CustomManaged
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: metadata after super(): {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=<clientfactory.core.payload.Payload object at 0x106858ad0>, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None), 'get': Operation(type=<OperationType.READ: 2>, method=<RequestMethod.GET: 'GET'>, path='{id}', payload=None, preprocess=None, postprocess=None), 'update': Operation(type=<OperationType.UPDATE: 3>, method=<RequestMethod.PUT: 'PUT'>, path='{id}', payload=None, preprocess=None, postprocess=None), 'delete': Operation(type=<OperationType.DELETE: 4>, method=<RequestMethod.DELETE: 'DELETE'>, path='{id}', payload=None, preprocess=None, postprocess=None)}, 'name': 'custommanaged'}
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: completed processing for (CustomManaged) - final metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=<clientfactory.core.payload.Payload object at 0x106858ad0>, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None), 'get': Operation(type=<OperationType.READ: 2>, method=<RequestMethod.GET: 'GET'>, path='{id}', payload=None, preprocess=None, postprocess=None), 'update': Operation(type=<OperationType.UPDATE: 3>, method=<RequestMethod.PUT: 'PUT'>, path='{id}', payload=None, preprocess=None, postprocess=None), 'delete': Operation(type=<OperationType.DELETE: 4>, method=<RequestMethod.DELETE: 'DELETE'>, path='{id}', payload=None, preprocess=None, postprocess=None)}, 'name': 'custommanaged'}
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: _processclassattributes completed for (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: completed creation of (CustomManaged) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=<clientfactory.core.payload.Payload object at 0x106858ad0>, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None), 'get': Operation(type=<OperationType.READ: 2>, method=<RequestMethod.GET: 'GET'>, path='{id}', payload=None, preprocess=None, postprocess=None), 'update': Operation(type=<OperationType.UPDATE: 3>, method=<RequestMethod.PUT: 'PUT'>, path='{id}', payload=None, preprocess=None, postprocess=None), 'delete': Operation(type=<OperationType.DELETE: 4>, method=<RequestMethod.DELETE: 'DELETE'>, path='{id}', payload=None, preprocess=None, postprocess=None)}, 'name': 'custommanaged'}
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: creating class (Users)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: processing base class (object) for (Users)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: processing base class (Resource) for (Users)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: base (Resource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'name': 'resource', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>}
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Resource) to (Users) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Resource) to (Users) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Resource) to (Users) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Resource) to (Users) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Resource) to (Users) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Resource) to (Users) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (components) from (Resource) to (Users) - cancopy: True
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (methods) from (Resource) to (Users) - cancopy: True
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (path) from (Resource) to (Users) - cancopy: True
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getfullpath) from (Resource) to (Users) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getmethods) from (Resource) to (Users) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getnestedresources) from (Resource) to (Users) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: processing attributes for (Users)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: processing attribute (operations) with value ({'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=None, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None)}) for (Users)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: set resource name (users) for: Users
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: calling _processclassattributes for (Users)
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: starting attribute processing for (Users)
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: current metadata before processing: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=None, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None)}, 'name': 'users'}
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: name already set to (users) for: Users
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Users
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: starting attribute processing for (Users)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (Users)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (Users)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (operations) on (Users)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (Users)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__dict__) on (Users)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__dict__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__weakref__) on (Users)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__weakref__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (Users)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (Users)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: completed processing for (Users) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=None, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None)}, 'name': 'users'}
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Users
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: metadata after super(): {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=None, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None)}, 'name': 'users'}
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: completed processing for (Users) - final metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=None, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None)}, 'name': 'users'}
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: _processclassattributes completed for (Users)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: completed creation of (Users) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=None, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None)}, 'name': 'users'}
2025-03-25 12:37:51 | DEBUG | resource: created resource (Users) with path: users
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: creating class (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: processing base class (ManagedResource) for (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: base (ManagedResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'operations': {}, 'name': 'managedresource'}
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getmetadata) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (setmetadata) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (findmetadata) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (components) from (ManagedResource) to (CustomManaged) - cancopy: True
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (methods) from (ManagedResource) to (CustomManaged) - cancopy: True
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (path) from (ManagedResource) to (CustomManaged) - cancopy: True
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getfullpath) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getmethods) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getnestedresources) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (operations) from (ManagedResource) to (CustomManaged) - cancopy: True
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: processing attributes for (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: processing attribute (operations) with value ({'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=<clientfactory.core.payload.Payload object at 0x1067f39d0>, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None)}) for (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: calling _processclassattributes for (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: starting attribute processing for (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: current metadata before processing: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=<clientfactory.core.payload.Payload object at 0x1067f39d0>, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None)}}
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: set name to (custommanaged) for: CustomManaged
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: CustomManaged
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: starting attribute processing for (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (operations) on (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: completed processing for (CustomManaged) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=<clientfactory.core.payload.Payload object at 0x1067f39d0>, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None)}, 'name': 'custommanaged'}
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: CustomManaged
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: metadata after super(): {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=<clientfactory.core.payload.Payload object at 0x1067f39d0>, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None)}, 'name': 'custommanaged'}
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: completed processing for (CustomManaged) - final metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=<clientfactory.core.payload.Payload object at 0x1067f39d0>, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None)}, 'name': 'custommanaged'}
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: _processclassattributes completed for (CustomManaged)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: completed creation of (CustomManaged) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=<clientfactory.core.payload.Payload object at 0x1067f39d0>, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None)}, 'name': 'custommanaged'}
2025-03-25 12:37:51 | DEBUG | Initializing Session
2025-03-25 12:37:51 | DEBUG | Creating requests.Session
2025-03-25 12:37:51 | DEBUG | Setting session headers: {}
2025-03-25 12:37:51 | DEBUG | Setting session cookies: {}
2025-03-25 12:37:51 | DEBUG | Setting SSL verification: True
2025-03-25 12:37:51 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 12:37:51 | DEBUG | Initializing resource: users with path: users
2025-03-25 12:37:51 | DEBUG | Resource parent: None
2025-03-25 12:37:51 | DEBUG | Registering operation: create
2025-03-25 12:37:51 | DEBUG | Registering operation: list
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: creating class (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: processing base class (SearchResource) for (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: base (SearchResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None, 'name': 'searchresource'}
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getmetadata) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (setmetadata) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (findmetadata) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (components) from (SearchResource) to (CustomSearch) - cancopy: True
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (methods) from (SearchResource) to (CustomSearch) - cancopy: True
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (path) from (SearchResource) to (CustomSearch) - cancopy: True
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getfullpath) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getmethods) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getnestedresources) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (requestmethod) from (SearchResource) to (CustomSearch) - cancopy: True
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (payload) from (SearchResource) to (CustomSearch) - cancopy: True
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: processing attributes for (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: processing attribute (requestmethod) with value (RequestMethod.POST) for (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: processing attribute (payload) with value (<clientfactory.core.payload.Payload object at 0x1067f34d0>) for (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: calling _processclassattributes for (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: starting attribute processing for (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: current metadata before processing: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x1067f34d0>}
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: set name to (customsearch) for: CustomSearch
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: CustomSearch
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: starting attribute processing for (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (requestmethod) on (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (payload) on (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: completed processing for (CustomSearch) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x1067f34d0>, 'name': 'customsearch'}
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: CustomSearch
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: metadata after super(): {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x1067f34d0>, 'name': 'customsearch'}
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: completed processing for (CustomSearch) - final metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x1067f34d0>, 'name': 'customsearch'}
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: _processclassattributes completed for (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: completed creation of (CustomSearch) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x1067f34d0>, 'name': 'customsearch'}
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: creating class (Search)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: processing base class (object) for (Search)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: processing base class (Resource) for (Search)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: base (Resource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'name': 'resource', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>}
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Resource) to (Search) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Resource) to (Search) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Resource) to (Search) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Resource) to (Search) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Resource) to (Search) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Resource) to (Search) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (components) from (Resource) to (Search) - cancopy: True
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (methods) from (Resource) to (Search) - cancopy: True
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (path) from (Resource) to (Search) - cancopy: True
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getfullpath) from (Resource) to (Search) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getmethods) from (Resource) to (Search) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getnestedresources) from (Resource) to (Search) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: processing attributes for (Search)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: processing attribute (requestmethod) with value (RequestMethod.POST) for (Search)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: processing attribute (payload) with value (<clientfactory.core.payload.Payload object at 0x1067c35c0>) for (Search)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: set resource name (search) for: Search
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: calling _processclassattributes for (Search)
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: starting attribute processing for (Search)
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: current metadata before processing: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x1067c35c0>, 'name': 'search'}
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: name already set to (search) for: Search
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Search
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: starting attribute processing for (Search)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (Search)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (Search)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (requestmethod) on (Search)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (payload) on (Search)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (Search)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__dict__) on (Search)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__dict__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__weakref__) on (Search)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__weakref__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (Search)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (Search)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: completed processing for (Search) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x1067c35c0>, 'name': 'search'}
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Search
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: metadata after super(): {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x1067c35c0>, 'name': 'search'}
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: completed processing for (Search) - final metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x1067c35c0>, 'name': 'search'}
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: _processclassattributes completed for (Search)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: completed creation of (Search) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x1067c35c0>, 'name': 'search'}
2025-03-25 12:37:51 | DEBUG | resource: created resource (Search) with path: search
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: creating class (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: processing base class (SearchResource) for (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: base (SearchResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None, 'name': 'searchresource'}
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getmetadata) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (setmetadata) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (findmetadata) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (components) from (SearchResource) to (CustomSearch) - cancopy: True
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (methods) from (SearchResource) to (CustomSearch) - cancopy: True
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (path) from (SearchResource) to (CustomSearch) - cancopy: True
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getfullpath) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getmethods) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (getnestedresources) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (requestmethod) from (SearchResource) to (CustomSearch) - cancopy: True
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: copying (payload) from (SearchResource) to (CustomSearch) - cancopy: True
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: processing attributes for (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: processing attribute (requestmethod) with value (RequestMethod.POST) for (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: processing attribute (payload) with value (<clientfactory.core.payload.Payload object at 0x1067c3950>) for (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: calling _processclassattributes for (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: starting attribute processing for (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: current metadata before processing: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x1067c3950>}
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: set name to (customsearch) for: CustomSearch
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: CustomSearch
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: starting attribute processing for (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (requestmethod) on (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (payload) on (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 12:37:51 | DEBUG | DeclarativeContainer: completed processing for (CustomSearch) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x1067c3950>, 'name': 'customsearch'}
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: CustomSearch
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: metadata after super(): {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x1067c3950>, 'name': 'customsearch'}
2025-03-25 12:37:51 | DEBUG | DeclarativeResource: completed processing for (CustomSearch) - final metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x1067c3950>, 'name': 'customsearch'}
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: _processclassattributes completed for (CustomSearch)
2025-03-25 12:37:51 | DEBUG | DeclarativeMeta: completed creation of (CustomSearch) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067df380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067df420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067df4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067df560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067df600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067df6a0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x1068105e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106810680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106810720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x1067c3950>, 'name': 'customsearch'}
2025-03-25 12:37:51 | DEBUG | Initializing Session
2025-03-25 12:37:51 | DEBUG | Creating requests.Session
2025-03-25 12:37:51 | DEBUG | Setting session headers: {}
2025-03-25 12:37:51 | DEBUG | Setting session cookies: {}
2025-03-25 12:37:51 | DEBUG | Setting SSL verification: True
2025-03-25 12:37:51 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 12:37:51 | DEBUG | Initializing resource: search with path: search
2025-03-25 12:37:51 | DEBUG | Resource parent: None
2025-03-25 12:37:51 | DEBUG | Adding default search method
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: creating class (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: processing base class (ManagedResource) for (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: base (ManagedResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'operations': {}, 'name': 'managedresource'}
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getmetadata) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (setmetadata) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (findmetadata) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (methods) from (ManagedResource) to (CustomManaged) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (components) from (ManagedResource) to (CustomManaged) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (path) from (ManagedResource) to (CustomManaged) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getfullpath) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getmethods) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getnestedresources) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (operations) from (ManagedResource) to (CustomManaged) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: processing attributes for (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: processing attribute (operations) with value ({'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=<clientfactory.core.payload.Payload object at 0x102f24ad0>, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None), 'get': Operation(type=<OperationType.READ: 2>, method=<RequestMethod.GET: 'GET'>, path='{id}', payload=None, preprocess=None, postprocess=None), 'update': Operation(type=<OperationType.UPDATE: 3>, method=<RequestMethod.PUT: 'PUT'>, path='{id}', payload=None, preprocess=None, postprocess=None), 'delete': Operation(type=<OperationType.DELETE: 4>, method=<RequestMethod.DELETE: 'DELETE'>, path='{id}', payload=None, preprocess=None, postprocess=None)}) for (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: calling _processclassattributes for (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: starting attribute processing for (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: current metadata before processing: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=<clientfactory.core.payload.Payload object at 0x102f24ad0>, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None), 'get': Operation(type=<OperationType.READ: 2>, method=<RequestMethod.GET: 'GET'>, path='{id}', payload=None, preprocess=None, postprocess=None), 'update': Operation(type=<OperationType.UPDATE: 3>, method=<RequestMethod.PUT: 'PUT'>, path='{id}', payload=None, preprocess=None, postprocess=None), 'delete': Operation(type=<OperationType.DELETE: 4>, method=<RequestMethod.DELETE: 'DELETE'>, path='{id}', payload=None, preprocess=None, postprocess=None)}}
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: set name to (custommanaged) for: CustomManaged
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: CustomManaged
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: starting attribute processing for (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (operations) on (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: completed processing for (CustomManaged) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=<clientfactory.core.payload.Payload object at 0x102f24ad0>, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None), 'get': Operation(type=<OperationType.READ: 2>, method=<RequestMethod.GET: 'GET'>, path='{id}', payload=None, preprocess=None, postprocess=None), 'update': Operation(type=<OperationType.UPDATE: 3>, method=<RequestMethod.PUT: 'PUT'>, path='{id}', payload=None, preprocess=None, postprocess=None), 'delete': Operation(type=<OperationType.DELETE: 4>, method=<RequestMethod.DELETE: 'DELETE'>, path='{id}', payload=None, preprocess=None, postprocess=None)}, 'name': 'custommanaged'}
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: CustomManaged
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: metadata after super(): {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=<clientfactory.core.payload.Payload object at 0x102f24ad0>, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None), 'get': Operation(type=<OperationType.READ: 2>, method=<RequestMethod.GET: 'GET'>, path='{id}', payload=None, preprocess=None, postprocess=None), 'update': Operation(type=<OperationType.UPDATE: 3>, method=<RequestMethod.PUT: 'PUT'>, path='{id}', payload=None, preprocess=None, postprocess=None), 'delete': Operation(type=<OperationType.DELETE: 4>, method=<RequestMethod.DELETE: 'DELETE'>, path='{id}', payload=None, preprocess=None, postprocess=None)}, 'name': 'custommanaged'}
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: completed processing for (CustomManaged) - final metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=<clientfactory.core.payload.Payload object at 0x102f24ad0>, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None), 'get': Operation(type=<OperationType.READ: 2>, method=<RequestMethod.GET: 'GET'>, path='{id}', payload=None, preprocess=None, postprocess=None), 'update': Operation(type=<OperationType.UPDATE: 3>, method=<RequestMethod.PUT: 'PUT'>, path='{id}', payload=None, preprocess=None, postprocess=None), 'delete': Operation(type=<OperationType.DELETE: 4>, method=<RequestMethod.DELETE: 'DELETE'>, path='{id}', payload=None, preprocess=None, postprocess=None)}, 'name': 'custommanaged'}
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: _processclassattributes completed for (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: completed creation of (CustomManaged) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=<clientfactory.core.payload.Payload object at 0x102f24ad0>, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None), 'get': Operation(type=<OperationType.READ: 2>, method=<RequestMethod.GET: 'GET'>, path='{id}', payload=None, preprocess=None, postprocess=None), 'update': Operation(type=<OperationType.UPDATE: 3>, method=<RequestMethod.PUT: 'PUT'>, path='{id}', payload=None, preprocess=None, postprocess=None), 'delete': Operation(type=<OperationType.DELETE: 4>, method=<RequestMethod.DELETE: 'DELETE'>, path='{id}', payload=None, preprocess=None, postprocess=None)}, 'name': 'custommanaged'}
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: creating class (Users)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: processing base class (object) for (Users)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: processing base class (ManagedResource) for (Users)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: base (ManagedResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'operations': {}, 'name': 'managedresource'}
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getmetadata) from (ManagedResource) to (Users) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (setmetadata) from (ManagedResource) to (Users) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (ManagedResource) to (Users) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (ManagedResource) to (Users) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (ManagedResource) to (Users) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (findmetadata) from (ManagedResource) to (Users) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (methods) from (ManagedResource) to (Users) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (components) from (ManagedResource) to (Users) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (path) from (ManagedResource) to (Users) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getfullpath) from (ManagedResource) to (Users) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getmethods) from (ManagedResource) to (Users) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getnestedresources) from (ManagedResource) to (Users) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (operations) from (ManagedResource) to (Users) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: processing attributes for (Users)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: processing attribute (operations) with value ({'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=None, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None)}) for (Users)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: calling _processclassattributes for (Users)
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: starting attribute processing for (Users)
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: current metadata before processing: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=None, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None)}}
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: set name to (users) for: Users
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Users
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: starting attribute processing for (Users)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (Users)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (Users)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (operations) on (Users)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (Users)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__dict__) on (Users)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__dict__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__weakref__) on (Users)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__weakref__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (Users)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (Users)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: completed processing for (Users) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=None, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None)}, 'name': 'users'}
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Users
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: metadata after super(): {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=None, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None)}, 'name': 'users'}
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: completed processing for (Users) - final metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=None, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None)}, 'name': 'users'}
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: _processclassattributes completed for (Users)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: completed creation of (Users) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=None, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None)}, 'name': 'users'}
2025-03-25 12:40:56 | DEBUG | resource: created resource (Users) with path: users
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: creating class (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: processing base class (ManagedResource) for (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: base (ManagedResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'operations': {}, 'name': 'managedresource'}
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getmetadata) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (setmetadata) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (findmetadata) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (methods) from (ManagedResource) to (CustomManaged) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (components) from (ManagedResource) to (CustomManaged) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (path) from (ManagedResource) to (CustomManaged) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getfullpath) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getmethods) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getnestedresources) from (ManagedResource) to (CustomManaged) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (operations) from (ManagedResource) to (CustomManaged) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: processing attributes for (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: processing attribute (operations) with value ({'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=<clientfactory.core.payload.Payload object at 0x102ebf9d0>, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None)}) for (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: calling _processclassattributes for (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: starting attribute processing for (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: current metadata before processing: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=<clientfactory.core.payload.Payload object at 0x102ebf9d0>, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None)}}
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: set name to (custommanaged) for: CustomManaged
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: CustomManaged
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: starting attribute processing for (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (operations) on (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: completed processing for (CustomManaged) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=<clientfactory.core.payload.Payload object at 0x102ebf9d0>, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None)}, 'name': 'custommanaged'}
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: CustomManaged
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: metadata after super(): {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=<clientfactory.core.payload.Payload object at 0x102ebf9d0>, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None)}, 'name': 'custommanaged'}
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: completed processing for (CustomManaged) - final metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=<clientfactory.core.payload.Payload object at 0x102ebf9d0>, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None)}, 'name': 'custommanaged'}
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: _processclassattributes completed for (CustomManaged)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: completed creation of (CustomManaged) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'operations': {'create': Operation(type=<OperationType.CREATE: 1>, method=<RequestMethod.POST: 'POST'>, path='', payload=<clientfactory.core.payload.Payload object at 0x102ebf9d0>, preprocess=None, postprocess=None), 'list': Operation(type=<OperationType.LIST: 5>, method=<RequestMethod.GET: 'GET'>, path='', payload=None, preprocess=None, postprocess=None)}, 'name': 'custommanaged'}
2025-03-25 12:40:56 | DEBUG | Initializing Session
2025-03-25 12:40:56 | DEBUG | Creating requests.Session
2025-03-25 12:40:56 | DEBUG | Setting session headers: {}
2025-03-25 12:40:56 | DEBUG | Setting session cookies: {}
2025-03-25 12:40:56 | DEBUG | Setting SSL verification: True
2025-03-25 12:40:56 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 12:40:56 | DEBUG | Initializing resource: users with path: users
2025-03-25 12:40:56 | DEBUG | Resource parent: None
2025-03-25 12:40:56 | DEBUG | Registering operation: create
2025-03-25 12:40:56 | DEBUG | Registering operation: list
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: creating class (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: processing base class (SearchResource) for (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: base (SearchResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None, 'name': 'searchresource'}
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getmetadata) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (setmetadata) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (findmetadata) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (methods) from (SearchResource) to (CustomSearch) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (components) from (SearchResource) to (CustomSearch) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (path) from (SearchResource) to (CustomSearch) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getfullpath) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getmethods) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getnestedresources) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (requestmethod) from (SearchResource) to (CustomSearch) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (payload) from (SearchResource) to (CustomSearch) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: processing attributes for (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: processing attribute (requestmethod) with value (RequestMethod.POST) for (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: processing attribute (payload) with value (<clientfactory.core.payload.Payload object at 0x102ebf4d0>) for (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: calling _processclassattributes for (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: starting attribute processing for (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: current metadata before processing: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x102ebf4d0>}
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: set name to (customsearch) for: CustomSearch
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: CustomSearch
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: starting attribute processing for (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (requestmethod) on (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (payload) on (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: completed processing for (CustomSearch) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x102ebf4d0>, 'name': 'customsearch'}
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: CustomSearch
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: metadata after super(): {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x102ebf4d0>, 'name': 'customsearch'}
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: completed processing for (CustomSearch) - final metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x102ebf4d0>, 'name': 'customsearch'}
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: _processclassattributes completed for (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: completed creation of (CustomSearch) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x102ebf4d0>, 'name': 'customsearch'}
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: creating class (Search)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: processing base class (object) for (Search)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: processing base class (SearchResource) for (Search)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: base (SearchResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None, 'name': 'searchresource'}
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getmetadata) from (SearchResource) to (Search) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (setmetadata) from (SearchResource) to (Search) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (SearchResource) to (Search) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (SearchResource) to (Search) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (SearchResource) to (Search) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (findmetadata) from (SearchResource) to (Search) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (methods) from (SearchResource) to (Search) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (components) from (SearchResource) to (Search) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (path) from (SearchResource) to (Search) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getfullpath) from (SearchResource) to (Search) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getmethods) from (SearchResource) to (Search) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getnestedresources) from (SearchResource) to (Search) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (requestmethod) from (SearchResource) to (Search) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (payload) from (SearchResource) to (Search) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: processing attributes for (Search)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: processing attribute (requestmethod) with value (RequestMethod.POST) for (Search)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: processing attribute (payload) with value (<clientfactory.core.payload.Payload object at 0x102e8f5c0>) for (Search)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: calling _processclassattributes for (Search)
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: starting attribute processing for (Search)
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: current metadata before processing: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x102e8f5c0>}
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: set name to (search) for: Search
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Search
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: starting attribute processing for (Search)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (Search)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (Search)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (requestmethod) on (Search)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (payload) on (Search)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (Search)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__dict__) on (Search)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__dict__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__weakref__) on (Search)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__weakref__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (Search)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (Search)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: completed processing for (Search) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x102e8f5c0>, 'name': 'search'}
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Search
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: metadata after super(): {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x102e8f5c0>, 'name': 'search'}
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: completed processing for (Search) - final metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x102e8f5c0>, 'name': 'search'}
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: _processclassattributes completed for (Search)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: completed creation of (Search) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x102e8f5c0>, 'name': 'search'}
2025-03-25 12:40:56 | DEBUG | resource: created resource (Search) with path: search
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: creating class (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: processing base class (SearchResource) for (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: base (SearchResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None, 'name': 'searchresource'}
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getmetadata) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (setmetadata) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (findmetadata) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (methods) from (SearchResource) to (CustomSearch) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (components) from (SearchResource) to (CustomSearch) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (path) from (SearchResource) to (CustomSearch) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getfullpath) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getmethods) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (getnestedresources) from (SearchResource) to (CustomSearch) - cancopy: False
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (requestmethod) from (SearchResource) to (CustomSearch) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: copying (payload) from (SearchResource) to (CustomSearch) - cancopy: True
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: processing attributes for (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: processing attribute (requestmethod) with value (RequestMethod.POST) for (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: processing attribute (payload) with value (<clientfactory.core.payload.Payload object at 0x102e8f950>) for (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: calling _processclassattributes for (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: starting attribute processing for (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: current metadata before processing: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x102e8f950>}
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: set name to (customsearch) for: CustomSearch
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: CustomSearch
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: starting attribute processing for (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (requestmethod) on (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (payload) on (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 12:40:56 | DEBUG | DeclarativeContainer: completed processing for (CustomSearch) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x102e8f950>, 'name': 'customsearch'}
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: CustomSearch
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: metadata after super(): {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x102e8f950>, 'name': 'customsearch'}
2025-03-25 12:40:56 | DEBUG | DeclarativeResource: completed processing for (CustomSearch) - final metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x102e8f950>, 'name': 'customsearch'}
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: _processclassattributes completed for (CustomSearch)
2025-03-25 12:40:56 | DEBUG | DeclarativeMeta: completed creation of (CustomSearch) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102eab380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102eab420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102eab4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102eab560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102eab600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102eab6a0>)>, 'methods': {}, 'components': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102edc5e0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102edc680>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102edc720>)>, 'requestmethod': <RequestMethod.POST: 'POST'>, 'payload': <clientfactory.core.payload.Payload object at 0x102e8f950>, 'name': 'customsearch'}
2025-03-25 12:40:56 | DEBUG | Initializing Session
2025-03-25 12:40:56 | DEBUG | Creating requests.Session
2025-03-25 12:40:56 | DEBUG | Setting session headers: {}
2025-03-25 12:40:56 | DEBUG | Setting session cookies: {}
2025-03-25 12:40:56 | DEBUG | Setting SSL verification: True
2025-03-25 12:40:56 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 12:40:56 | DEBUG | Initializing resource: search with path: search
2025-03-25 12:40:56 | DEBUG | Resource parent: None
2025-03-25 12:40:56 | DEBUG | Adding default search method
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: creating class (CustomAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing base class (BaseAuth) for (CustomAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: base (BaseAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104f2c900>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104f2c9a0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104f2ca40>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104f2cae0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104f2cb80>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104f2cc20>)>}
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (getmetadata) from (BaseAuth) to (CustomAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (setmetadata) from (BaseAuth) to (CustomAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (BaseAuth) to (CustomAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (BaseAuth) to (CustomAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (BaseAuth) to (CustomAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (findmetadata) from (BaseAuth) to (CustomAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attributes for (CustomAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attribute (name) with value (custom) for (CustomAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attribute (value) with value (test) for (CustomAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: calling _processclassattributes for (CustomAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: _processclassattributes completed for (CustomAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: completed creation of (CustomAuth) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104f2c900>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104f2c9a0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104f2ca40>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104f2cae0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104f2cb80>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104f2cc20>)>, 'name': 'custom', 'value': 'test'}
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: creating class (MyBasic)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing base class (object) for (MyBasic)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing base class (BaseAuth) for (MyBasic)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: base (BaseAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104f2c900>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104f2c9a0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104f2ca40>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104f2cae0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104f2cb80>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104f2cc20>)>}
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (getmetadata) from (BaseAuth) to (MyBasic) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (setmetadata) from (BaseAuth) to (MyBasic) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (BaseAuth) to (MyBasic) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (BaseAuth) to (MyBasic) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (BaseAuth) to (MyBasic) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (findmetadata) from (BaseAuth) to (MyBasic) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attributes for (MyBasic)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attribute (username) with value (testuser) for (MyBasic)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attribute (password) with value (testpass) for (MyBasic)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: calling _processclassattributes for (MyBasic)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: _processclassattributes completed for (MyBasic)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: completed creation of (MyBasic) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104f2c900>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104f2c9a0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104f2ca40>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104f2cae0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104f2cb80>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104f2cc20>)>, 'username': 'testuser', 'password': 'testpass'}
2025-03-25 13:30:03 | DEBUG | authprovider: created auth provider (MyBasic)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: creating class (MyAPIKey)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing base class (object) for (MyAPIKey)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing base class (APIKeyAuth) for (MyAPIKey)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: base (APIKeyAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104f2c900>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104f2c9a0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104f2ca40>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104f2cae0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104f2cb80>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104f2cc20>)>, 'key': '', 'name': 'X-API-Key', 'location': <KeyLocation.HEADER: 'header'>, 'prefix': None, 'Header': <classmethod(<function APIKeyAuth.Header at 0x10509dda0>)>, 'Query': <classmethod(<function APIKeyAuth.Query at 0x10509de40>)>, 'Cookie': <classmethod(<function APIKeyAuth.Cookie at 0x10509dee0>)>}
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (getmetadata) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (setmetadata) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (findmetadata) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (key) from (APIKeyAuth) to (MyAPIKey) - cancopy: True
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (location) from (APIKeyAuth) to (MyAPIKey) - cancopy: True
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (prefix) from (APIKeyAuth) to (MyAPIKey) - cancopy: True
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (Header) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (Query) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (Cookie) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attributes for (MyAPIKey)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attribute (key) with value (test-key) for (MyAPIKey)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attribute (name) with value (X-Test-Key) for (MyAPIKey)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attribute (location) with value (KeyLocation.HEADER) for (MyAPIKey)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attribute (prefix) with value (Test) for (MyAPIKey)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: calling _processclassattributes for (MyAPIKey)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: _processclassattributes completed for (MyAPIKey)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: completed creation of (MyAPIKey) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104f2c900>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104f2c9a0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104f2ca40>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104f2cae0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104f2cb80>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104f2cc20>)>, 'key': 'test-key', 'location': <KeyLocation.HEADER: 'header'>, 'prefix': 'Test', 'Header': <classmethod(<function APIKeyAuth.Header at 0x10509dda0>)>, 'Query': <classmethod(<function APIKeyAuth.Query at 0x10509de40>)>, 'Cookie': <classmethod(<function APIKeyAuth.Cookie at 0x10509dee0>)>, 'name': 'X-Test-Key'}
2025-03-25 13:30:03 | DEBUG | authprovider: created auth provider (MyAPIKey)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: creating class (MyToken)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing base class (object) for (MyToken)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing base class (TokenAuth) for (MyToken)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: base (TokenAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104f2c900>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104f2c9a0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104f2ca40>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104f2cae0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104f2cb80>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104f2cc20>)>, 'token': '', 'scheme': <TokenScheme.BEARER: 'Bearer'>, 'expiresin': None, 'Bearer': <classmethod(<function TokenAuth.Bearer at 0x10509d620>)>, 'Token': <classmethod(<function TokenAuth.Token at 0x10509d6c0>)>, 'JWT': <classmethod(<function TokenAuth.JWT at 0x10509d760>)>, 'MAC': <classmethod(<function TokenAuth.MAC at 0x10509d800>)>, 'Hawk': <classmethod(<function TokenAuth.Hawk at 0x10509d8a0>)>, 'Custom': <classmethod(<function TokenAuth.Custom at 0x10509d940>)>}
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (getmetadata) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (setmetadata) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (findmetadata) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (token) from (TokenAuth) to (MyToken) - cancopy: True
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (scheme) from (TokenAuth) to (MyToken) - cancopy: True
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (expiresin) from (TokenAuth) to (MyToken) - cancopy: True
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (Bearer) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (Token) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (JWT) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (MAC) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (Hawk) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (Custom) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attributes for (MyToken)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attribute (token) with value (test-token) for (MyToken)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attribute (scheme) with value (TokenScheme.BEARER) for (MyToken)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attribute (expiresin) with value (3600) for (MyToken)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: calling _processclassattributes for (MyToken)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: _processclassattributes completed for (MyToken)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: completed creation of (MyToken) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104f2c900>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104f2c9a0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104f2ca40>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104f2cae0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104f2cb80>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104f2cc20>)>, 'token': 'test-token', 'scheme': <TokenScheme.BEARER: 'Bearer'>, 'expiresin': 3600, 'Bearer': <classmethod(<function TokenAuth.Bearer at 0x10509d620>)>, 'Token': <classmethod(<function TokenAuth.Token at 0x10509d6c0>)>, 'JWT': <classmethod(<function TokenAuth.JWT at 0x10509d760>)>, 'MAC': <classmethod(<function TokenAuth.MAC at 0x10509d800>)>, 'Hawk': <classmethod(<function TokenAuth.Hawk at 0x10509d8a0>)>, 'Custom': <classmethod(<function TokenAuth.Custom at 0x10509d940>)>}
2025-03-25 13:30:03 | DEBUG | authprovider: created auth provider (MyToken)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: creating class (MyOAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing base class (object) for (MyOAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing base class (OAuthAuth) for (MyOAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: base (OAuthAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104f2c900>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104f2c9a0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104f2ca40>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104f2cae0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104f2cb80>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104f2cc20>)>, 'clientid': '', 'clientsecret': '', 'tokenurl': '', 'authurl': None, 'redirecturi': None, 'scope': None, 'tokenfield': 'access_token', 'flow': <OAuthFlow.AUTHORIZATIONCODE: 'AuthorizationCode'>, 'extraparams': {}, 'headers': {}, 'ClientCredentials': <classmethod(<function OAuthAuth.ClientCredentials at 0x10509eca0>)>, 'AuthorizationCode': <classmethod(<function OAuthAuth.AuthorizationCode at 0x10509ed40>)>}
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (getmetadata) from (OAuthAuth) to (MyOAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (setmetadata) from (OAuthAuth) to (MyOAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (OAuthAuth) to (MyOAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (OAuthAuth) to (MyOAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (OAuthAuth) to (MyOAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (findmetadata) from (OAuthAuth) to (MyOAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (clientid) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (clientsecret) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (tokenurl) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (authurl) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (redirecturi) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (scope) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (tokenfield) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (flow) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (extraparams) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (headers) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (ClientCredentials) from (OAuthAuth) to (MyOAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (AuthorizationCode) from (OAuthAuth) to (MyOAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attributes for (MyOAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attribute (clientid) with value (test-client) for (MyOAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attribute (clientsecret) with value (test-secret) for (MyOAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attribute (tokenurl) with value (https://test.com/token) for (MyOAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attribute (authurl) with value (https://test.com/auth) for (MyOAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attribute (scope) with value (read write) for (MyOAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attribute (flow) with value (OAuthFlow.CLIENTCREDENTIALS) for (MyOAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: calling _processclassattributes for (MyOAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: _processclassattributes completed for (MyOAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: completed creation of (MyOAuth) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104f2c900>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104f2c9a0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104f2ca40>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104f2cae0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104f2cb80>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104f2cc20>)>, 'clientid': 'test-client', 'clientsecret': 'test-secret', 'tokenurl': 'https://test.com/token', 'authurl': 'https://test.com/auth', 'redirecturi': None, 'scope': 'read write', 'tokenfield': 'access_token', 'flow': <OAuthFlow.CLIENTCREDENTIALS: 'ClientCredentials'>, 'extraparams': {}, 'headers': {}, 'ClientCredentials': <classmethod(<function OAuthAuth.ClientCredentials at 0x10509eca0>)>, 'AuthorizationCode': <classmethod(<function OAuthAuth.AuthorizationCode at 0x10509ed40>)>}
2025-03-25 13:30:03 | DEBUG | authprovider: created auth provider (MyOAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: creating class (BaseCustomAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing base class (BaseAuth) for (BaseCustomAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: base (BaseAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104f2c900>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104f2c9a0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104f2ca40>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104f2cae0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104f2cb80>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104f2cc20>)>}
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (getmetadata) from (BaseAuth) to (BaseCustomAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (setmetadata) from (BaseAuth) to (BaseCustomAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (BaseAuth) to (BaseCustomAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (BaseAuth) to (BaseCustomAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (BaseAuth) to (BaseCustomAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (findmetadata) from (BaseAuth) to (BaseCustomAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attributes for (BaseCustomAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attribute (shared) with value (base) for (BaseCustomAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attribute (overridden) with value (base) for (BaseCustomAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: calling _processclassattributes for (BaseCustomAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: _processclassattributes completed for (BaseCustomAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: completed creation of (BaseCustomAuth) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104f2c900>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104f2c9a0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104f2ca40>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104f2cae0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104f2cb80>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104f2cc20>)>, 'shared': 'base', 'overridden': 'base'}
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: creating class (ChildCustomAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing base class (BaseCustomAuth) for (ChildCustomAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: base (BaseCustomAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104f2c900>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104f2c9a0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104f2ca40>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104f2cae0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104f2cb80>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104f2cc20>)>, 'shared': 'base', 'overridden': 'base'}
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (getmetadata) from (BaseCustomAuth) to (ChildCustomAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (setmetadata) from (BaseCustomAuth) to (ChildCustomAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (BaseCustomAuth) to (ChildCustomAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (BaseCustomAuth) to (ChildCustomAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (BaseCustomAuth) to (ChildCustomAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (findmetadata) from (BaseCustomAuth) to (ChildCustomAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (shared) from (BaseCustomAuth) to (ChildCustomAuth) - cancopy: True
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (overridden) from (BaseCustomAuth) to (ChildCustomAuth) - cancopy: True
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attributes for (ChildCustomAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attribute (overridden) with value (child) for (ChildCustomAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attribute (new) with value (child) for (ChildCustomAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: calling _processclassattributes for (ChildCustomAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: _processclassattributes completed for (ChildCustomAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: completed creation of (ChildCustomAuth) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104f2c900>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104f2c9a0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104f2ca40>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104f2cae0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104f2cb80>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104f2cc20>)>, 'shared': 'base', 'overridden': 'child', 'new': 'child'}
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: creating class (ConfigurableAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing base class (object) for (ConfigurableAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing base class (APIKeyAuth) for (ConfigurableAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: base (APIKeyAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104f2c900>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104f2c9a0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104f2ca40>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104f2cae0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104f2cb80>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104f2cc20>)>, 'key': '', 'name': 'X-API-Key', 'location': <KeyLocation.HEADER: 'header'>, 'prefix': None, 'Header': <classmethod(<function APIKeyAuth.Header at 0x10509dda0>)>, 'Query': <classmethod(<function APIKeyAuth.Query at 0x10509de40>)>, 'Cookie': <classmethod(<function APIKeyAuth.Cookie at 0x10509dee0>)>}
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (getmetadata) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (setmetadata) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (findmetadata) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (key) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: True
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (location) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: True
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (prefix) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: True
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (Header) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (Query) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (Cookie) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attributes for (ConfigurableAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attribute (key) with value (default) for (ConfigurableAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attribute (name) with value (X-API-Key) for (ConfigurableAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attribute (location) with value (KeyLocation.HEADER) for (ConfigurableAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: calling _processclassattributes for (ConfigurableAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: _processclassattributes completed for (ConfigurableAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: completed creation of (ConfigurableAuth) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104f2c900>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104f2c9a0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104f2ca40>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104f2cae0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104f2cb80>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104f2cc20>)>, 'key': 'default', 'location': <KeyLocation.HEADER: 'header'>, 'prefix': None, 'Header': <classmethod(<function APIKeyAuth.Header at 0x10509dda0>)>, 'Query': <classmethod(<function APIKeyAuth.Query at 0x10509de40>)>, 'Cookie': <classmethod(<function APIKeyAuth.Cookie at 0x10509dee0>)>, 'name': 'X-API-Key'}
2025-03-25 13:30:03 | DEBUG | authprovider: created auth provider (ConfigurableAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: creating class (MetadataAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing base class (BaseAuth) for (MetadataAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: base (BaseAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104f2c900>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104f2c9a0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104f2ca40>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104f2cae0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104f2cb80>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104f2cc20>)>}
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (getmetadata) from (BaseAuth) to (MetadataAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (setmetadata) from (BaseAuth) to (MetadataAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (BaseAuth) to (MetadataAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (BaseAuth) to (MetadataAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (BaseAuth) to (MetadataAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: copying (findmetadata) from (BaseAuth) to (MetadataAuth) - cancopy: False
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attributes for (MetadataAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: processing attribute (test_value) with value (original) for (MetadataAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: calling _processclassattributes for (MetadataAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: _processclassattributes completed for (MetadataAuth)
2025-03-25 13:30:03 | DEBUG | DeclarativeMeta: completed creation of (MetadataAuth) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104f2c900>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104f2c9a0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104f2ca40>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104f2cae0>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104f2cb80>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104f2cc20>)>, 'test_value': 'original'}
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: creating class (CustomAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing base class (BaseAuth) for (CustomAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: base (BaseAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289f380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289f420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289f4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289f560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289f600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289f6a0>)>}
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (getmetadata) from (BaseAuth) to (CustomAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (setmetadata) from (BaseAuth) to (CustomAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (BaseAuth) to (CustomAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (BaseAuth) to (CustomAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (BaseAuth) to (CustomAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (findmetadata) from (BaseAuth) to (CustomAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attributes for (CustomAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attribute (name) with value (custom) for (CustomAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attribute (value) with value (test) for (CustomAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: calling _processclassattributes for (CustomAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: _processclassattributes completed for (CustomAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: completed creation of (CustomAuth) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289f380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289f420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289f4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289f560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289f600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289f6a0>)>, 'name': 'custom', 'value': 'test'}
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: creating class (MyBasic)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing base class (object) for (MyBasic)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing base class (BaseAuth) for (MyBasic)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: base (BaseAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289f380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289f420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289f4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289f560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289f600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289f6a0>)>}
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (getmetadata) from (BaseAuth) to (MyBasic) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (setmetadata) from (BaseAuth) to (MyBasic) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (BaseAuth) to (MyBasic) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (BaseAuth) to (MyBasic) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (BaseAuth) to (MyBasic) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (findmetadata) from (BaseAuth) to (MyBasic) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attributes for (MyBasic)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attribute (username) with value (testuser) for (MyBasic)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attribute (password) with value (testpass) for (MyBasic)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: calling _processclassattributes for (MyBasic)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: _processclassattributes completed for (MyBasic)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: completed creation of (MyBasic) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289f380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289f420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289f4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289f560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289f600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289f6a0>)>, 'username': 'testuser', 'password': 'testpass'}
2025-03-25 13:33:01 | DEBUG | authprovider: created auth provider (MyBasic)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: creating class (MyAPIKey)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing base class (object) for (MyAPIKey)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing base class (APIKeyAuth) for (MyAPIKey)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: base (APIKeyAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289f380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289f420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289f4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289f560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289f600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289f6a0>)>, 'key': '', 'name': 'X-API-Key', 'location': <KeyLocation.HEADER: 'header'>, 'prefix': None, 'Header': <classmethod(<function APIKeyAuth.Header at 0x10295cb80>)>, 'Query': <classmethod(<function APIKeyAuth.Query at 0x10295cc20>)>, 'Cookie': <classmethod(<function APIKeyAuth.Cookie at 0x10295ccc0>)>}
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (getmetadata) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (setmetadata) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (findmetadata) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (key) from (APIKeyAuth) to (MyAPIKey) - cancopy: True
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (location) from (APIKeyAuth) to (MyAPIKey) - cancopy: True
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (prefix) from (APIKeyAuth) to (MyAPIKey) - cancopy: True
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (Header) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (Query) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (Cookie) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attributes for (MyAPIKey)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attribute (key) with value (test-key) for (MyAPIKey)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attribute (name) with value (X-Test-Key) for (MyAPIKey)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attribute (location) with value (KeyLocation.HEADER) for (MyAPIKey)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attribute (prefix) with value (Test) for (MyAPIKey)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: calling _processclassattributes for (MyAPIKey)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: _processclassattributes completed for (MyAPIKey)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: completed creation of (MyAPIKey) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289f380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289f420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289f4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289f560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289f600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289f6a0>)>, 'key': 'test-key', 'location': <KeyLocation.HEADER: 'header'>, 'prefix': 'Test', 'Header': <classmethod(<function APIKeyAuth.Header at 0x10295cb80>)>, 'Query': <classmethod(<function APIKeyAuth.Query at 0x10295cc20>)>, 'Cookie': <classmethod(<function APIKeyAuth.Cookie at 0x10295ccc0>)>, 'name': 'X-Test-Key'}
2025-03-25 13:33:01 | DEBUG | authprovider: created auth provider (MyAPIKey)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: creating class (MyToken)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing base class (object) for (MyToken)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing base class (TokenAuth) for (MyToken)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: base (TokenAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289f380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289f420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289f4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289f560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289f600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289f6a0>)>, 'token': '', 'scheme': <TokenScheme.BEARER: 'Bearer'>, 'expiresin': None, 'Bearer': <classmethod(<function TokenAuth.Bearer at 0x10295c400>)>, 'Token': <classmethod(<function TokenAuth.Token at 0x10295c4a0>)>, 'JWT': <classmethod(<function TokenAuth.JWT at 0x10295c540>)>, 'MAC': <classmethod(<function TokenAuth.MAC at 0x10295c5e0>)>, 'Hawk': <classmethod(<function TokenAuth.Hawk at 0x10295c680>)>, 'Custom': <classmethod(<function TokenAuth.Custom at 0x10295c720>)>}
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (getmetadata) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (setmetadata) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (findmetadata) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (token) from (TokenAuth) to (MyToken) - cancopy: True
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (scheme) from (TokenAuth) to (MyToken) - cancopy: True
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (expiresin) from (TokenAuth) to (MyToken) - cancopy: True
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (Bearer) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (Token) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (JWT) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (MAC) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (Hawk) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (Custom) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attributes for (MyToken)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attribute (token) with value (test-token) for (MyToken)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attribute (scheme) with value (TokenScheme.BEARER) for (MyToken)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attribute (expiresin) with value (3600) for (MyToken)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: calling _processclassattributes for (MyToken)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: _processclassattributes completed for (MyToken)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: completed creation of (MyToken) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289f380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289f420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289f4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289f560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289f600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289f6a0>)>, 'token': 'test-token', 'scheme': <TokenScheme.BEARER: 'Bearer'>, 'expiresin': 3600, 'Bearer': <classmethod(<function TokenAuth.Bearer at 0x10295c400>)>, 'Token': <classmethod(<function TokenAuth.Token at 0x10295c4a0>)>, 'JWT': <classmethod(<function TokenAuth.JWT at 0x10295c540>)>, 'MAC': <classmethod(<function TokenAuth.MAC at 0x10295c5e0>)>, 'Hawk': <classmethod(<function TokenAuth.Hawk at 0x10295c680>)>, 'Custom': <classmethod(<function TokenAuth.Custom at 0x10295c720>)>}
2025-03-25 13:33:01 | DEBUG | authprovider: created auth provider (MyToken)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: creating class (MyOAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing base class (object) for (MyOAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing base class (OAuthAuth) for (MyOAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: base (OAuthAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289f380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289f420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289f4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289f560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289f600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289f6a0>)>, 'clientid': '', 'clientsecret': '', 'tokenurl': '', 'authurl': None, 'redirecturi': None, 'scope': None, 'tokenfield': 'access_token', 'flow': <OAuthFlow.AUTHORIZATIONCODE: 'AuthorizationCode'>, 'extraparams': {}, 'headers': {}, 'ClientCredentials': <classmethod(<function OAuthAuth.ClientCredentials at 0x10295da80>)>, 'AuthorizationCode': <classmethod(<function OAuthAuth.AuthorizationCode at 0x10295db20>)>}
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (getmetadata) from (OAuthAuth) to (MyOAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (setmetadata) from (OAuthAuth) to (MyOAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (OAuthAuth) to (MyOAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (OAuthAuth) to (MyOAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (OAuthAuth) to (MyOAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (findmetadata) from (OAuthAuth) to (MyOAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (clientid) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (clientsecret) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (tokenurl) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (authurl) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (redirecturi) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (scope) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (tokenfield) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (flow) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (extraparams) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (headers) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (ClientCredentials) from (OAuthAuth) to (MyOAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (AuthorizationCode) from (OAuthAuth) to (MyOAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attributes for (MyOAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attribute (clientid) with value (test-client) for (MyOAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attribute (clientsecret) with value (test-secret) for (MyOAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attribute (tokenurl) with value (https://test.com/token) for (MyOAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attribute (authurl) with value (https://test.com/auth) for (MyOAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attribute (scope) with value (read write) for (MyOAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attribute (flow) with value (OAuthFlow.CLIENTCREDENTIALS) for (MyOAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: calling _processclassattributes for (MyOAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: _processclassattributes completed for (MyOAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: completed creation of (MyOAuth) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289f380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289f420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289f4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289f560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289f600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289f6a0>)>, 'clientid': 'test-client', 'clientsecret': 'test-secret', 'tokenurl': 'https://test.com/token', 'authurl': 'https://test.com/auth', 'redirecturi': None, 'scope': 'read write', 'tokenfield': 'access_token', 'flow': <OAuthFlow.CLIENTCREDENTIALS: 'ClientCredentials'>, 'extraparams': {}, 'headers': {}, 'ClientCredentials': <classmethod(<function OAuthAuth.ClientCredentials at 0x10295da80>)>, 'AuthorizationCode': <classmethod(<function OAuthAuth.AuthorizationCode at 0x10295db20>)>}
2025-03-25 13:33:01 | DEBUG | authprovider: created auth provider (MyOAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: creating class (BaseCustomAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing base class (BaseAuth) for (BaseCustomAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: base (BaseAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289f380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289f420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289f4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289f560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289f600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289f6a0>)>}
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (getmetadata) from (BaseAuth) to (BaseCustomAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (setmetadata) from (BaseAuth) to (BaseCustomAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (BaseAuth) to (BaseCustomAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (BaseAuth) to (BaseCustomAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (BaseAuth) to (BaseCustomAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (findmetadata) from (BaseAuth) to (BaseCustomAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attributes for (BaseCustomAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attribute (shared) with value (base) for (BaseCustomAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attribute (overridden) with value (base) for (BaseCustomAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: calling _processclassattributes for (BaseCustomAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: _processclassattributes completed for (BaseCustomAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: completed creation of (BaseCustomAuth) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289f380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289f420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289f4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289f560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289f600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289f6a0>)>, 'shared': 'base', 'overridden': 'base'}
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: creating class (ChildCustomAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing base class (BaseCustomAuth) for (ChildCustomAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: base (BaseCustomAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289f380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289f420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289f4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289f560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289f600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289f6a0>)>, 'shared': 'base', 'overridden': 'base'}
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (getmetadata) from (BaseCustomAuth) to (ChildCustomAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (setmetadata) from (BaseCustomAuth) to (ChildCustomAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (BaseCustomAuth) to (ChildCustomAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (BaseCustomAuth) to (ChildCustomAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (BaseCustomAuth) to (ChildCustomAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (findmetadata) from (BaseCustomAuth) to (ChildCustomAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (shared) from (BaseCustomAuth) to (ChildCustomAuth) - cancopy: True
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (overridden) from (BaseCustomAuth) to (ChildCustomAuth) - cancopy: True
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attributes for (ChildCustomAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attribute (overridden) with value (child) for (ChildCustomAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attribute (new) with value (child) for (ChildCustomAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: calling _processclassattributes for (ChildCustomAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: _processclassattributes completed for (ChildCustomAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: completed creation of (ChildCustomAuth) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289f380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289f420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289f4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289f560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289f600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289f6a0>)>, 'shared': 'base', 'overridden': 'child', 'new': 'child'}
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: creating class (ConfigurableAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing base class (object) for (ConfigurableAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing base class (APIKeyAuth) for (ConfigurableAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: base (APIKeyAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289f380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289f420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289f4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289f560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289f600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289f6a0>)>, 'key': '', 'name': 'X-API-Key', 'location': <KeyLocation.HEADER: 'header'>, 'prefix': None, 'Header': <classmethod(<function APIKeyAuth.Header at 0x10295cb80>)>, 'Query': <classmethod(<function APIKeyAuth.Query at 0x10295cc20>)>, 'Cookie': <classmethod(<function APIKeyAuth.Cookie at 0x10295ccc0>)>}
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (getmetadata) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (setmetadata) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (findmetadata) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (key) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: True
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (location) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: True
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (prefix) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: True
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (Header) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (Query) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (Cookie) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attributes for (ConfigurableAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attribute (key) with value (default) for (ConfigurableAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attribute (name) with value (X-API-Key) for (ConfigurableAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attribute (location) with value (KeyLocation.HEADER) for (ConfigurableAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: calling _processclassattributes for (ConfigurableAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: _processclassattributes completed for (ConfigurableAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: completed creation of (ConfigurableAuth) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289f380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289f420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289f4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289f560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289f600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289f6a0>)>, 'key': 'default', 'location': <KeyLocation.HEADER: 'header'>, 'prefix': None, 'Header': <classmethod(<function APIKeyAuth.Header at 0x10295cb80>)>, 'Query': <classmethod(<function APIKeyAuth.Query at 0x10295cc20>)>, 'Cookie': <classmethod(<function APIKeyAuth.Cookie at 0x10295ccc0>)>, 'name': 'X-API-Key'}
2025-03-25 13:33:01 | DEBUG | authprovider: created auth provider (ConfigurableAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: creating class (MetadataAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing base class (BaseAuth) for (MetadataAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: base (BaseAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289f380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289f420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289f4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289f560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289f600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289f6a0>)>}
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (getmetadata) from (BaseAuth) to (MetadataAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (setmetadata) from (BaseAuth) to (MetadataAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (BaseAuth) to (MetadataAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (BaseAuth) to (MetadataAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (BaseAuth) to (MetadataAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: copying (findmetadata) from (BaseAuth) to (MetadataAuth) - cancopy: False
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attributes for (MetadataAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: processing attribute (test_value) with value (original) for (MetadataAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: calling _processclassattributes for (MetadataAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: _processclassattributes completed for (MetadataAuth)
2025-03-25 13:33:01 | DEBUG | DeclarativeMeta: completed creation of (MetadataAuth) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10289f380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10289f420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10289f4c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10289f560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x10289f600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x10289f6a0>)>, 'test_value': 'original'}
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: creating class (CustomAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing base class (BaseAuth) for (CustomAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: base (BaseAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104ea7380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104ea7420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104ea74c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104ea7560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104ea7600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104ea76a0>)>}
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (getmetadata) from (BaseAuth) to (CustomAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (setmetadata) from (BaseAuth) to (CustomAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (BaseAuth) to (CustomAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (BaseAuth) to (CustomAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (BaseAuth) to (CustomAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (findmetadata) from (BaseAuth) to (CustomAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attributes for (CustomAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attribute (name) with value (custom) for (CustomAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attribute (value) with value (test) for (CustomAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: calling _processclassattributes for (CustomAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: _processclassattributes completed for (CustomAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: completed creation of (CustomAuth) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104ea7380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104ea7420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104ea74c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104ea7560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104ea7600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104ea76a0>)>, 'name': 'custom', 'value': 'test'}
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: creating class (MyBasic)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing base class (object) for (MyBasic)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing base class (BaseAuth) for (MyBasic)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: base (BaseAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104ea7380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104ea7420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104ea74c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104ea7560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104ea7600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104ea76a0>)>}
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (getmetadata) from (BaseAuth) to (MyBasic) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (setmetadata) from (BaseAuth) to (MyBasic) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (BaseAuth) to (MyBasic) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (BaseAuth) to (MyBasic) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (BaseAuth) to (MyBasic) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (findmetadata) from (BaseAuth) to (MyBasic) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attributes for (MyBasic)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attribute (username) with value (testuser) for (MyBasic)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attribute (password) with value (testpass) for (MyBasic)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: calling _processclassattributes for (MyBasic)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: _processclassattributes completed for (MyBasic)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: completed creation of (MyBasic) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104ea7380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104ea7420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104ea74c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104ea7560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104ea7600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104ea76a0>)>, 'username': 'testuser', 'password': 'testpass'}
2025-03-25 13:34:50 | DEBUG | authprovider: created auth provider (MyBasic)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: creating class (MyAPIKey)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing base class (object) for (MyAPIKey)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing base class (APIKeyAuth) for (MyAPIKey)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: base (APIKeyAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104ea7380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104ea7420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104ea74c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104ea7560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104ea7600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104ea76a0>)>, 'key': '', 'name': 'X-API-Key', 'location': <KeyLocation.HEADER: 'header'>, 'prefix': None, 'Header': <classmethod(<function APIKeyAuth.Header at 0x104f58b80>)>, 'Query': <classmethod(<function APIKeyAuth.Query at 0x104f58c20>)>, 'Cookie': <classmethod(<function APIKeyAuth.Cookie at 0x104f58cc0>)>}
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (getmetadata) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (setmetadata) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (findmetadata) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (key) from (APIKeyAuth) to (MyAPIKey) - cancopy: True
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (location) from (APIKeyAuth) to (MyAPIKey) - cancopy: True
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (prefix) from (APIKeyAuth) to (MyAPIKey) - cancopy: True
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (Header) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (Query) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (Cookie) from (APIKeyAuth) to (MyAPIKey) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attributes for (MyAPIKey)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attribute (key) with value (test-key) for (MyAPIKey)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attribute (name) with value (X-Test-Key) for (MyAPIKey)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attribute (location) with value (KeyLocation.HEADER) for (MyAPIKey)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attribute (prefix) with value (Test) for (MyAPIKey)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: calling _processclassattributes for (MyAPIKey)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: _processclassattributes completed for (MyAPIKey)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: completed creation of (MyAPIKey) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104ea7380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104ea7420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104ea74c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104ea7560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104ea7600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104ea76a0>)>, 'key': 'test-key', 'location': <KeyLocation.HEADER: 'header'>, 'prefix': 'Test', 'Header': <classmethod(<function APIKeyAuth.Header at 0x104f58b80>)>, 'Query': <classmethod(<function APIKeyAuth.Query at 0x104f58c20>)>, 'Cookie': <classmethod(<function APIKeyAuth.Cookie at 0x104f58cc0>)>, 'name': 'X-Test-Key'}
2025-03-25 13:34:50 | DEBUG | authprovider: created auth provider (MyAPIKey)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: creating class (MyToken)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing base class (object) for (MyToken)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing base class (TokenAuth) for (MyToken)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: base (TokenAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104ea7380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104ea7420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104ea74c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104ea7560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104ea7600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104ea76a0>)>, 'token': '', 'scheme': <TokenScheme.BEARER: 'Bearer'>, 'expiresin': None, 'Bearer': <classmethod(<function TokenAuth.Bearer at 0x104f582c0>)>, 'Token': <classmethod(<function TokenAuth.Token at 0x104f58360>)>, 'JWT': <classmethod(<function TokenAuth.JWT at 0x104f58400>)>, 'MAC': <classmethod(<function TokenAuth.MAC at 0x104f584a0>)>, 'Hawk': <classmethod(<function TokenAuth.Hawk at 0x104f58540>)>, 'Custom': <classmethod(<function TokenAuth.Custom at 0x104f585e0>)>}
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (getmetadata) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (setmetadata) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (findmetadata) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (token) from (TokenAuth) to (MyToken) - cancopy: True
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (scheme) from (TokenAuth) to (MyToken) - cancopy: True
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (expiresin) from (TokenAuth) to (MyToken) - cancopy: True
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (Bearer) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (Token) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (JWT) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (MAC) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (Hawk) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (Custom) from (TokenAuth) to (MyToken) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attributes for (MyToken)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attribute (token) with value (test-token) for (MyToken)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attribute (scheme) with value (TokenScheme.BEARER) for (MyToken)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attribute (expiresin) with value (3600) for (MyToken)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: calling _processclassattributes for (MyToken)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: _processclassattributes completed for (MyToken)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: completed creation of (MyToken) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104ea7380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104ea7420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104ea74c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104ea7560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104ea7600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104ea76a0>)>, 'token': 'test-token', 'scheme': <TokenScheme.BEARER: 'Bearer'>, 'expiresin': 3600, 'Bearer': <classmethod(<function TokenAuth.Bearer at 0x104f582c0>)>, 'Token': <classmethod(<function TokenAuth.Token at 0x104f58360>)>, 'JWT': <classmethod(<function TokenAuth.JWT at 0x104f58400>)>, 'MAC': <classmethod(<function TokenAuth.MAC at 0x104f584a0>)>, 'Hawk': <classmethod(<function TokenAuth.Hawk at 0x104f58540>)>, 'Custom': <classmethod(<function TokenAuth.Custom at 0x104f585e0>)>}
2025-03-25 13:34:50 | DEBUG | authprovider: created auth provider (MyToken)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: creating class (MyOAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing base class (object) for (MyOAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing base class (OAuthAuth) for (MyOAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: base (OAuthAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104ea7380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104ea7420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104ea74c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104ea7560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104ea7600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104ea76a0>)>, 'clientid': '', 'clientsecret': '', 'tokenurl': '', 'authurl': None, 'redirecturi': None, 'scope': None, 'tokenfield': 'access_token', 'flow': <OAuthFlow.AUTHORIZATIONCODE: 'AuthorizationCode'>, 'extraparams': {}, 'headers': {}, 'ClientCredentials': <classmethod(<function OAuthAuth.ClientCredentials at 0x104f59a80>)>, 'AuthorizationCode': <classmethod(<function OAuthAuth.AuthorizationCode at 0x104f59b20>)>}
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (getmetadata) from (OAuthAuth) to (MyOAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (setmetadata) from (OAuthAuth) to (MyOAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (OAuthAuth) to (MyOAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (OAuthAuth) to (MyOAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (OAuthAuth) to (MyOAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (findmetadata) from (OAuthAuth) to (MyOAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (clientid) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (clientsecret) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (tokenurl) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (authurl) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (redirecturi) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (scope) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (tokenfield) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (flow) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (extraparams) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (headers) from (OAuthAuth) to (MyOAuth) - cancopy: True
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (ClientCredentials) from (OAuthAuth) to (MyOAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (AuthorizationCode) from (OAuthAuth) to (MyOAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attributes for (MyOAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attribute (clientid) with value (test-client) for (MyOAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attribute (clientsecret) with value (test-secret) for (MyOAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attribute (tokenurl) with value (https://test.com/token) for (MyOAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attribute (authurl) with value (https://test.com/auth) for (MyOAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attribute (scope) with value (read write) for (MyOAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attribute (flow) with value (OAuthFlow.CLIENTCREDENTIALS) for (MyOAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: calling _processclassattributes for (MyOAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: _processclassattributes completed for (MyOAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: completed creation of (MyOAuth) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104ea7380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104ea7420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104ea74c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104ea7560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104ea7600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104ea76a0>)>, 'clientid': 'test-client', 'clientsecret': 'test-secret', 'tokenurl': 'https://test.com/token', 'authurl': 'https://test.com/auth', 'redirecturi': None, 'scope': 'read write', 'tokenfield': 'access_token', 'flow': <OAuthFlow.CLIENTCREDENTIALS: 'ClientCredentials'>, 'extraparams': {}, 'headers': {}, 'ClientCredentials': <classmethod(<function OAuthAuth.ClientCredentials at 0x104f59a80>)>, 'AuthorizationCode': <classmethod(<function OAuthAuth.AuthorizationCode at 0x104f59b20>)>}
2025-03-25 13:34:50 | DEBUG | authprovider: created auth provider (MyOAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: creating class (BaseCustomAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing base class (BaseAuth) for (BaseCustomAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: base (BaseAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104ea7380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104ea7420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104ea74c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104ea7560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104ea7600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104ea76a0>)>}
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (getmetadata) from (BaseAuth) to (BaseCustomAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (setmetadata) from (BaseAuth) to (BaseCustomAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (BaseAuth) to (BaseCustomAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (BaseAuth) to (BaseCustomAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (BaseAuth) to (BaseCustomAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (findmetadata) from (BaseAuth) to (BaseCustomAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attributes for (BaseCustomAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attribute (shared) with value (base) for (BaseCustomAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attribute (overridden) with value (base) for (BaseCustomAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: calling _processclassattributes for (BaseCustomAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: _processclassattributes completed for (BaseCustomAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: completed creation of (BaseCustomAuth) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104ea7380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104ea7420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104ea74c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104ea7560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104ea7600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104ea76a0>)>, 'shared': 'base', 'overridden': 'base'}
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: creating class (ChildCustomAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing base class (BaseCustomAuth) for (ChildCustomAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: base (BaseCustomAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104ea7380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104ea7420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104ea74c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104ea7560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104ea7600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104ea76a0>)>, 'shared': 'base', 'overridden': 'base'}
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (getmetadata) from (BaseCustomAuth) to (ChildCustomAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (setmetadata) from (BaseCustomAuth) to (ChildCustomAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (BaseCustomAuth) to (ChildCustomAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (BaseCustomAuth) to (ChildCustomAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (BaseCustomAuth) to (ChildCustomAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (findmetadata) from (BaseCustomAuth) to (ChildCustomAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (shared) from (BaseCustomAuth) to (ChildCustomAuth) - cancopy: True
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (overridden) from (BaseCustomAuth) to (ChildCustomAuth) - cancopy: True
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attributes for (ChildCustomAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attribute (overridden) with value (child) for (ChildCustomAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attribute (new) with value (child) for (ChildCustomAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: calling _processclassattributes for (ChildCustomAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: _processclassattributes completed for (ChildCustomAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: completed creation of (ChildCustomAuth) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104ea7380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104ea7420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104ea74c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104ea7560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104ea7600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104ea76a0>)>, 'shared': 'base', 'overridden': 'child', 'new': 'child'}
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: creating class (ConfigurableAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing base class (object) for (ConfigurableAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing base class (APIKeyAuth) for (ConfigurableAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: base (APIKeyAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104ea7380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104ea7420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104ea74c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104ea7560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104ea7600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104ea76a0>)>, 'key': '', 'name': 'X-API-Key', 'location': <KeyLocation.HEADER: 'header'>, 'prefix': None, 'Header': <classmethod(<function APIKeyAuth.Header at 0x104f58b80>)>, 'Query': <classmethod(<function APIKeyAuth.Query at 0x104f58c20>)>, 'Cookie': <classmethod(<function APIKeyAuth.Cookie at 0x104f58cc0>)>}
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (getmetadata) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (setmetadata) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (findmetadata) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (key) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: True
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (location) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: True
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (prefix) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: True
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (Header) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (Query) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (Cookie) from (APIKeyAuth) to (ConfigurableAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attributes for (ConfigurableAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attribute (key) with value (default) for (ConfigurableAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attribute (name) with value (X-API-Key) for (ConfigurableAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attribute (location) with value (KeyLocation.HEADER) for (ConfigurableAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: calling _processclassattributes for (ConfigurableAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: _processclassattributes completed for (ConfigurableAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: completed creation of (ConfigurableAuth) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104ea7380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104ea7420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104ea74c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104ea7560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104ea7600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104ea76a0>)>, 'key': 'default', 'location': <KeyLocation.HEADER: 'header'>, 'prefix': None, 'Header': <classmethod(<function APIKeyAuth.Header at 0x104f58b80>)>, 'Query': <classmethod(<function APIKeyAuth.Query at 0x104f58c20>)>, 'Cookie': <classmethod(<function APIKeyAuth.Cookie at 0x104f58cc0>)>, 'name': 'X-API-Key'}
2025-03-25 13:34:50 | DEBUG | authprovider: created auth provider (ConfigurableAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: creating class (MetadataAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing base class (BaseAuth) for (MetadataAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: base (BaseAuth) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104ea7380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104ea7420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104ea74c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104ea7560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104ea7600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104ea76a0>)>}
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (getmetadata) from (BaseAuth) to (MetadataAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (setmetadata) from (BaseAuth) to (MetadataAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (BaseAuth) to (MetadataAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (BaseAuth) to (MetadataAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (BaseAuth) to (MetadataAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: copying (findmetadata) from (BaseAuth) to (MetadataAuth) - cancopy: False
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attributes for (MetadataAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: processing attribute (test_value) with value (original) for (MetadataAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: calling _processclassattributes for (MetadataAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: _processclassattributes completed for (MetadataAuth)
2025-03-25 13:34:50 | DEBUG | DeclarativeMeta: completed creation of (MetadataAuth) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104ea7380>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104ea7420>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104ea74c0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104ea7560>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104ea7600>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x104ea76a0>)>, 'test_value': 'original'}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing base class (object) for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing base class (Client) for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: base (Client) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'baseurl': '', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x10712c540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x10712c5e0>)>, 'resources': {}}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (components) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (methods) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (baseurl) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (auth) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (config) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getresources) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getbaseurl) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (resources) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing attribute (baseurl) with value (https://api.test.com) for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (baseurl) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__dict__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__dict__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__weakref__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__weakref__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'baseurl': 'https://api.test.com', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x10712c540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x10712c5e0>)>, 'resources': {}}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'baseurl': 'https://api.test.com', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x10712c540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x10712c5e0>)>, 'resources': {}}
2025-03-25 15:12:23 | DEBUG | client: converted (TestClient) to declarative client
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing base class (object) for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing base class (Client) for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: base (Client) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'baseurl': '', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x10712c540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x10712c5e0>)>, 'resources': {}}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (components) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (methods) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (baseurl) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (auth) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (config) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getresources) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getbaseurl) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (resources) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing attribute (baseurl) with value (https://api.example.com) for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__dict__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__dict__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__weakref__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__weakref__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (baseurl) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'baseurl': 'https://api.example.com', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x10712c540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x10712c5e0>)>, 'resources': {}}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'baseurl': 'https://api.example.com', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x10712c540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x10712c5e0>)>, 'resources': {}}
2025-03-25 15:12:23 | DEBUG | client: converted (TestClient) to declarative client
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: creating class (Users)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing base class (object) for (Users)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing base class (Resource) for (Users)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: base (Resource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'path': '', 'name': 'resource', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x106fc8fe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106fc9080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106fc9120>)>}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Resource) to (Users) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Resource) to (Users) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Resource) to (Users) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Resource) to (Users) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Resource) to (Users) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Resource) to (Users) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (components) from (Resource) to (Users) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (methods) from (Resource) to (Users) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (path) from (Resource) to (Users) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getfullpath) from (Resource) to (Users) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getmethods) from (Resource) to (Users) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getnestedresources) from (Resource) to (Users) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing attributes for (Users)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing attribute (path) with value (users) for (Users)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: set resource name (users) for: Users
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: calling _processclassattributes for (Users)
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: starting attribute processing for (Users)
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: current metadata before processing: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'path': 'users', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x106fc8fe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106fc9080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106fc9120>)>, 'name': 'users'}
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: name already set to (users) for: Users
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Users
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: starting attribute processing for (Users)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (Users)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (Users)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (path) on (Users)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (Users)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__dict__) on (Users)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__dict__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__weakref__) on (Users)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__weakref__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (Users)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (Users)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: completed processing for (Users) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'path': 'users', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x106fc8fe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106fc9080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106fc9120>)>, 'name': 'users'}
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Users
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: metadata after super(): {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'path': 'users', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x106fc8fe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106fc9080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106fc9120>)>, 'name': 'users'}
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: completed processing for (Users) - final metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'path': 'users', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x106fc8fe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106fc9080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106fc9120>)>, 'name': 'users'}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: _processclassattributes completed for (Users)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: completed creation of (Users) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'path': 'users', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x106fc8fe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106fc9080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106fc9120>)>, 'name': 'users'}
2025-03-25 15:12:23 | DEBUG | resource: created resource (Users) with path: users
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: creating class (SpecializedResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing base class (Resource) for (SpecializedResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: base (Resource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'path': '', 'name': 'resource', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x106fc8fe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106fc9080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106fc9120>)>}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Resource) to (SpecializedResource) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Resource) to (SpecializedResource) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Resource) to (SpecializedResource) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Resource) to (SpecializedResource) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Resource) to (SpecializedResource) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Resource) to (SpecializedResource) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (components) from (Resource) to (SpecializedResource) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (methods) from (Resource) to (SpecializedResource) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (path) from (Resource) to (SpecializedResource) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getfullpath) from (Resource) to (SpecializedResource) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getmethods) from (Resource) to (SpecializedResource) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getnestedresources) from (Resource) to (SpecializedResource) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing attributes for (SpecializedResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: set resource name (specializedresource) for: SpecializedResource
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: calling _processclassattributes for (SpecializedResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: starting attribute processing for (SpecializedResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: current metadata before processing: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x106fc8fe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106fc9080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106fc9120>)>, 'name': 'specializedresource'}
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: name already set to (specializedresource) for: SpecializedResource
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: SpecializedResource
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: starting attribute processing for (SpecializedResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (SpecializedResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (SpecializedResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (SpecializedResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__init__) on (SpecializedResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__init__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (_setupspecialized) on (SpecializedResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: found callable (_setupspecialized) on: SpecializedResource
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (_processattributes) on (SpecializedResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: found callable (_processattributes) on: SpecializedResource
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (withconfig) on (SpecializedResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: found callable (withconfig) on: SpecializedResource
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (SpecializedResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (SpecializedResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: completed processing for (SpecializedResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x106fc8fe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106fc9080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106fc9120>)>, 'name': 'specializedresource'}
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: SpecializedResource
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: metadata after super(): {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x106fc8fe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106fc9080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106fc9120>)>, 'name': 'specializedresource'}
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: completed processing for (SpecializedResource) - final metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x106fc8fe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106fc9080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106fc9120>)>, 'name': 'specializedresource'}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: _processclassattributes completed for (SpecializedResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: completed creation of (SpecializedResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x106fc8fe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106fc9080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106fc9120>)>, 'name': 'specializedresource'}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: creating class (SearchResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing base class (SpecializedResource) for (SearchResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: base (SpecializedResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x106fc8fe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106fc9080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106fc9120>)>, 'name': 'specializedresource'}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getmetadata) from (SpecializedResource) to (SearchResource) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (setmetadata) from (SpecializedResource) to (SearchResource) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (SpecializedResource) to (SearchResource) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (SpecializedResource) to (SearchResource) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (SpecializedResource) to (SearchResource) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (findmetadata) from (SpecializedResource) to (SearchResource) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (components) from (SpecializedResource) to (SearchResource) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (methods) from (SpecializedResource) to (SearchResource) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (path) from (SpecializedResource) to (SearchResource) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getfullpath) from (SpecializedResource) to (SearchResource) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getmethods) from (SpecializedResource) to (SearchResource) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getnestedresources) from (SpecializedResource) to (SearchResource) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing attributes for (SearchResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing attribute (requestmethod) with value (RequestMethod.GET) for (SearchResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing attribute (payload) with value (None) for (SearchResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: calling _processclassattributes for (SearchResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: starting attribute processing for (SearchResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: current metadata before processing: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x106fc8fe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106fc9080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106fc9120>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None}
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: set name to (searchresource) for: SearchResource
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: SearchResource
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: starting attribute processing for (SearchResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (SearchResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (SearchResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__annotations__) on (SearchResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__annotations__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (SearchResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__declarativetype__) on (SearchResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__declarativetype__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (requestmethod) on (SearchResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (payload) on (SearchResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__init__) on (SearchResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__init__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (_processattributes) on (SearchResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: found callable (_processattributes) on: SearchResource
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (_setupspecialized) on (SearchResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: found callable (_setupspecialized) on: SearchResource
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (SearchResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (SearchResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: completed processing for (SearchResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x106fc8fe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106fc9080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106fc9120>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None, 'name': 'searchresource'}
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: SearchResource
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: metadata after super(): {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x106fc8fe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106fc9080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106fc9120>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None, 'name': 'searchresource'}
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: completed processing for (SearchResource) - final metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x106fc8fe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106fc9080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106fc9120>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None, 'name': 'searchresource'}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: _processclassattributes completed for (SearchResource)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: completed creation of (SearchResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x106fc8fe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106fc9080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106fc9120>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None, 'name': 'searchresource'}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: creating class (Search)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing base class (object) for (Search)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing base class (SearchResource) for (Search)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: base (SearchResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x106fc8fe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106fc9080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106fc9120>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None, 'name': 'searchresource'}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getmetadata) from (SearchResource) to (Search) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (setmetadata) from (SearchResource) to (Search) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (SearchResource) to (Search) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (SearchResource) to (Search) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (SearchResource) to (Search) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (findmetadata) from (SearchResource) to (Search) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (components) from (SearchResource) to (Search) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (methods) from (SearchResource) to (Search) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (path) from (SearchResource) to (Search) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getfullpath) from (SearchResource) to (Search) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getmethods) from (SearchResource) to (Search) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getnestedresources) from (SearchResource) to (Search) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (requestmethod) from (SearchResource) to (Search) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (payload) from (SearchResource) to (Search) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing attributes for (Search)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing attribute (path) with value (search) for (Search)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: calling _processclassattributes for (Search)
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: starting attribute processing for (Search)
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: current metadata before processing: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'path': 'search', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x106fc8fe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106fc9080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106fc9120>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None}
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: set name to (search) for: Search
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Search
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: starting attribute processing for (Search)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (Search)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (Search)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (path) on (Search)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (Search)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__dict__) on (Search)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__dict__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__weakref__) on (Search)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__weakref__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (Search)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (Search)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: completed processing for (Search) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'path': 'search', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x106fc8fe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106fc9080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106fc9120>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None, 'name': 'search'}
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Search
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: metadata after super(): {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'path': 'search', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x106fc8fe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106fc9080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106fc9120>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None, 'name': 'search'}
2025-03-25 15:12:23 | DEBUG | DeclarativeResource: completed processing for (Search) - final metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'path': 'search', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x106fc8fe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106fc9080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106fc9120>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None, 'name': 'search'}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: _processclassattributes completed for (Search)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: completed creation of (Search) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'path': 'search', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x106fc8fe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106fc9080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106fc9120>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None, 'name': 'search'}
2025-03-25 15:12:23 | DEBUG | resource: created resource (Search) with path: search
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing base class (object) for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing base class (Client) for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: base (Client) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'baseurl': '', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x10712c540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x10712c5e0>)>, 'resources': {}}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (components) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (methods) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (baseurl) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (auth) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (config) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getresources) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getbaseurl) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (resources) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing attribute (baseurl) with value (https://api.test.com) for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (baseurl) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (Users) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: found class (Users) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: class (Users) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'path': 'users', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x106fc8fe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106fc9080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106fc9120>)>, 'name': 'users'}
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: registered component (users) on: TestClient
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (Search) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: found class (Search) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: class (Search) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'path': 'search', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x106fc8fe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x106fc9080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x106fc9120>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None, 'name': 'search'}
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: registered component (search) on: TestClient
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__dict__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__dict__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__weakref__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__weakref__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {'users': <class 'test_declarative.Users'>, 'search': <class 'test_declarative.Search'>}, 'methods': {}, 'baseurl': 'https://api.test.com', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x10712c540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x10712c5e0>)>, 'resources': {}}
2025-03-25 15:12:23 | DEBUG | DeclarativeClient: found resource (users) on: TestClient
2025-03-25 15:12:23 | DEBUG | DeclarativeClient: found resource (search) on: TestClient
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {'users': <class 'test_declarative.Users'>, 'search': <class 'test_declarative.Search'>}, 'methods': {}, 'baseurl': 'https://api.test.com', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x10712c540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x10712c5e0>)>, 'resources': {'users': <class 'test_declarative.Users'>, 'search': <class 'test_declarative.Search'>}}
2025-03-25 15:12:23 | DEBUG | client: converted (TestClient) to declarative client
2025-03-25 15:12:23 | DEBUG | Initializing client with baseurl: None
2025-03-25 15:12:23 | DEBUG | Initial config baseurl: https://api.test.com
2025-03-25 15:12:23 | DEBUG | Final baseurl: https://api.test.com
2025-03-25 15:12:23 | DEBUG | Final config.baseurl: https://api.test.com
2025-03-25 15:12:23 | DEBUG | Creating session
2025-03-25 15:12:23 | DEBUG | Initializing Session
2025-03-25 15:12:23 | DEBUG | Creating requests.Session
2025-03-25 15:12:23 | DEBUG | Setting session headers: {}
2025-03-25 15:12:23 | DEBUG | Setting session cookies: {}
2025-03-25 15:12:23 | DEBUG | Setting SSL verification: True
2025-03-25 15:12:23 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 15:12:23 | DEBUG | Discovering resources
2025-03-25 15:12:23 | DEBUG | Found resource class: Search
2025-03-25 15:12:23 | DEBUG | Using specialized resource type: SearchResource
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing base class (BaseClient) for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing base class (Client) for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: base (Client) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'baseurl': '', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x10712c540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x10712c5e0>)>, 'resources': {}}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (components) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (methods) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (baseurl) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (auth) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (config) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getresources) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getbaseurl) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (resources) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'baseurl': '', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x10712c540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x10712c5e0>)>, 'resources': {}}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'baseurl': '', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x10712c540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x10712c5e0>)>, 'resources': {}}
2025-03-25 15:12:23 | DEBUG | client: converted (TestClient) to declarative client
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing base class (object) for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing base class (Client) for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: base (Client) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'baseurl': '', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x10712c540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x10712c5e0>)>, 'resources': {}}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (components) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (methods) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (baseurl) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (auth) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (config) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getresources) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (getbaseurl) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: copying (resources) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: processing attribute (baseurl) with value (https://api.test.com) for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (baseurl) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__dict__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__dict__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__weakref__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__weakref__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 15:12:23 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'baseurl': 'https://api.test.com', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x10712c540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x10712c5e0>)>, 'resources': {}}
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestClient)
2025-03-25 15:12:23 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106fb7d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106fb7e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106fb7ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106fb7f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106fc8040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106fc80e0>)>, 'components': {}, 'methods': {}, 'baseurl': 'https://api.test.com', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x10712c540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x10712c5e0>)>, 'resources': {}}
2025-03-25 15:12:23 | DEBUG | client: converted (TestClient) to declarative client
2025-03-25 15:12:23 | DEBUG | Initializing client with baseurl: None
2025-03-25 15:12:23 | DEBUG | Initial config baseurl: https://api.test.com
2025-03-25 15:12:23 | DEBUG | Final baseurl: https://api.test.com
2025-03-25 15:12:23 | DEBUG | Final config.baseurl: https://api.test.com
2025-03-25 15:12:23 | DEBUG | Creating session
2025-03-25 15:12:23 | DEBUG | Initializing Session
2025-03-25 15:12:23 | DEBUG | Creating requests.Session
2025-03-25 15:12:23 | DEBUG | Setting session headers: {}
2025-03-25 15:12:23 | DEBUG | Setting session cookies: {}
2025-03-25 15:12:23 | DEBUG | Setting SSL verification: True
2025-03-25 15:12:23 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 15:12:23 | DEBUG | Discovering resources
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing base class (object) for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing base class (Client) for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: base (Client) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'baseurl': '', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x102d80540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x102d805e0>)>, 'resources': {}}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (components) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (methods) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (baseurl) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (auth) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (config) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getresources) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getbaseurl) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (resources) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing attribute (baseurl) with value (https://api.test.com) for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (baseurl) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__dict__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__dict__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__weakref__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__weakref__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'baseurl': 'https://api.test.com', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x102d80540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x102d805e0>)>, 'resources': {}}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'baseurl': 'https://api.test.com', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x102d80540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x102d805e0>)>, 'resources': {}}
2025-03-25 15:17:45 | DEBUG | client: converted (TestClient) to declarative client
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing base class (object) for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing base class (Client) for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: base (Client) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'baseurl': '', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x102d80540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x102d805e0>)>, 'resources': {}}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (components) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (methods) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (baseurl) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (auth) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (config) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getresources) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getbaseurl) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (resources) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing attribute (baseurl) with value (https://api.example.com) for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__dict__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__dict__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__weakref__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__weakref__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (baseurl) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'baseurl': 'https://api.example.com', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x102d80540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x102d805e0>)>, 'resources': {}}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'baseurl': 'https://api.example.com', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x102d80540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x102d805e0>)>, 'resources': {}}
2025-03-25 15:17:45 | DEBUG | client: converted (TestClient) to declarative client
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: creating class (Users)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing base class (object) for (Users)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing base class (Resource) for (Users)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: base (Resource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'path': '', 'name': 'resource', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102c1cfe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102c1d080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102c1d120>)>}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Resource) to (Users) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Resource) to (Users) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Resource) to (Users) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Resource) to (Users) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Resource) to (Users) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Resource) to (Users) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (components) from (Resource) to (Users) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (methods) from (Resource) to (Users) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (path) from (Resource) to (Users) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getfullpath) from (Resource) to (Users) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getmethods) from (Resource) to (Users) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getnestedresources) from (Resource) to (Users) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing attributes for (Users)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing attribute (path) with value (users) for (Users)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: set resource name (users) for: Users
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: calling _processclassattributes for (Users)
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: starting attribute processing for (Users)
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: current metadata before processing: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'path': 'users', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102c1cfe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102c1d080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102c1d120>)>, 'name': 'users'}
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: name already set to (users) for: Users
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Users
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: starting attribute processing for (Users)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (Users)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (Users)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (path) on (Users)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (Users)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__dict__) on (Users)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__dict__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__weakref__) on (Users)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__weakref__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (Users)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (Users)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: completed processing for (Users) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'path': 'users', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102c1cfe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102c1d080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102c1d120>)>, 'name': 'users'}
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Users
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: metadata after super(): {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'path': 'users', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102c1cfe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102c1d080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102c1d120>)>, 'name': 'users'}
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: completed processing for (Users) - final metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'path': 'users', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102c1cfe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102c1d080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102c1d120>)>, 'name': 'users'}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: _processclassattributes completed for (Users)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: completed creation of (Users) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'path': 'users', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102c1cfe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102c1d080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102c1d120>)>, 'name': 'users'}
2025-03-25 15:17:45 | DEBUG | resource: created resource (Users) with path: users
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: creating class (SpecializedResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing base class (Resource) for (SpecializedResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: base (Resource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'path': '', 'name': 'resource', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102c1cfe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102c1d080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102c1d120>)>}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Resource) to (SpecializedResource) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Resource) to (SpecializedResource) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Resource) to (SpecializedResource) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Resource) to (SpecializedResource) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Resource) to (SpecializedResource) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Resource) to (SpecializedResource) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (components) from (Resource) to (SpecializedResource) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (methods) from (Resource) to (SpecializedResource) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (path) from (Resource) to (SpecializedResource) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getfullpath) from (Resource) to (SpecializedResource) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getmethods) from (Resource) to (SpecializedResource) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getnestedresources) from (Resource) to (SpecializedResource) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing attributes for (SpecializedResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: set resource name (specializedresource) for: SpecializedResource
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: calling _processclassattributes for (SpecializedResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: starting attribute processing for (SpecializedResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: current metadata before processing: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102c1cfe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102c1d080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102c1d120>)>, 'name': 'specializedresource'}
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: name already set to (specializedresource) for: SpecializedResource
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: SpecializedResource
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: starting attribute processing for (SpecializedResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (SpecializedResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (SpecializedResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (SpecializedResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__init__) on (SpecializedResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__init__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (_setupspecialized) on (SpecializedResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: found callable (_setupspecialized) on: SpecializedResource
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (_processattributes) on (SpecializedResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: found callable (_processattributes) on: SpecializedResource
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (withconfig) on (SpecializedResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: found callable (withconfig) on: SpecializedResource
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (SpecializedResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (SpecializedResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: completed processing for (SpecializedResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102c1cfe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102c1d080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102c1d120>)>, 'name': 'specializedresource'}
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: SpecializedResource
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: metadata after super(): {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102c1cfe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102c1d080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102c1d120>)>, 'name': 'specializedresource'}
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: completed processing for (SpecializedResource) - final metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102c1cfe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102c1d080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102c1d120>)>, 'name': 'specializedresource'}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: _processclassattributes completed for (SpecializedResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: completed creation of (SpecializedResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102c1cfe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102c1d080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102c1d120>)>, 'name': 'specializedresource'}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: creating class (SearchResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing base class (SpecializedResource) for (SearchResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: base (SpecializedResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102c1cfe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102c1d080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102c1d120>)>, 'name': 'specializedresource'}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getmetadata) from (SpecializedResource) to (SearchResource) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (setmetadata) from (SpecializedResource) to (SearchResource) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (SpecializedResource) to (SearchResource) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (SpecializedResource) to (SearchResource) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (SpecializedResource) to (SearchResource) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (findmetadata) from (SpecializedResource) to (SearchResource) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (components) from (SpecializedResource) to (SearchResource) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (methods) from (SpecializedResource) to (SearchResource) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (path) from (SpecializedResource) to (SearchResource) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getfullpath) from (SpecializedResource) to (SearchResource) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getmethods) from (SpecializedResource) to (SearchResource) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getnestedresources) from (SpecializedResource) to (SearchResource) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing attributes for (SearchResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing attribute (requestmethod) with value (RequestMethod.GET) for (SearchResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing attribute (payload) with value (None) for (SearchResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: calling _processclassattributes for (SearchResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: starting attribute processing for (SearchResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: current metadata before processing: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102c1cfe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102c1d080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102c1d120>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None}
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: set name to (searchresource) for: SearchResource
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: SearchResource
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: starting attribute processing for (SearchResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (SearchResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (SearchResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__annotations__) on (SearchResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__annotations__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (SearchResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__declarativetype__) on (SearchResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__declarativetype__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (requestmethod) on (SearchResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (payload) on (SearchResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__init__) on (SearchResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__init__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (_processattributes) on (SearchResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: found callable (_processattributes) on: SearchResource
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (_setupspecialized) on (SearchResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: found callable (_setupspecialized) on: SearchResource
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (SearchResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (SearchResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: completed processing for (SearchResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102c1cfe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102c1d080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102c1d120>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None, 'name': 'searchresource'}
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: SearchResource
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: metadata after super(): {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102c1cfe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102c1d080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102c1d120>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None, 'name': 'searchresource'}
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: completed processing for (SearchResource) - final metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102c1cfe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102c1d080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102c1d120>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None, 'name': 'searchresource'}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: _processclassattributes completed for (SearchResource)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: completed creation of (SearchResource) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102c1cfe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102c1d080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102c1d120>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None, 'name': 'searchresource'}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: creating class (Search)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing base class (object) for (Search)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing base class (SearchResource) for (Search)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: base (SearchResource) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'path': '', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102c1cfe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102c1d080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102c1d120>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None, 'name': 'searchresource'}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getmetadata) from (SearchResource) to (Search) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (setmetadata) from (SearchResource) to (Search) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (SearchResource) to (Search) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (SearchResource) to (Search) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (SearchResource) to (Search) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (findmetadata) from (SearchResource) to (Search) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (components) from (SearchResource) to (Search) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (methods) from (SearchResource) to (Search) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (path) from (SearchResource) to (Search) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getfullpath) from (SearchResource) to (Search) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getmethods) from (SearchResource) to (Search) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getnestedresources) from (SearchResource) to (Search) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (requestmethod) from (SearchResource) to (Search) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (payload) from (SearchResource) to (Search) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing attributes for (Search)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing attribute (path) with value (search) for (Search)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: calling _processclassattributes for (Search)
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: starting attribute processing for (Search)
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: current metadata before processing: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'path': 'search', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102c1cfe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102c1d080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102c1d120>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None}
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: set name to (search) for: Search
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: calling super()._processclassattributes for: Search
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: starting attribute processing for (Search)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (Search)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (Search)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (path) on (Search)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (Search)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__dict__) on (Search)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__dict__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__weakref__) on (Search)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__weakref__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (Search)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (Search)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: completed processing for (Search) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'path': 'search', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102c1cfe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102c1d080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102c1d120>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None, 'name': 'search'}
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: returned from super()._processclassattributes for: Search
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: metadata after super(): {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'path': 'search', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102c1cfe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102c1d080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102c1d120>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None, 'name': 'search'}
2025-03-25 15:17:45 | DEBUG | DeclarativeResource: completed processing for (Search) - final metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'path': 'search', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102c1cfe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102c1d080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102c1d120>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None, 'name': 'search'}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: _processclassattributes completed for (Search)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: completed creation of (Search) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'path': 'search', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102c1cfe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102c1d080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102c1d120>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None, 'name': 'search'}
2025-03-25 15:17:45 | DEBUG | resource: created resource (Search) with path: search
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing base class (object) for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing base class (Client) for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: base (Client) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'baseurl': '', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x102d80540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x102d805e0>)>, 'resources': {}}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (components) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (methods) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (baseurl) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (auth) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (config) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getresources) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getbaseurl) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (resources) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing attribute (baseurl) with value (https://api.test.com) for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (baseurl) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (Users) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: found class (Users) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: class (Users) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'path': 'users', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102c1cfe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102c1d080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102c1d120>)>, 'name': 'users'}
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: registered component (users) on: TestClient
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (Search) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: found class (Search) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: class (Search) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'path': 'search', 'getfullpath': <classmethod(<function Resource.getfullpath at 0x102c1cfe0>)>, 'getmethods': <classmethod(<function Resource.getmethods at 0x102c1d080>)>, 'getnestedresources': <classmethod(<function Resource.getnestedresources at 0x102c1d120>)>, 'requestmethod': <RequestMethod.GET: 'GET'>, 'payload': None, 'name': 'search'}
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: registered component (search) on: TestClient
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__dict__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__dict__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__weakref__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__weakref__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {'users': <class 'test_declarative.Users'>, 'search': <class 'test_declarative.Search'>}, 'methods': {}, 'baseurl': 'https://api.test.com', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x102d80540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x102d805e0>)>, 'resources': {}}
2025-03-25 15:17:45 | DEBUG | DeclarativeClient: found resource (users) on: TestClient
2025-03-25 15:17:45 | DEBUG | DeclarativeClient: found resource (search) on: TestClient
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {'users': <class 'test_declarative.Users'>, 'search': <class 'test_declarative.Search'>}, 'methods': {}, 'baseurl': 'https://api.test.com', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x102d80540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x102d805e0>)>, 'resources': {'users': <class 'test_declarative.Users'>, 'search': <class 'test_declarative.Search'>}}
2025-03-25 15:17:45 | DEBUG | client: converted (TestClient) to declarative client
2025-03-25 15:17:45 | DEBUG | Initializing client with baseurl: None
2025-03-25 15:17:45 | DEBUG | Initial config baseurl: https://api.test.com
2025-03-25 15:17:45 | DEBUG | Final baseurl: https://api.test.com
2025-03-25 15:17:45 | DEBUG | Final config.baseurl: https://api.test.com
2025-03-25 15:17:45 | DEBUG | Creating session
2025-03-25 15:17:45 | DEBUG | Initializing Session
2025-03-25 15:17:45 | DEBUG | Creating requests.Session
2025-03-25 15:17:45 | DEBUG | Setting session headers: {}
2025-03-25 15:17:45 | DEBUG | Setting session cookies: {}
2025-03-25 15:17:45 | DEBUG | Setting SSL verification: True
2025-03-25 15:17:45 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 15:17:45 | DEBUG | Discovering resources
2025-03-25 15:17:45 | DEBUG | Found resource class: Search
2025-03-25 15:17:45 | DEBUG | Using specialized resource type: SearchResource
2025-03-25 15:17:45 | DEBUG | Initializing resource: None with path: search
2025-03-25 15:17:45 | DEBUG | Resource parent: <test_declarative.TestClient object at 0x102d96ba0>
2025-03-25 15:17:45 | DEBUG | Adding default search method
2025-03-25 15:17:45 | DEBUG | Found resource class: Users
2025-03-25 15:17:45 | DEBUG | Registering resource class: Users
2025-03-25 15:17:45 | DEBUG | Resource config: Users, path: users
2025-03-25 15:17:45 | DEBUG | Set resource parent to client: <test_declarative.TestClient object at 0x102d96ba0>
2025-03-25 15:17:45 | DEBUG | Resource attribute name: users
2025-03-25 15:17:45 | DEBUG | Initializing resource: Users with path: users
2025-03-25 15:17:45 | DEBUG | Setting resource parent to client
2025-03-25 15:17:45 | DEBUG | Resource parent set to: <test_declarative.TestClient object at 0x102d96ba0>
2025-03-25 15:17:45 | DEBUG | Initializing resource: Users with path: users
2025-03-25 15:17:45 | DEBUG | Resource parent: <test_declarative.TestClient object at 0x102d96ba0>
2025-03-25 15:17:45 | DEBUG | Resource initialized: <clientfactory.core.resource.Resource object at 0x102d97a10>
2025-03-25 15:17:45 | DEBUG | Resource registered and bound to attribute: users
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing base class (BaseClient) for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing base class (Client) for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: base (Client) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'baseurl': '', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x102d80540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x102d805e0>)>, 'resources': {}}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (components) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (methods) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (baseurl) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (auth) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (config) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getresources) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getbaseurl) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (resources) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing attribute (baseurl) with value (https://api.base.com) for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (baseurl) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'baseurl': 'https://api.base.com', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x102d80540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x102d805e0>)>, 'resources': {}}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'baseurl': 'https://api.base.com', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x102d80540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x102d805e0>)>, 'resources': {}}
2025-03-25 15:17:45 | DEBUG | client: converted (TestClient) to declarative client
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: creating class (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing base class (object) for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing base class (Client) for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: base (Client) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'baseurl': '', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x102d80540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x102d805e0>)>, 'resources': {}}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (components) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (methods) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (baseurl) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (auth) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (config) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getresources) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (getbaseurl) from (Client) to (TestClient) - cancopy: False
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: copying (resources) from (Client) to (TestClient) - cancopy: True
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing attributes for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: processing attribute (baseurl) with value (https://api.test.com) for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: starting attribute processing for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__module__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__module__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__firstlineno__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__firstlineno__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (baseurl) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__static_attributes__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__static_attributes__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__dict__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__dict__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__weakref__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__weakref__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__doc__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__doc__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: examining attribute (__metadata__) on (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: skipping special attribute (__metadata__)
2025-03-25 15:17:45 | DEBUG | DeclarativeContainer: completed processing for (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'baseurl': 'https://api.test.com', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x102d80540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x102d805e0>)>, 'resources': {}}
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestClient)
2025-03-25 15:17:45 | DEBUG | DeclarativeMeta: completed creation of (TestClient) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102c0bd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102c0be20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102c0bec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102c0bf60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102c1c040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102c1c0e0>)>, 'components': {}, 'methods': {}, 'baseurl': 'https://api.test.com', 'auth': None, 'config': None, 'getresources': <classmethod(<function Client.getresources at 0x102d80540>)>, 'getbaseurl': <classmethod(<function Client.getbaseurl at 0x102d805e0>)>, 'resources': {}}
2025-03-25 15:17:45 | DEBUG | client: converted (TestClient) to declarative client
2025-03-25 15:17:45 | DEBUG | Initializing client with baseurl: None
2025-03-25 15:17:45 | DEBUG | Initial config baseurl: https://api.test.com
2025-03-25 15:17:45 | DEBUG | Final baseurl: https://api.test.com
2025-03-25 15:17:45 | DEBUG | Final config.baseurl: https://api.test.com
2025-03-25 15:17:45 | DEBUG | Creating session
2025-03-25 15:17:45 | DEBUG | Initializing Session
2025-03-25 15:17:45 | DEBUG | Creating requests.Session
2025-03-25 15:17:45 | DEBUG | Setting session headers: {}
2025-03-25 15:17:45 | DEBUG | Setting session cookies: {}
2025-03-25 15:17:45 | DEBUG | Setting SSL verification: True
2025-03-25 15:17:45 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 15:17:45 | DEBUG | Discovering resources
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing base class (object) for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing base class (StateStore) for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: base (StateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067dc360>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067dc400>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067dc4a0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067dc540>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067dc5e0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067dc680>)>, 'path': '', 'format': 'json'}
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (getmetadata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (setmetadata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (findmetadata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (path) from (StateStore) to (TestStore) - cancopy: True
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (format) from (StateStore) to (TestStore) - cancopy: True
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing attribute (path) with value (test.dat) for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067dc360>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067dc400>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067dc4a0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067dc540>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067dc5e0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067dc680>)>, 'path': 'test.dat', 'format': 'json'}
2025-03-25 17:55:37 | DEBUG | statestore: converted (TestStore) to declarative state store
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing base class (JSONStateStore) for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: base (JSONStateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067dc360>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067dc400>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067dc4a0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067dc540>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067dc5e0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067dc680>)>, 'path': '', 'format': 'json'}
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (getmetadata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (setmetadata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (findmetadata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (path) from (JSONStateStore) to (TestStore) - cancopy: True
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (format) from (JSONStateStore) to (TestStore) - cancopy: True
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing attribute (path) with value (test.json) for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067dc360>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067dc400>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067dc4a0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067dc540>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067dc5e0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067dc680>)>, 'path': 'test.json', 'format': 'json'}
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing base class (PickleStateStore) for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: base (PickleStateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067dc360>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067dc400>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067dc4a0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067dc540>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067dc5e0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067dc680>)>, 'path': '', 'format': 'pickle'}
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (getmetadata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (setmetadata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (findmetadata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (path) from (PickleStateStore) to (TestStore) - cancopy: True
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (format) from (PickleStateStore) to (TestStore) - cancopy: True
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing attribute (path) with value (test.pkl) for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067dc360>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067dc400>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067dc4a0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067dc540>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067dc5e0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067dc680>)>, 'path': 'test.pkl', 'format': 'pickle'}
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing base class (MemoryStateStore) for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: base (MemoryStateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067dc360>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067dc400>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067dc4a0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067dc540>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067dc5e0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067dc680>)>, 'path': '', 'format': 'memory'}
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (getmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (setmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (findmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (path) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (format) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067dc360>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067dc400>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067dc4a0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067dc540>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067dc5e0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067dc680>)>, 'path': '', 'format': 'memory'}
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing base class (MemoryStateStore) for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: base (MemoryStateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067dc360>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067dc400>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067dc4a0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067dc540>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067dc5e0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067dc680>)>, 'path': '', 'format': 'memory'}
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (getmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (setmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (findmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (path) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (format) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067dc360>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067dc400>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067dc4a0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067dc540>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067dc5e0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067dc680>)>, 'path': '', 'format': 'memory'}
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: creating class (TestManager)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing base class (object) for (TestManager)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing base class (StateManager) for (TestManager)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: base (StateManager) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067dc360>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067dc400>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067dc4a0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067dc540>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067dc5e0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067dc680>)>, 'store': None, 'autoload': True, 'autosave': True}
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (getmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (setmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (findmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (store) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (autoload) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (autosave) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing attributes for (TestManager)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing attribute (autoload) with value (True) for (TestManager)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing attribute (autosave) with value (True) for (TestManager)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing attribute (store) with value (<ClientFactory.tests.unit.session.test_decorators.TestStore object at 0x106afc050>) for (TestManager)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestManager)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestManager)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: completed creation of (TestManager) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067dc360>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067dc400>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067dc4a0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067dc540>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067dc5e0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067dc680>)>, 'store': <ClientFactory.tests.unit.session.test_decorators.TestStore object at 0x106afc050>, 'autoload': True, 'autosave': True}
2025-03-25 17:55:37 | DEBUG | statemanager: converted (TestManager) to state manager
2025-03-25 17:55:37 | DEBUG | Loaded state from TestStore
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing base class (MemoryStateStore) for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: base (MemoryStateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067dc360>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067dc400>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067dc4a0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067dc540>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067dc5e0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067dc680>)>, 'path': '', 'format': 'memory'}
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (getmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (setmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (findmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (path) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (format) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067dc360>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067dc400>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067dc4a0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067dc540>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067dc5e0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067dc680>)>, 'path': '', 'format': 'memory'}
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: creating class (TestManager)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing base class (object) for (TestManager)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing base class (StateManager) for (TestManager)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: base (StateManager) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067dc360>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067dc400>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067dc4a0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067dc540>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067dc5e0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067dc680>)>, 'store': None, 'autoload': True, 'autosave': True}
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (getmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (setmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (findmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (store) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (autoload) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: copying (autosave) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing attributes for (TestManager)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing attribute (autoload) with value (True) for (TestManager)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing attribute (autosave) with value (True) for (TestManager)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: processing attribute (store) with value (<ClientFactory.tests.unit.session.test_decorators.TestStore object at 0x106afcc20>) for (TestManager)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestManager)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestManager)
2025-03-25 17:55:37 | DEBUG | DeclarativeMeta: completed creation of (TestManager) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1067dc360>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1067dc400>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1067dc4a0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1067dc540>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1067dc5e0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1067dc680>)>, 'store': <ClientFactory.tests.unit.session.test_decorators.TestStore object at 0x106afcc20>, 'autoload': True, 'autosave': True}
2025-03-25 17:55:37 | DEBUG | statemanager: converted (TestManager) to state manager
2025-03-25 17:55:37 | DEBUG | Loaded state from TestStore
2025-03-25 17:55:37 | DEBUG | Initializing Session
2025-03-25 17:55:37 | DEBUG | Creating requests.Session
2025-03-25 17:55:37 | DEBUG | Setting session headers: {}
2025-03-25 17:55:37 | DEBUG | Setting session cookies: {}
2025-03-25 17:55:37 | DEBUG | Setting SSL verification: True
2025-03-25 17:55:37 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 17:55:37 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 17:55:37 | DEBUG | Initializing Session
2025-03-25 17:55:37 | DEBUG | Creating requests.Session
2025-03-25 17:55:37 | DEBUG | Setting session headers: {}
2025-03-25 17:55:37 | DEBUG | Setting session cookies: {}
2025-03-25 17:55:37 | DEBUG | Setting SSL verification: True
2025-03-25 17:55:37 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 17:55:37 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 17:55:37 | DEBUG | Initializing Session
2025-03-25 17:55:37 | DEBUG | Creating requests.Session
2025-03-25 17:55:37 | DEBUG | Setting session headers: {}
2025-03-25 17:55:37 | DEBUG | Setting session cookies: {}
2025-03-25 17:55:37 | DEBUG | Setting SSL verification: True
2025-03-25 17:55:37 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 17:55:37 | DEBUG | Saved state to MemoryStateStore
2025-03-25 17:55:37 | DEBUG | Closing session
2025-03-25 17:55:37 | DEBUG | Initializing Session
2025-03-25 17:55:37 | DEBUG | Creating requests.Session
2025-03-25 17:55:37 | DEBUG | Setting session headers: {}
2025-03-25 17:55:37 | DEBUG | Setting session cookies: {}
2025-03-25 17:55:37 | DEBUG | Setting SSL verification: True
2025-03-25 17:55:37 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 17:55:37 | DEBUG | Initializing Session
2025-03-25 17:55:37 | DEBUG | Creating requests.Session
2025-03-25 17:55:37 | DEBUG | Setting session headers: {'User-Agent': 'Test/1.0'}
2025-03-25 17:55:37 | DEBUG | Setting session cookies: {}
2025-03-25 17:55:37 | DEBUG | Setting SSL verification: False
2025-03-25 17:55:37 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 17:55:37 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 17:55:37 | DEBUG | Saved state to MemoryStateStore
2025-03-25 17:55:37 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 17:55:37 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 17:55:37 | DEBUG | Saved state to MemoryStateStore
2025-03-25 17:55:37 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 17:55:37 | DEBUG | Saved state to MemoryStateStore
2025-03-25 17:55:37 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 17:55:37 | DEBUG | Cleared state
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing base class (object) for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing base class (StateStore) for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: base (StateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102a17d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102a17e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102a17ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102a17f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102a28040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102a280e0>)>, 'path': '', 'format': 'json'}
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (getmetadata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (setmetadata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (findmetadata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (path) from (StateStore) to (TestStore) - cancopy: True
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (format) from (StateStore) to (TestStore) - cancopy: True
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing attribute (path) with value (test.dat) for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102a17d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102a17e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102a17ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102a17f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102a28040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102a280e0>)>, 'path': 'test.dat', 'format': 'json'}
2025-03-25 18:04:24 | DEBUG | statestore: converted (TestStore) to declarative state store
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing base class (JSONStateStore) for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: base (JSONStateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102a17d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102a17e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102a17ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102a17f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102a28040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102a280e0>)>, 'path': '', 'format': 'json'}
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (getmetadata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (setmetadata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (findmetadata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (path) from (JSONStateStore) to (TestStore) - cancopy: True
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (format) from (JSONStateStore) to (TestStore) - cancopy: True
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing attribute (path) with value (test.json) for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102a17d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102a17e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102a17ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102a17f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102a28040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102a280e0>)>, 'path': 'test.json', 'format': 'json'}
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing base class (PickleStateStore) for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: base (PickleStateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102a17d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102a17e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102a17ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102a17f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102a28040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102a280e0>)>, 'path': '', 'format': 'pickle'}
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (getmetadata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (setmetadata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (findmetadata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (path) from (PickleStateStore) to (TestStore) - cancopy: True
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (format) from (PickleStateStore) to (TestStore) - cancopy: True
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing attribute (path) with value (test.pkl) for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102a17d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102a17e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102a17ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102a17f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102a28040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102a280e0>)>, 'path': 'test.pkl', 'format': 'pickle'}
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing base class (MemoryStateStore) for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: base (MemoryStateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102a17d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102a17e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102a17ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102a17f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102a28040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102a280e0>)>, 'path': '', 'format': 'memory'}
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (getmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (setmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (findmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (path) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (format) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102a17d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102a17e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102a17ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102a17f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102a28040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102a280e0>)>, 'path': '', 'format': 'memory'}
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing base class (MemoryStateStore) for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: base (MemoryStateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102a17d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102a17e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102a17ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102a17f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102a28040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102a280e0>)>, 'path': '', 'format': 'memory'}
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (getmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (setmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (findmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (path) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (format) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102a17d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102a17e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102a17ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102a17f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102a28040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102a280e0>)>, 'path': '', 'format': 'memory'}
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: creating class (TestManager)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing base class (object) for (TestManager)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing base class (StateManager) for (TestManager)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: base (StateManager) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102a17d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102a17e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102a17ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102a17f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102a28040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102a280e0>)>, 'store': None, 'autoload': True, 'autosave': True}
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (getmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (setmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (findmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (store) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (autoload) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (autosave) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing attributes for (TestManager)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing attribute (autoload) with value (True) for (TestManager)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing attribute (autosave) with value (True) for (TestManager)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing attribute (store) with value (<ClientFactory.tests.unit.session.test_decorators.TestStore object at 0x102d382f0>) for (TestManager)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestManager)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestManager)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: completed creation of (TestManager) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102a17d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102a17e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102a17ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102a17f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102a28040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102a280e0>)>, 'store': <ClientFactory.tests.unit.session.test_decorators.TestStore object at 0x102d382f0>, 'autoload': True, 'autosave': True}
2025-03-25 18:04:24 | DEBUG | statemanager: converted (TestManager) to state manager
2025-03-25 18:04:24 | DEBUG | Loaded state from TestStore
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing base class (MemoryStateStore) for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: base (MemoryStateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102a17d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102a17e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102a17ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102a17f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102a28040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102a280e0>)>, 'path': '', 'format': 'memory'}
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (getmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (setmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (findmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (path) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (format) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102a17d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102a17e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102a17ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102a17f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102a28040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102a280e0>)>, 'path': '', 'format': 'memory'}
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: creating class (TestManager)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing base class (object) for (TestManager)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing base class (StateManager) for (TestManager)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: base (StateManager) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102a17d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102a17e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102a17ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102a17f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102a28040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102a280e0>)>, 'store': None, 'autoload': True, 'autosave': True}
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (getmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (setmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (findmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (store) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (autoload) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: copying (autosave) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing attributes for (TestManager)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing attribute (autoload) with value (True) for (TestManager)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing attribute (autosave) with value (True) for (TestManager)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: processing attribute (store) with value (<ClientFactory.tests.unit.session.test_decorators.TestStore object at 0x102d38ec0>) for (TestManager)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestManager)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestManager)
2025-03-25 18:04:24 | DEBUG | DeclarativeMeta: completed creation of (TestManager) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x102a17d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x102a17e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x102a17ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x102a17f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x102a28040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x102a280e0>)>, 'store': <ClientFactory.tests.unit.session.test_decorators.TestStore object at 0x102d38ec0>, 'autoload': True, 'autosave': True}
2025-03-25 18:04:24 | DEBUG | statemanager: converted (TestManager) to state manager
2025-03-25 18:04:24 | DEBUG | Loaded state from TestStore
2025-03-25 18:04:24 | DEBUG | Initializing Session
2025-03-25 18:04:24 | DEBUG | Creating requests.Session
2025-03-25 18:04:24 | DEBUG | Setting session headers: {}
2025-03-25 18:04:24 | DEBUG | Setting session cookies: {}
2025-03-25 18:04:24 | DEBUG | Setting SSL verification: True
2025-03-25 18:04:24 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 18:04:24 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:04:24 | DEBUG | Initializing Session
2025-03-25 18:04:24 | DEBUG | Creating requests.Session
2025-03-25 18:04:24 | DEBUG | Setting session headers: {}
2025-03-25 18:04:24 | DEBUG | Setting session cookies: {}
2025-03-25 18:04:24 | DEBUG | Setting SSL verification: True
2025-03-25 18:04:24 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 18:04:24 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:04:24 | DEBUG | Initializing Session
2025-03-25 18:04:24 | DEBUG | Creating requests.Session
2025-03-25 18:04:24 | DEBUG | Setting session headers: {}
2025-03-25 18:04:24 | DEBUG | Setting session cookies: {}
2025-03-25 18:04:24 | DEBUG | Setting SSL verification: True
2025-03-25 18:04:24 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 18:04:24 | DEBUG | Saved state to MemoryStateStore
2025-03-25 18:04:24 | DEBUG | Closing session
2025-03-25 18:04:24 | DEBUG | Initializing Session
2025-03-25 18:04:24 | DEBUG | Creating requests.Session
2025-03-25 18:04:24 | DEBUG | Setting session headers: {}
2025-03-25 18:04:24 | DEBUG | Setting session cookies: {}
2025-03-25 18:04:24 | DEBUG | Setting SSL verification: True
2025-03-25 18:04:24 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 18:04:24 | DEBUG | Initializing Session
2025-03-25 18:04:24 | DEBUG | Creating requests.Session
2025-03-25 18:04:24 | DEBUG | Setting session headers: {'User-Agent': 'Test/1.0'}
2025-03-25 18:04:24 | DEBUG | Setting session cookies: {}
2025-03-25 18:04:24 | DEBUG | Setting SSL verification: False
2025-03-25 18:04:24 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 18:04:24 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:04:24 | DEBUG | Saved state to MemoryStateStore
2025-03-25 18:04:24 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:04:24 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:04:24 | DEBUG | Saved state to MemoryStateStore
2025-03-25 18:04:24 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:04:24 | DEBUG | Saved state to MemoryStateStore
2025-03-25 18:04:24 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:04:24 | DEBUG | Cleared state
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing base class (object) for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing base class (StateStore) for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: base (StateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106691440>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1066914e0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106691580>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106691620>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1066916c0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106691760>)>, 'path': '', 'format': 'json'}
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (getmetadata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (setmetadata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (findmetadata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (path) from (StateStore) to (TestStore) - cancopy: True
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (format) from (StateStore) to (TestStore) - cancopy: True
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing attribute (path) with value (test.dat) for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106691440>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1066914e0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106691580>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106691620>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1066916c0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106691760>)>, 'path': 'test.dat', 'format': 'json'}
2025-03-25 18:10:20 | DEBUG | statestore: converted (TestStore) to declarative state store
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing base class (JSONStateStore) for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: base (JSONStateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106691440>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1066914e0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106691580>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106691620>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1066916c0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106691760>)>, 'path': '', 'format': 'json'}
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (getmetadata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (setmetadata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (findmetadata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (path) from (JSONStateStore) to (TestStore) - cancopy: True
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (format) from (JSONStateStore) to (TestStore) - cancopy: True
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing attribute (path) with value (test.json) for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106691440>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1066914e0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106691580>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106691620>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1066916c0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106691760>)>, 'path': 'test.json', 'format': 'json'}
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing base class (PickleStateStore) for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: base (PickleStateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106691440>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1066914e0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106691580>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106691620>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1066916c0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106691760>)>, 'path': '', 'format': 'pickle'}
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (getmetadata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (setmetadata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (findmetadata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (path) from (PickleStateStore) to (TestStore) - cancopy: True
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (format) from (PickleStateStore) to (TestStore) - cancopy: True
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing attribute (path) with value (test.pkl) for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106691440>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1066914e0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106691580>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106691620>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1066916c0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106691760>)>, 'path': 'test.pkl', 'format': 'pickle'}
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing base class (MemoryStateStore) for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: base (MemoryStateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106691440>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1066914e0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106691580>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106691620>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1066916c0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106691760>)>, 'path': '', 'format': 'memory'}
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (getmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (setmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (findmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (path) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (format) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106691440>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1066914e0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106691580>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106691620>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1066916c0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106691760>)>, 'path': '', 'format': 'memory'}
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing base class (MemoryStateStore) for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: base (MemoryStateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106691440>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1066914e0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106691580>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106691620>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1066916c0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106691760>)>, 'path': '', 'format': 'memory'}
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (getmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (setmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (findmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (path) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (format) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106691440>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1066914e0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106691580>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106691620>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1066916c0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106691760>)>, 'path': '', 'format': 'memory'}
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: creating class (TestManager)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing base class (object) for (TestManager)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing base class (StateManager) for (TestManager)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: base (StateManager) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106691440>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1066914e0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106691580>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106691620>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1066916c0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106691760>)>, 'store': None, 'autoload': True, 'autosave': True}
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (getmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (setmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (findmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (store) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (autoload) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (autosave) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing attributes for (TestManager)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing attribute (autoload) with value (True) for (TestManager)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing attribute (autosave) with value (True) for (TestManager)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing attribute (store) with value (<ClientFactory.tests.unit.session.test_decorators.TestStore object at 0x106896510>) for (TestManager)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestManager)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestManager)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: completed creation of (TestManager) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106691440>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1066914e0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106691580>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106691620>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1066916c0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106691760>)>, 'store': <ClientFactory.tests.unit.session.test_decorators.TestStore object at 0x106896510>, 'autoload': True, 'autosave': True}
2025-03-25 18:10:20 | DEBUG | statemanager: converted (TestManager) to state manager
2025-03-25 18:10:20 | DEBUG | Loaded state from TestStore
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing base class (MemoryStateStore) for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: base (MemoryStateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106691440>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1066914e0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106691580>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106691620>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1066916c0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106691760>)>, 'path': '', 'format': 'memory'}
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (getmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (setmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (findmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (path) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (format) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106691440>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1066914e0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106691580>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106691620>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1066916c0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106691760>)>, 'path': '', 'format': 'memory'}
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: creating class (TestManager)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing base class (object) for (TestManager)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing base class (StateManager) for (TestManager)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: base (StateManager) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106691440>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1066914e0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106691580>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106691620>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1066916c0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106691760>)>, 'store': None, 'autoload': True, 'autosave': True}
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (getmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (setmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (findmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (store) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (autoload) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: copying (autosave) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing attributes for (TestManager)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing attribute (autoload) with value (True) for (TestManager)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing attribute (autosave) with value (True) for (TestManager)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: processing attribute (store) with value (<ClientFactory.tests.unit.session.test_decorators.TestStore object at 0x1068970e0>) for (TestManager)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestManager)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestManager)
2025-03-25 18:10:20 | DEBUG | DeclarativeMeta: completed creation of (TestManager) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106691440>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1066914e0>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106691580>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106691620>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x1066916c0>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x106691760>)>, 'store': <ClientFactory.tests.unit.session.test_decorators.TestStore object at 0x1068970e0>, 'autoload': True, 'autosave': True}
2025-03-25 18:10:20 | DEBUG | statemanager: converted (TestManager) to state manager
2025-03-25 18:10:20 | DEBUG | Loaded state from TestStore
2025-03-25 18:10:20 | DEBUG | Initializing Session
2025-03-25 18:10:20 | DEBUG | Creating requests.Session
2025-03-25 18:10:20 | DEBUG | Setting session headers: {}
2025-03-25 18:10:20 | DEBUG | Setting session cookies: {}
2025-03-25 18:10:20 | DEBUG | Setting SSL verification: True
2025-03-25 18:10:20 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 18:10:20 | DEBUG | Initializing Session
2025-03-25 18:10:20 | DEBUG | Creating requests.Session
2025-03-25 18:10:20 | DEBUG | Setting session headers: {}
2025-03-25 18:10:20 | DEBUG | Setting session cookies: {}
2025-03-25 18:10:20 | DEBUG | Setting SSL verification: True
2025-03-25 18:10:20 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 18:10:20 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:10:20 | DEBUG | Initializing Session
2025-03-25 18:10:20 | DEBUG | Creating requests.Session
2025-03-25 18:10:20 | DEBUG | Setting session headers: {}
2025-03-25 18:10:20 | DEBUG | Setting session cookies: {}
2025-03-25 18:10:20 | DEBUG | Setting SSL verification: True
2025-03-25 18:10:20 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 18:10:20 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:10:20 | DEBUG | Initializing Session
2025-03-25 18:10:20 | DEBUG | Creating requests.Session
2025-03-25 18:10:20 | DEBUG | Setting session headers: {}
2025-03-25 18:10:20 | DEBUG | Setting session cookies: {}
2025-03-25 18:10:20 | DEBUG | Setting SSL verification: True
2025-03-25 18:10:20 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 18:10:20 | DEBUG | Saved state to MemoryStateStore
2025-03-25 18:10:20 | DEBUG | Closing session
2025-03-25 18:10:20 | DEBUG | Initializing Session
2025-03-25 18:10:20 | DEBUG | Creating requests.Session
2025-03-25 18:10:20 | DEBUG | Setting session headers: {}
2025-03-25 18:10:20 | DEBUG | Setting session cookies: {}
2025-03-25 18:10:20 | DEBUG | Setting SSL verification: True
2025-03-25 18:10:20 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 18:10:20 | DEBUG | Initializing Session
2025-03-25 18:10:20 | DEBUG | Creating requests.Session
2025-03-25 18:10:20 | DEBUG | Setting session headers: {'User-Agent': 'Test/1.0'}
2025-03-25 18:10:20 | DEBUG | Setting session cookies: {}
2025-03-25 18:10:20 | DEBUG | Setting SSL verification: False
2025-03-25 18:10:20 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 18:10:20 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:10:20 | DEBUG | Saved state to MemoryStateStore
2025-03-25 18:10:20 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:10:20 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:10:20 | DEBUG | Saved state to MemoryStateStore
2025-03-25 18:10:20 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:10:20 | DEBUG | Saved state to MemoryStateStore
2025-03-25 18:10:20 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:10:20 | DEBUG | Cleared state
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing base class (object) for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing base class (StateStore) for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: base (StateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x103053d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x103053e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x103053ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x103053f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x103064040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1030640e0>)>, 'path': '', 'format': 'json'}
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (getmetadata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (setmetadata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (findmetadata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (path) from (StateStore) to (TestStore) - cancopy: True
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (format) from (StateStore) to (TestStore) - cancopy: True
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing attribute (path) with value (test.dat) for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x103053d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x103053e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x103053ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x103053f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x103064040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1030640e0>)>, 'path': 'test.dat', 'format': 'json'}
2025-03-25 18:12:45 | DEBUG | statestore: converted (TestStore) to declarative state store
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing base class (JSONStateStore) for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: base (JSONStateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x103053d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x103053e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x103053ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x103053f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x103064040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1030640e0>)>, 'path': '', 'format': 'json'}
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (getmetadata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (setmetadata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (findmetadata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (path) from (JSONStateStore) to (TestStore) - cancopy: True
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (format) from (JSONStateStore) to (TestStore) - cancopy: True
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing attribute (path) with value (test.json) for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x103053d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x103053e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x103053ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x103053f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x103064040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1030640e0>)>, 'path': 'test.json', 'format': 'json'}
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing base class (PickleStateStore) for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: base (PickleStateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x103053d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x103053e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x103053ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x103053f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x103064040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1030640e0>)>, 'path': '', 'format': 'pickle'}
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (getmetadata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (setmetadata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (findmetadata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (path) from (PickleStateStore) to (TestStore) - cancopy: True
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (format) from (PickleStateStore) to (TestStore) - cancopy: True
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing attribute (path) with value (test.pkl) for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x103053d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x103053e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x103053ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x103053f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x103064040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1030640e0>)>, 'path': 'test.pkl', 'format': 'pickle'}
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing base class (MemoryStateStore) for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: base (MemoryStateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x103053d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x103053e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x103053ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x103053f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x103064040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1030640e0>)>, 'path': '', 'format': 'memory'}
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (getmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (setmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (findmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (path) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (format) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x103053d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x103053e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x103053ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x103053f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x103064040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1030640e0>)>, 'path': '', 'format': 'memory'}
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing base class (MemoryStateStore) for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: base (MemoryStateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x103053d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x103053e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x103053ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x103053f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x103064040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1030640e0>)>, 'path': '', 'format': 'memory'}
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (getmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (setmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (findmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (path) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (format) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x103053d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x103053e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x103053ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x103053f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x103064040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1030640e0>)>, 'path': '', 'format': 'memory'}
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: creating class (TestManager)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing base class (object) for (TestManager)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing base class (StateManager) for (TestManager)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: base (StateManager) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x103053d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x103053e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x103053ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x103053f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x103064040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1030640e0>)>, 'store': None, 'autoload': True, 'autosave': True}
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (getmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (setmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (findmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (store) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (autoload) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (autosave) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing attributes for (TestManager)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing attribute (autoload) with value (True) for (TestManager)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing attribute (autosave) with value (True) for (TestManager)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing attribute (store) with value (<ClientFactory.tests.unit.session.test_decorators.TestStore object at 0x1033b4050>) for (TestManager)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestManager)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestManager)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: completed creation of (TestManager) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x103053d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x103053e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x103053ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x103053f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x103064040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1030640e0>)>, 'store': <ClientFactory.tests.unit.session.test_decorators.TestStore object at 0x1033b4050>, 'autoload': True, 'autosave': True}
2025-03-25 18:12:45 | DEBUG | statemanager: converted (TestManager) to state manager
2025-03-25 18:12:45 | DEBUG | Loaded state from TestStore
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing base class (MemoryStateStore) for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: base (MemoryStateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x103053d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x103053e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x103053ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x103053f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x103064040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1030640e0>)>, 'path': '', 'format': 'memory'}
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (getmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (setmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (findmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (path) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (format) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x103053d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x103053e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x103053ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x103053f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x103064040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1030640e0>)>, 'path': '', 'format': 'memory'}
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: creating class (TestManager)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing base class (object) for (TestManager)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing base class (StateManager) for (TestManager)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: base (StateManager) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x103053d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x103053e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x103053ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x103053f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x103064040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1030640e0>)>, 'store': None, 'autoload': True, 'autosave': True}
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (getmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (setmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (findmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (store) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (autoload) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: copying (autosave) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing attributes for (TestManager)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing attribute (autoload) with value (True) for (TestManager)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing attribute (autosave) with value (True) for (TestManager)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: processing attribute (store) with value (<ClientFactory.tests.unit.session.test_decorators.TestStore object at 0x1033b4c20>) for (TestManager)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestManager)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestManager)
2025-03-25 18:12:45 | DEBUG | DeclarativeMeta: completed creation of (TestManager) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x103053d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x103053e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x103053ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x103053f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x103064040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1030640e0>)>, 'store': <ClientFactory.tests.unit.session.test_decorators.TestStore object at 0x1033b4c20>, 'autoload': True, 'autosave': True}
2025-03-25 18:12:45 | DEBUG | statemanager: converted (TestManager) to state manager
2025-03-25 18:12:45 | DEBUG | Loaded state from TestStore
2025-03-25 18:12:45 | DEBUG | Initializing Session
2025-03-25 18:12:45 | DEBUG | Creating requests.Session
2025-03-25 18:12:45 | DEBUG | Setting session headers: {}
2025-03-25 18:12:45 | DEBUG | Setting session cookies: {}
2025-03-25 18:12:45 | DEBUG | Setting SSL verification: True
2025-03-25 18:12:45 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 18:12:45 | DEBUG | Initializing Session
2025-03-25 18:12:45 | DEBUG | Creating requests.Session
2025-03-25 18:12:45 | DEBUG | Setting session headers: {}
2025-03-25 18:12:45 | DEBUG | Setting session cookies: {}
2025-03-25 18:12:45 | DEBUG | Setting SSL verification: True
2025-03-25 18:12:45 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 18:12:45 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:12:45 | DEBUG | Initializing Session
2025-03-25 18:12:45 | DEBUG | Creating requests.Session
2025-03-25 18:12:45 | DEBUG | Setting session headers: {}
2025-03-25 18:12:45 | DEBUG | Setting session cookies: {}
2025-03-25 18:12:45 | DEBUG | Setting SSL verification: True
2025-03-25 18:12:45 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 18:12:45 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:12:45 | DEBUG | Initializing Session
2025-03-25 18:12:45 | DEBUG | Creating requests.Session
2025-03-25 18:12:45 | DEBUG | Setting session headers: {}
2025-03-25 18:12:45 | DEBUG | Setting session cookies: {}
2025-03-25 18:12:45 | DEBUG | Setting SSL verification: True
2025-03-25 18:12:45 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 18:12:45 | DEBUG | Saved state to MemoryStateStore
2025-03-25 18:12:45 | DEBUG | Closing session
2025-03-25 18:12:45 | DEBUG | Initializing Session
2025-03-25 18:12:45 | DEBUG | Creating requests.Session
2025-03-25 18:12:45 | DEBUG | Setting session headers: {}
2025-03-25 18:12:45 | DEBUG | Setting session cookies: {}
2025-03-25 18:12:45 | DEBUG | Setting SSL verification: True
2025-03-25 18:12:45 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 18:12:45 | DEBUG | Initializing Session
2025-03-25 18:12:45 | DEBUG | Creating requests.Session
2025-03-25 18:12:45 | DEBUG | Setting session headers: {'User-Agent': 'Test/1.0'}
2025-03-25 18:12:45 | DEBUG | Setting session cookies: {}
2025-03-25 18:12:45 | DEBUG | Setting SSL verification: False
2025-03-25 18:12:45 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 18:12:45 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:12:45 | DEBUG | Saved state to MemoryStateStore
2025-03-25 18:12:45 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:12:46 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:12:46 | DEBUG | Saved state to MemoryStateStore
2025-03-25 18:12:46 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:12:46 | DEBUG | Saved state to MemoryStateStore
2025-03-25 18:12:46 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:12:46 | DEBUG | Cleared state
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing base class (object) for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing base class (StateStore) for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: base (StateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1045f3d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1045f3e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1045f3ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1045f3f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104604040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046040e0>)>, 'path': '', 'format': 'json'}
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (getmetadata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (setmetadata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (findmetadata) from (StateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (path) from (StateStore) to (TestStore) - cancopy: True
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (format) from (StateStore) to (TestStore) - cancopy: True
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing attribute (path) with value (test.dat) for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1045f3d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1045f3e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1045f3ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1045f3f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104604040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046040e0>)>, 'path': 'test.dat', 'format': 'json'}
2025-03-25 18:14:54 | DEBUG | statestore: converted (TestStore) to declarative state store
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing base class (JSONStateStore) for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: base (JSONStateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1045f3d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1045f3e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1045f3ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1045f3f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104604040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046040e0>)>, 'path': '', 'format': 'json'}
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (getmetadata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (setmetadata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (findmetadata) from (JSONStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (path) from (JSONStateStore) to (TestStore) - cancopy: True
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (format) from (JSONStateStore) to (TestStore) - cancopy: True
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing attribute (path) with value (test.json) for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1045f3d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1045f3e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1045f3ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1045f3f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104604040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046040e0>)>, 'path': 'test.json', 'format': 'json'}
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing base class (PickleStateStore) for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: base (PickleStateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1045f3d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1045f3e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1045f3ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1045f3f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104604040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046040e0>)>, 'path': '', 'format': 'pickle'}
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (getmetadata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (setmetadata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (findmetadata) from (PickleStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (path) from (PickleStateStore) to (TestStore) - cancopy: True
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (format) from (PickleStateStore) to (TestStore) - cancopy: True
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing attribute (path) with value (test.pkl) for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1045f3d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1045f3e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1045f3ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1045f3f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104604040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046040e0>)>, 'path': 'test.pkl', 'format': 'pickle'}
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing base class (MemoryStateStore) for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: base (MemoryStateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1045f3d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1045f3e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1045f3ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1045f3f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104604040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046040e0>)>, 'path': '', 'format': 'memory'}
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (getmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (setmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (findmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (path) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (format) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1045f3d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1045f3e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1045f3ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1045f3f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104604040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046040e0>)>, 'path': '', 'format': 'memory'}
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing base class (MemoryStateStore) for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: base (MemoryStateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1045f3d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1045f3e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1045f3ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1045f3f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104604040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046040e0>)>, 'path': '', 'format': 'memory'}
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (getmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (setmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (findmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (path) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (format) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1045f3d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1045f3e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1045f3ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1045f3f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104604040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046040e0>)>, 'path': '', 'format': 'memory'}
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: creating class (TestManager)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing base class (object) for (TestManager)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing base class (StateManager) for (TestManager)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: base (StateManager) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1045f3d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1045f3e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1045f3ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1045f3f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104604040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046040e0>)>, 'store': None, 'autoload': True, 'autosave': True}
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (getmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (setmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (findmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (store) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (autoload) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (autosave) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing attributes for (TestManager)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing attribute (autoload) with value (True) for (TestManager)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing attribute (autosave) with value (True) for (TestManager)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing attribute (store) with value (<ClientFactory.tests.unit.session.test_decorators.TestStore object at 0x104776e40>) for (TestManager)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestManager)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestManager)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: completed creation of (TestManager) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1045f3d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1045f3e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1045f3ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1045f3f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104604040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046040e0>)>, 'store': <ClientFactory.tests.unit.session.test_decorators.TestStore object at 0x104776e40>, 'autoload': True, 'autosave': True}
2025-03-25 18:14:54 | DEBUG | statemanager: converted (TestManager) to state manager
2025-03-25 18:14:54 | DEBUG | Loaded state from TestStore
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: creating class (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing base class (MemoryStateStore) for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: base (MemoryStateStore) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1045f3d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1045f3e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1045f3ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1045f3f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104604040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046040e0>)>, 'path': '', 'format': 'memory'}
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (getmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (setmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (findmetadata) from (MemoryStateStore) to (TestStore) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (path) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (format) from (MemoryStateStore) to (TestStore) - cancopy: True
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing attributes for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestStore)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: completed creation of (TestStore) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1045f3d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1045f3e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1045f3ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1045f3f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104604040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046040e0>)>, 'path': '', 'format': 'memory'}
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: creating class (TestManager)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing base class (object) for (TestManager)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing base class (StateManager) for (TestManager)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: base (StateManager) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1045f3d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1045f3e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1045f3ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1045f3f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104604040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046040e0>)>, 'store': None, 'autoload': True, 'autosave': True}
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (getmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (setmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (findmetadata) from (StateManager) to (TestManager) - cancopy: False
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (store) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (autoload) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: copying (autosave) from (StateManager) to (TestManager) - cancopy: True
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing attributes for (TestManager)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing attribute (autoload) with value (True) for (TestManager)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing attribute (autosave) with value (True) for (TestManager)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: processing attribute (store) with value (<ClientFactory.tests.unit.session.test_decorators.TestStore object at 0x104776cf0>) for (TestManager)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestManager)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestManager)
2025-03-25 18:14:54 | DEBUG | DeclarativeMeta: completed creation of (TestManager) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x1045f3d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x1045f3e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x1045f3ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x1045f3f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104604040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1046040e0>)>, 'store': <ClientFactory.tests.unit.session.test_decorators.TestStore object at 0x104776cf0>, 'autoload': True, 'autosave': True}
2025-03-25 18:14:54 | DEBUG | statemanager: converted (TestManager) to state manager
2025-03-25 18:14:54 | DEBUG | Loaded state from TestStore
2025-03-25 18:14:54 | DEBUG | Initializing Session
2025-03-25 18:14:54 | DEBUG | Creating requests.Session
2025-03-25 18:14:54 | DEBUG | Setting session headers: {}
2025-03-25 18:14:54 | DEBUG | Setting session cookies: {}
2025-03-25 18:14:54 | DEBUG | Setting SSL verification: True
2025-03-25 18:14:54 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 18:14:54 | DEBUG | Initializing Session
2025-03-25 18:14:54 | DEBUG | Creating requests.Session
2025-03-25 18:14:54 | DEBUG | Setting session headers: {}
2025-03-25 18:14:54 | DEBUG | Setting session cookies: {}
2025-03-25 18:14:54 | DEBUG | Setting SSL verification: True
2025-03-25 18:14:54 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 18:14:54 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:14:54 | DEBUG | Initializing Session
2025-03-25 18:14:54 | DEBUG | Creating requests.Session
2025-03-25 18:14:54 | DEBUG | Setting session headers: {}
2025-03-25 18:14:54 | DEBUG | Setting session cookies: {}
2025-03-25 18:14:54 | DEBUG | Setting SSL verification: True
2025-03-25 18:14:54 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 18:14:54 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:14:54 | DEBUG | Initializing Session
2025-03-25 18:14:54 | DEBUG | Creating requests.Session
2025-03-25 18:14:54 | DEBUG | Setting session headers: {}
2025-03-25 18:14:54 | DEBUG | Setting session cookies: {}
2025-03-25 18:14:54 | DEBUG | Setting SSL verification: True
2025-03-25 18:14:54 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 18:14:54 | DEBUG | Saved state to MemoryStateStore
2025-03-25 18:14:54 | DEBUG | Closing session
2025-03-25 18:14:54 | DEBUG | Initializing Session
2025-03-25 18:14:54 | DEBUG | Creating requests.Session
2025-03-25 18:14:54 | DEBUG | Setting session headers: {}
2025-03-25 18:14:54 | DEBUG | Setting session cookies: {}
2025-03-25 18:14:54 | DEBUG | Setting SSL verification: True
2025-03-25 18:14:54 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 18:14:54 | DEBUG | Initializing Session
2025-03-25 18:14:54 | DEBUG | Creating requests.Session
2025-03-25 18:14:54 | DEBUG | Setting session headers: {'User-Agent': 'Test/1.0'}
2025-03-25 18:14:54 | DEBUG | Setting session cookies: {}
2025-03-25 18:14:54 | DEBUG | Setting SSL verification: False
2025-03-25 18:14:54 | DEBUG | Configuring retry behavior: max_retries=3
2025-03-25 18:14:54 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:14:54 | DEBUG | Saved state to MemoryStateStore
2025-03-25 18:14:54 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:14:54 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:14:54 | DEBUG | Saved state to MemoryStateStore
2025-03-25 18:14:54 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:14:54 | DEBUG | Saved state to MemoryStateStore
2025-03-25 18:14:54 | DEBUG | Loaded state from MemoryStateStore
2025-03-25 18:14:54 | DEBUG | Cleared state
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: creating class (TestHeaders)
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: processing base class (object) for (TestHeaders)
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: processing base class (Headers) for (TestHeaders)
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: base (Headers) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10486fd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10486fe20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10486fec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10486ff60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104880040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1048800e0>)>, 'static': {}, 'dynamic': {}}
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: copying (static) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: copying (dynamic) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: processing attributes for (TestHeaders)
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: processing attribute (static) with value ({'User-Agent': 'Test/1.0'}) for (TestHeaders)
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestHeaders)
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestHeaders)
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: completed creation of (TestHeaders) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10486fd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10486fe20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10486fec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10486ff60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104880040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1048800e0>)>, 'static': {'User-Agent': 'Test/1.0'}, 'dynamic': {}}
2025-03-25 18:17:56 | DEBUG | headers: converted (TestHeaders) to headers configuration
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: creating class (TestHeaders)
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: processing base class (object) for (TestHeaders)
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: processing base class (Headers) for (TestHeaders)
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: base (Headers) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10486fd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10486fe20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10486fec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10486ff60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104880040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1048800e0>)>, 'static': {}, 'dynamic': {}}
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: copying (static) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: copying (dynamic) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: processing attributes for (TestHeaders)
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: processing attribute (static) with value ({'User-Agent': 'Test/1.0'}) for (TestHeaders)
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestHeaders)
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestHeaders)
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: completed creation of (TestHeaders) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10486fd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10486fe20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10486fec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10486ff60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104880040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1048800e0>)>, 'static': {'User-Agent': 'Test/1.0'}, 'dynamic': {}}
2025-03-25 18:17:56 | DEBUG | headers: converted (TestHeaders) to headers configuration
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: creating class (TestHeaders)
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: processing base class (object) for (TestHeaders)
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: processing base class (Headers) for (TestHeaders)
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: base (Headers) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10486fd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10486fe20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10486fec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10486ff60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104880040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1048800e0>)>, 'static': {}, 'dynamic': {}}
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: copying (static) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: copying (dynamic) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: processing attributes for (TestHeaders)
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: processing attribute (static) with value ({'User-Agent': 'Test/1.0'}) for (TestHeaders)
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: processing attribute (dynamic) with value ({'X-Counter': <function test_headers_decorator_dynamic.<locals>.get_count at 0x104a97d80>}) for (TestHeaders)
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestHeaders)
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestHeaders)
2025-03-25 18:17:56 | DEBUG | DeclarativeMeta: completed creation of (TestHeaders) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x10486fd80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x10486fe20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x10486fec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x10486ff60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104880040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1048800e0>)>, 'static': {'User-Agent': 'Test/1.0'}, 'dynamic': {'X-Counter': <function test_headers_decorator_dynamic.<locals>.get_count at 0x104a97d80>}}
2025-03-25 18:17:56 | DEBUG | headers: converted (TestHeaders) to headers configuration
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: creating class (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: processing base class (object) for (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: processing base class (Headers) for (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: base (Headers) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106937d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106937e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106937ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106937f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106948040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1069480e0>)>, 'static': {}, 'dynamic': {}}
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (static) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (dynamic) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: processing attributes for (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: processing attribute (static) with value ({'User-Agent': 'Test/1.0'}) for (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: completed creation of (TestHeaders) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106937d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106937e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106937ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106937f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106948040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1069480e0>)>, 'static': {'User-Agent': 'Test/1.0'}, 'dynamic': {}}
2025-03-25 18:19:20 | DEBUG | headers: converted (TestHeaders) to headers configuration
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: creating class (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: processing base class (object) for (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: processing base class (Headers) for (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: base (Headers) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106937d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106937e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106937ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106937f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106948040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1069480e0>)>, 'static': {}, 'dynamic': {}}
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (static) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (dynamic) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: processing attributes for (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: processing attribute (static) with value ({'User-Agent': 'Test/1.0'}) for (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: completed creation of (TestHeaders) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106937d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106937e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106937ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106937f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106948040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1069480e0>)>, 'static': {'User-Agent': 'Test/1.0'}, 'dynamic': {}}
2025-03-25 18:19:20 | DEBUG | headers: converted (TestHeaders) to headers configuration
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: creating class (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: processing base class (object) for (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: processing base class (Headers) for (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: base (Headers) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106937d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106937e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106937ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106937f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106948040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1069480e0>)>, 'static': {}, 'dynamic': {}}
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (static) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (dynamic) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: processing attributes for (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: processing attribute (static) with value ({'User-Agent': 'Test/1.0'}) for (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: processing attribute (dynamic) with value ({'X-Counter': <function test_headers_decorator_dynamic.<locals>.get_count at 0x106b43ce0>}) for (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: completed creation of (TestHeaders) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106937d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106937e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106937ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106937f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106948040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1069480e0>)>, 'static': {'User-Agent': 'Test/1.0'}, 'dynamic': {'X-Counter': <function test_headers_decorator_dynamic.<locals>.get_count at 0x106b43ce0>}}
2025-03-25 18:19:20 | DEBUG | headers: converted (TestHeaders) to headers configuration
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: creating class (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: processing base class (object) for (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: processing base class (Headers) for (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: base (Headers) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106937d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106937e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106937ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106937f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106948040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1069480e0>)>, 'static': {}, 'dynamic': {}}
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (static) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: copying (dynamic) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: processing attributes for (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: processing attribute (static) with value ({'User-Agent': 'Test/1.0'}) for (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestHeaders)
2025-03-25 18:19:20 | DEBUG | DeclarativeMeta: completed creation of (TestHeaders) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106937d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106937e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106937ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106937f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106948040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1069480e0>)>, 'static': {'User-Agent': 'Test/1.0'}, 'dynamic': {}}
2025-03-25 18:19:20 | DEBUG | headers: converted (TestHeaders) to headers configuration
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: creating class (TestHeaders)
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: processing base class (object) for (TestHeaders)
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: processing base class (Headers) for (TestHeaders)
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: base (Headers) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104223d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104223e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104223ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104223f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104234040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1042340e0>)>, 'static': {}, 'dynamic': {}}
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: copying (static) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: copying (dynamic) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: processing attributes for (TestHeaders)
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: processing attribute (static) with value ({'User-Agent': 'Test/1.0'}) for (TestHeaders)
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestHeaders)
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestHeaders)
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: completed creation of (TestHeaders) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104223d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104223e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104223ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104223f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104234040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1042340e0>)>, 'static': {'User-Agent': 'Test/1.0'}, 'dynamic': {}}
2025-03-25 18:19:55 | DEBUG | headers: converted (TestHeaders) to headers configuration
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: creating class (TestHeaders)
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: processing base class (object) for (TestHeaders)
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: processing base class (Headers) for (TestHeaders)
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: base (Headers) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104223d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104223e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104223ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104223f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104234040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1042340e0>)>, 'static': {}, 'dynamic': {}}
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: copying (static) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: copying (dynamic) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: processing attributes for (TestHeaders)
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: processing attribute (static) with value ({'User-Agent': 'Test/1.0'}) for (TestHeaders)
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestHeaders)
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestHeaders)
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: completed creation of (TestHeaders) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104223d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104223e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104223ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104223f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104234040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1042340e0>)>, 'static': {'User-Agent': 'Test/1.0'}, 'dynamic': {}}
2025-03-25 18:19:55 | DEBUG | headers: converted (TestHeaders) to headers configuration
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: creating class (TestHeaders)
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: processing base class (object) for (TestHeaders)
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: processing base class (Headers) for (TestHeaders)
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: base (Headers) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104223d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104223e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104223ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104223f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104234040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1042340e0>)>, 'static': {}, 'dynamic': {}}
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: copying (static) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: copying (dynamic) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: processing attributes for (TestHeaders)
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: processing attribute (static) with value ({'User-Agent': 'Test/1.0'}) for (TestHeaders)
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: processing attribute (dynamic) with value ({'X-Counter': <function test_headers_decorator_dynamic.<locals>.get_count at 0x10442bd80>}) for (TestHeaders)
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestHeaders)
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestHeaders)
2025-03-25 18:19:55 | DEBUG | DeclarativeMeta: completed creation of (TestHeaders) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x104223d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x104223e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x104223ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x104223f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x104234040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1042340e0>)>, 'static': {'User-Agent': 'Test/1.0'}, 'dynamic': {'X-Counter': <function test_headers_decorator_dynamic.<locals>.get_count at 0x10442bd80>}}
2025-03-25 18:19:55 | DEBUG | headers: converted (TestHeaders) to headers configuration
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: creating class (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: processing base class (object) for (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: processing base class (Headers) for (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: base (Headers) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106117d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106117e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106117ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106117f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106128040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1061280e0>)>, 'static': {}, 'dynamic': {}}
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (static) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (dynamic) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: processing attributes for (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: processing attribute (static) with value ({'User-Agent': 'Test/1.0'}) for (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: completed creation of (TestHeaders) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106117d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106117e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106117ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106117f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106128040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1061280e0>)>, 'static': {'User-Agent': 'Test/1.0'}, 'dynamic': {}}
2025-03-25 18:20:12 | DEBUG | headers: converted (TestHeaders) to headers configuration
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: creating class (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: processing base class (object) for (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: processing base class (Headers) for (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: base (Headers) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106117d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106117e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106117ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106117f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106128040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1061280e0>)>, 'static': {}, 'dynamic': {}}
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (static) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (dynamic) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: processing attributes for (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: processing attribute (static) with value ({'User-Agent': 'Test/1.0'}) for (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: completed creation of (TestHeaders) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106117d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106117e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106117ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106117f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106128040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1061280e0>)>, 'static': {'User-Agent': 'Test/1.0'}, 'dynamic': {}}
2025-03-25 18:20:12 | DEBUG | headers: converted (TestHeaders) to headers configuration
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: creating class (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: processing base class (object) for (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: processing base class (Headers) for (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: base (Headers) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106117d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106117e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106117ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106117f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106128040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1061280e0>)>, 'static': {}, 'dynamic': {}}
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (static) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (dynamic) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: processing attributes for (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: processing attribute (static) with value ({'User-Agent': 'Test/1.0'}) for (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: processing attribute (dynamic) with value ({'X-Counter': <function test_headers_decorator_dynamic.<locals>.get_count at 0x106323ce0>}) for (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: completed creation of (TestHeaders) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106117d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106117e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106117ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106117f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106128040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1061280e0>)>, 'static': {'User-Agent': 'Test/1.0'}, 'dynamic': {'X-Counter': <function test_headers_decorator_dynamic.<locals>.get_count at 0x106323ce0>}}
2025-03-25 18:20:12 | DEBUG | headers: converted (TestHeaders) to headers configuration
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: creating class (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: initial metadata: {}
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: processing base class (object) for (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: processing base class (Headers) for (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: base (Headers) has metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106117d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106117e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106117ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106117f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106128040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1061280e0>)>, 'static': {}, 'dynamic': {}}
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (getmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (setmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (hasmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (updatemetdata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (getallmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (findmetadata) from (Headers) to (TestHeaders) - cancopy: False
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (static) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: copying (dynamic) from (Headers) to (TestHeaders) - cancopy: True
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: processing attributes for (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: processing attribute (static) with value ({'User-Agent': 'Test/1.0'}) for (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: calling _processclassattributes for (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: _processclassattributes completed for (TestHeaders)
2025-03-25 18:20:12 | DEBUG | DeclarativeMeta: completed creation of (TestHeaders) - metadata: {'getmetadata': <classmethod(<function DeclarativeComponent.getmetadata at 0x106117d80>)>, 'setmetadata': <classmethod(<function DeclarativeComponent.setmetadata at 0x106117e20>)>, 'hasmetadata': <classmethod(<function DeclarativeComponent.hasmetadata at 0x106117ec0>)>, 'updatemetdata': <classmethod(<function DeclarativeComponent.updatemetdata at 0x106117f60>)>, 'getallmetadata': <classmethod(<function DeclarativeComponent.getallmetadata at 0x106128040>)>, 'findmetadata': <classmethod(<function DeclarativeComponent.findmetadata at 0x1061280e0>)>, 'static': {'User-Agent': 'Test/1.0'}, 'dynamic': {}}
2025-03-25 18:20:12 | DEBUG | headers: converted (TestHeaders) to headers configuration
2025-04-06 11:28:44 | INFO | payload.apply: received data: {'keyword': 'test', 'brand': None, 'category': None}
2025-04-06 11:28:44 | INFO | payload.apply: processing payload kwarg (keyword) with parameter: Parameter(name='keyword', type=<ParameterType.STRING: 'string'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None) 
2025-04-06 11:28:44 | INFO | payload.apply: processing payload kwarg (brand) with parameter: Parameter(name='brand', type=<ParameterType.STRING: 'string'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None) 
2025-04-06 11:28:44 | INFO | payload.apply: processing payload kwarg (category) with parameter: ConditionalParameter(name='category', type=<ParameterType.STRING: 'string'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None) 
2025-04-06 11:31:59 | INFO | payload.apply: received data: {'keyword': 'test', 'brand': None, 'category': None}
2025-04-06 11:31:59 | INFO | payload.apply: processing payload kwarg (keyword) with parameter: Parameter(name='keyword', type=<ParameterType.STRING: 'string'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None) 
2025-04-06 11:31:59 | INFO | payload.apply: processing payload kwarg (brand) with parameter: Parameter(name='brand', type=<ParameterType.STRING: 'string'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None) 
2025-04-06 11:31:59 | INFO | payload.apply: processing payload kwarg (category) with parameter: ConditionalParameter(name='category', type=<ParameterType.STRING: 'string'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None) 
2025-04-06 11:31:59 | INFO | payload.apply: returning result: {'keyword': 'test'}
2025-04-06 11:31:59 | INFO | payload.apply: received data: {'keyword': None, 'brand': 'nike', 'category': None}
2025-04-06 11:31:59 | INFO | payload.apply: processing payload kwarg (keyword) with parameter: Parameter(name='keyword', type=<ParameterType.STRING: 'string'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None) 
2025-04-06 11:31:59 | INFO | payload.apply: processing payload kwarg (brand) with parameter: Parameter(name='brand', type=<ParameterType.STRING: 'string'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None) 
2025-04-06 11:31:59 | INFO | payload.apply: processing payload kwarg (category) with parameter: ConditionalParameter(name='category', type=<ParameterType.STRING: 'string'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None) 
2025-04-06 11:31:59 | INFO | payload.apply: returning result: {'brand': 'nike', 'category': 'all'}
2025-04-06 11:47:58 | INFO | payload.apply: received data: {}
2025-04-06 11:47:58 | INFO | payload.apply: processing payload kwarg (visible) with parameter: Parameter(name='visible', type=<ParameterType.ANY: 'any'>, required=False, default='visible', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False) 
2025-04-06 11:47:58 | INFO | payload.apply: processing payload kwarg (hidden) with parameter: Parameter(name='hidden', type=<ParameterType.ANY: 'any'>, required=False, default='hidden', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:47:58 | INFO | payload.apply: returning result: {'visible': 'visible'}
2025-04-06 11:47:58 | INFO | payload.apply: received data: {}
2025-04-06 11:47:58 | INFO | payload.apply: processing payload kwarg (helper) with parameter: Parameter(name='helper', type=<ParameterType.ANY: 'any'>, required=False, default=100, description='', choices=None, transform=<function test_transient_with_transform.<locals>.<lambda> at 0x10460d080>, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:47:58 | INFO | payload.apply: processing payload kwarg (filter) with parameter: ConditionalParameter(name='filter', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False) 
2025-04-06 11:47:58 | INFO | payload.apply: returning result: {}
2025-04-06 11:47:58 | INFO | payload.apply: received data: {}
2025-04-06 11:47:58 | INFO | payload.apply: processing payload kwarg (minprice) with parameter: Parameter(name='minprice', type=<ParameterType.ANY: 'any'>, required=False, default=0, description='', choices=None, transform=<function TestPriceFilterExample.price_payload.<locals>.<lambda> at 0x10463a840>, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:47:58 | INFO | payload.apply: processing payload kwarg (maxprice) with parameter: Parameter(name='maxprice', type=<ParameterType.ANY: 'any'>, required=False, default=1000, description='', choices=None, transform=<function TestPriceFilterExample.price_payload.<locals>.<lambda> at 0x10463aac0>, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:47:58 | INFO | payload.apply: processing payload kwarg (filters) with parameter: ConditionalParameter(name='filters', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False) 
2025-04-06 11:47:58 | INFO | payload.apply: returning result: {}
2025-04-06 11:47:58 | INFO | payload.apply: received data: {'minprice': 100, 'maxprice': 500}
2025-04-06 11:47:58 | INFO | payload.apply: processing payload kwarg (minprice) with parameter: Parameter(name='minprice', type=<ParameterType.ANY: 'any'>, required=False, default=0, description='', choices=None, transform=<function TestPriceFilterExample.price_payload.<locals>.<lambda> at 0x10463aca0>, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:47:58 | INFO | payload.apply: processing payload kwarg (maxprice) with parameter: Parameter(name='maxprice', type=<ParameterType.ANY: 'any'>, required=False, default=1000, description='', choices=None, transform=<function TestPriceFilterExample.price_payload.<locals>.<lambda> at 0x10463ade0>, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:47:58 | INFO | payload.apply: processing payload kwarg (filters) with parameter: ConditionalParameter(name='filters', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False) 
2025-04-06 11:47:58 | INFO | payload.apply: returning result: {}
2025-04-06 11:47:58 | INFO | payload.apply: received data: {}
2025-04-06 11:47:58 | INFO | payload.apply: received data: {'helper': 'test'}
2025-04-06 11:47:58 | INFO | payload.apply: processing payload kwarg (helper) with parameter: Parameter(name='helper', type=<ParameterType.ANY: 'any'>, required=True, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:47:58 | INFO | payload.apply: processing payload kwarg (dependent) with parameter: ConditionalParameter(name='dependent', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False) 
2025-04-06 11:47:58 | INFO | payload.apply: returning result: {}
2025-04-06 11:47:58 | INFO | payload.apply: received data: {}
2025-04-06 11:47:58 | INFO | payload.apply: processing payload kwarg (normal1) with parameter: Parameter(name='normal1', type=<ParameterType.ANY: 'any'>, required=False, default='n1', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False) 
2025-04-06 11:47:58 | INFO | payload.apply: processing payload kwarg (trans1) with parameter: Parameter(name='trans1', type=<ParameterType.ANY: 'any'>, required=False, default='t1', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:47:58 | INFO | payload.apply: processing payload kwarg (normal2) with parameter: Parameter(name='normal2', type=<ParameterType.ANY: 'any'>, required=False, default='n2', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False) 
2025-04-06 11:47:58 | INFO | payload.apply: processing payload kwarg (trans2) with parameter: Parameter(name='trans2', type=<ParameterType.ANY: 'any'>, required=False, default='t2', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:47:58 | INFO | payload.apply: returning result: {'normal1': 'n1', 'normal2': 'n2'}
2025-04-06 11:47:59 | INFO | payload.apply: received data: {}
2025-04-06 11:47:59 | INFO | payload.apply: processing payload kwarg (helper) with parameter: Parameter(name='different_name', type=<ParameterType.ANY: 'any'>, required=False, default='value', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:47:59 | INFO | payload.apply: returning result: {}
2025-04-06 11:47:59 | INFO | payload.apply: received data: {'helper': 'not a number'}
2025-04-06 11:47:59 | INFO | payload.apply: received data: {'helper': 123}
2025-04-06 11:47:59 | INFO | payload.apply: processing payload kwarg (helper) with parameter: Parameter(name='helper', type=<ParameterType.NUMBER: 'number'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:47:59 | INFO | payload.apply: returning result: {}
2025-04-06 11:47:59 | INFO | payload.apply: received data: {}
2025-04-06 11:47:59 | INFO | payload.apply: processing payload kwarg (t1) with parameter: Parameter(name='t1', type=<ParameterType.ANY: 'any'>, required=False, default='A', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:47:59 | INFO | payload.apply: processing payload kwarg (t2) with parameter: Parameter(name='t2', type=<ParameterType.ANY: 'any'>, required=False, default='B', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:47:59 | INFO | payload.apply: processing payload kwarg (t3) with parameter: Parameter(name='t3', type=<ParameterType.ANY: 'any'>, required=False, default='C', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:47:59 | INFO | payload.apply: processing payload kwarg (combined) with parameter: ConditionalParameter(name='combined', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False) 
2025-04-06 11:47:59 | INFO | payload.apply: returning result: {}
2025-04-06 11:47:59 | INFO | payload.apply: received data: {}
2025-04-06 11:47:59 | INFO | payload.apply: processing payload kwarg (t1) with parameter: Parameter(name='t1', type=<ParameterType.ANY: 'any'>, required=False, default=5, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:47:59 | INFO | payload.apply: processing payload kwarg (t2) with parameter: ConditionalParameter(name='t2', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:47:59 | INFO | payload.apply: processing payload kwarg (final) with parameter: ConditionalParameter(name='final', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False) 
2025-04-06 11:47:59 | INFO | payload.apply: returning result: {}
2025-04-06 11:52:58 | INFO | payload.apply: received data: {}
2025-04-06 11:52:58 | INFO | payload.apply: processing payload kwarg (visible) with parameter: Parameter(name='visible', type=<ParameterType.ANY: 'any'>, required=False, default='visible', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False) 
2025-04-06 11:52:58 | INFO | payload.apply: processing payload kwarg (hidden) with parameter: Parameter(name='hidden', type=<ParameterType.ANY: 'any'>, required=False, default='hidden', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:52:58 | INFO | payload.apply: returning result: {'visible': 'visible'}
2025-04-06 11:52:58 | INFO | payload.apply: received data: {}
2025-04-06 11:52:58 | INFO | payload.apply: processing payload kwarg (helper) with parameter: Parameter(name='helper', type=<ParameterType.ANY: 'any'>, required=False, default=100, description='', choices=None, transform=<function test_transient_with_transform.<locals>.<lambda> at 0x1055ccfe0>, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:52:58 | INFO | payload.apply: processing payload kwarg (filter) with parameter: ConditionalParameter(name='filter', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False) 
2025-04-06 11:52:58 | INFO | payload.apply: returning result: {'filter': [100]}
2025-04-06 11:52:58 | INFO | payload.apply: received data: {}
2025-04-06 11:52:58 | INFO | payload.apply: processing payload kwarg (minprice) with parameter: Parameter(name='minprice', type=<ParameterType.ANY: 'any'>, required=False, default=0, description='', choices=None, transform=<function TestPriceFilterExample.price_payload.<locals>.<lambda> at 0x105703880>, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:52:58 | INFO | payload.apply: processing payload kwarg (maxprice) with parameter: Parameter(name='maxprice', type=<ParameterType.ANY: 'any'>, required=False, default=1000, description='', choices=None, transform=<function TestPriceFilterExample.price_payload.<locals>.<lambda> at 0x105703b00>, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:52:58 | INFO | payload.apply: processing payload kwarg (filters) with parameter: ConditionalParameter(name='filters', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False) 
2025-04-06 11:52:58 | INFO | payload.apply: returning result: {'filters': '[0, 1000]'}
2025-04-06 11:52:58 | INFO | payload.apply: received data: {'minprice': 100, 'maxprice': 500}
2025-04-06 11:52:58 | INFO | payload.apply: processing payload kwarg (minprice) with parameter: Parameter(name='minprice', type=<ParameterType.ANY: 'any'>, required=False, default=0, description='', choices=None, transform=<function TestPriceFilterExample.price_payload.<locals>.<lambda> at 0x105703ce0>, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:52:58 | INFO | payload.apply: processing payload kwarg (maxprice) with parameter: Parameter(name='maxprice', type=<ParameterType.ANY: 'any'>, required=False, default=1000, description='', choices=None, transform=<function TestPriceFilterExample.price_payload.<locals>.<lambda> at 0x105703e20>, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:52:58 | INFO | payload.apply: processing payload kwarg (filters) with parameter: ConditionalParameter(name='filters', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False) 
2025-04-06 11:52:58 | INFO | payload.apply: returning result: {'filters': '["price>=100", "price<=500"]'}
2025-04-06 11:52:58 | INFO | payload.apply: received data: {}
2025-04-06 11:52:58 | INFO | payload.apply: received data: {'helper': 'test'}
2025-04-06 11:52:58 | INFO | payload.apply: processing payload kwarg (helper) with parameter: Parameter(name='helper', type=<ParameterType.ANY: 'any'>, required=True, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:52:58 | INFO | payload.apply: processing payload kwarg (dependent) with parameter: ConditionalParameter(name='dependent', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False) 
2025-04-06 11:52:58 | INFO | payload.apply: returning result: {'dependent': 'TEST'}
2025-04-06 11:52:58 | INFO | payload.apply: received data: {}
2025-04-06 11:52:58 | INFO | payload.apply: processing payload kwarg (normal1) with parameter: Parameter(name='normal1', type=<ParameterType.ANY: 'any'>, required=False, default='n1', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False) 
2025-04-06 11:52:58 | INFO | payload.apply: processing payload kwarg (trans1) with parameter: Parameter(name='trans1', type=<ParameterType.ANY: 'any'>, required=False, default='t1', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:52:58 | INFO | payload.apply: processing payload kwarg (normal2) with parameter: Parameter(name='normal2', type=<ParameterType.ANY: 'any'>, required=False, default='n2', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False) 
2025-04-06 11:52:58 | INFO | payload.apply: processing payload kwarg (trans2) with parameter: Parameter(name='trans2', type=<ParameterType.ANY: 'any'>, required=False, default='t2', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:52:58 | INFO | payload.apply: returning result: {'normal1': 'n1', 'normal2': 'n2'}
2025-04-06 11:52:58 | INFO | payload.apply: received data: {}
2025-04-06 11:52:58 | INFO | payload.apply: processing payload kwarg (helper) with parameter: Parameter(name='different_name', type=<ParameterType.ANY: 'any'>, required=False, default='value', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:52:58 | INFO | payload.apply: returning result: {}
2025-04-06 11:52:58 | INFO | payload.apply: received data: {'helper': 'not a number'}
2025-04-06 11:52:58 | INFO | payload.apply: received data: {'helper': 123}
2025-04-06 11:52:58 | INFO | payload.apply: processing payload kwarg (helper) with parameter: Parameter(name='helper', type=<ParameterType.NUMBER: 'number'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:52:58 | INFO | payload.apply: returning result: {}
2025-04-06 11:52:58 | INFO | payload.apply: received data: {}
2025-04-06 11:52:58 | INFO | payload.apply: processing payload kwarg (t1) with parameter: Parameter(name='t1', type=<ParameterType.ANY: 'any'>, required=False, default='A', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:52:58 | INFO | payload.apply: processing payload kwarg (t2) with parameter: Parameter(name='t2', type=<ParameterType.ANY: 'any'>, required=False, default='B', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:52:58 | INFO | payload.apply: processing payload kwarg (t3) with parameter: Parameter(name='t3', type=<ParameterType.ANY: 'any'>, required=False, default='C', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:52:58 | INFO | payload.apply: processing payload kwarg (combined) with parameter: ConditionalParameter(name='combined', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False) 
2025-04-06 11:52:58 | INFO | payload.apply: returning result: {'combined': 'A-B-C'}
2025-04-06 11:52:58 | INFO | payload.apply: received data: {}
2025-04-06 11:52:58 | INFO | payload.apply: processing payload kwarg (t1) with parameter: Parameter(name='t1', type=<ParameterType.ANY: 'any'>, required=False, default=5, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:52:58 | INFO | payload.apply: processing payload kwarg (t2) with parameter: ConditionalParameter(name='t2', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True) 
2025-04-06 11:52:58 | INFO | payload.apply: processing payload kwarg (final) with parameter: ConditionalParameter(name='final', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False) 
2025-04-06 11:54:05 | INFO | payload.apply: received data: {}
2025-04-06 11:54:05 | INFO | payload.apply: processing payload kwarg (visible) with parameter: Parameter(name='visible', type=<ParameterType.ANY: 'any'>, required=False, default='visible', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False)
2025-04-06 11:54:05 | INFO | payload.apply: processing payload kwarg (hidden) with parameter: Parameter(name='hidden', type=<ParameterType.ANY: 'any'>, required=False, default='hidden', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:54:05 | INFO | payload.apply: returning result: {'visible': 'visible'}
2025-04-06 11:54:05 | INFO | payload.apply: received data: {}
2025-04-06 11:54:05 | INFO | payload.apply: processing payload kwarg (helper) with parameter: Parameter(name='helper', type=<ParameterType.ANY: 'any'>, required=False, default=100, description='', choices=None, transform=<function test_transient_with_transform.<locals>.<lambda> at 0x1066acfe0>, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:54:05 | INFO | payload.apply: processing payload kwarg (filter) with parameter: ConditionalParameter(name='filter', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False)
2025-04-06 11:54:05 | INFO | payload.apply: returning result: {'filter': ['value>=100']}
2025-04-06 11:54:05 | INFO | payload.apply: received data: {}
2025-04-06 11:54:05 | INFO | payload.apply: processing payload kwarg (minprice) with parameter: Parameter(name='minprice', type=<ParameterType.ANY: 'any'>, required=False, default=0, description='', choices=None, transform=<function TestPriceFilterExample.price_payload.<locals>.<lambda> at 0x1066ae3e0>, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:54:05 | INFO | payload.apply: processing payload kwarg (maxprice) with parameter: Parameter(name='maxprice', type=<ParameterType.ANY: 'any'>, required=False, default=1000, description='', choices=None, transform=<function TestPriceFilterExample.price_payload.<locals>.<lambda> at 0x1066ae2a0>, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:54:05 | INFO | payload.apply: processing payload kwarg (filters) with parameter: ConditionalParameter(name='filters', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False)
2025-04-06 11:54:05 | INFO | payload.apply: returning result: {'filters': '["price>=0", "price<=1000"]'}
2025-04-06 11:54:05 | INFO | payload.apply: received data: {'minprice': 100, 'maxprice': 500}
2025-04-06 11:54:05 | INFO | payload.apply: processing payload kwarg (minprice) with parameter: Parameter(name='minprice', type=<ParameterType.ANY: 'any'>, required=False, default=0, description='', choices=None, transform=<function TestPriceFilterExample.price_payload.<locals>.<lambda> at 0x1066ad080>, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:54:05 | INFO | payload.apply: processing payload kwarg (maxprice) with parameter: Parameter(name='maxprice', type=<ParameterType.ANY: 'any'>, required=False, default=1000, description='', choices=None, transform=<function TestPriceFilterExample.price_payload.<locals>.<lambda> at 0x1066ae160>, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:54:05 | INFO | payload.apply: processing payload kwarg (filters) with parameter: ConditionalParameter(name='filters', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False)
2025-04-06 11:54:05 | INFO | payload.apply: returning result: {'filters': '["price>=100", "price<=500"]'}
2025-04-06 11:54:05 | INFO | payload.apply: received data: {}
2025-04-06 11:54:05 | INFO | payload.apply: received data: {'helper': 'test'}
2025-04-06 11:54:05 | INFO | payload.apply: processing payload kwarg (helper) with parameter: Parameter(name='helper', type=<ParameterType.ANY: 'any'>, required=True, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:54:05 | INFO | payload.apply: processing payload kwarg (dependent) with parameter: ConditionalParameter(name='dependent', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False)
2025-04-06 11:54:05 | INFO | payload.apply: returning result: {'dependent': 'TEST'}
2025-04-06 11:54:05 | INFO | payload.apply: received data: {}
2025-04-06 11:54:05 | INFO | payload.apply: processing payload kwarg (normal1) with parameter: Parameter(name='normal1', type=<ParameterType.ANY: 'any'>, required=False, default='n1', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False)
2025-04-06 11:54:05 | INFO | payload.apply: processing payload kwarg (trans1) with parameter: Parameter(name='trans1', type=<ParameterType.ANY: 'any'>, required=False, default='t1', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:54:05 | INFO | payload.apply: processing payload kwarg (normal2) with parameter: Parameter(name='normal2', type=<ParameterType.ANY: 'any'>, required=False, default='n2', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False)
2025-04-06 11:54:05 | INFO | payload.apply: processing payload kwarg (trans2) with parameter: Parameter(name='trans2', type=<ParameterType.ANY: 'any'>, required=False, default='t2', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:54:05 | INFO | payload.apply: returning result: {'normal1': 'n1', 'normal2': 'n2'}
2025-04-06 11:54:05 | INFO | payload.apply: received data: {}
2025-04-06 11:54:05 | INFO | payload.apply: processing payload kwarg (helper) with parameter: Parameter(name='different_name', type=<ParameterType.ANY: 'any'>, required=False, default='value', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:54:05 | INFO | payload.apply: returning result: {}
2025-04-06 11:54:05 | INFO | payload.apply: received data: {'helper': 'not a number'}
2025-04-06 11:54:05 | INFO | payload.apply: received data: {'helper': 123}
2025-04-06 11:54:05 | INFO | payload.apply: processing payload kwarg (helper) with parameter: Parameter(name='helper', type=<ParameterType.NUMBER: 'number'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:54:05 | INFO | payload.apply: returning result: {}
2025-04-06 11:54:05 | INFO | payload.apply: received data: {}
2025-04-06 11:54:05 | INFO | payload.apply: processing payload kwarg (t1) with parameter: Parameter(name='t1', type=<ParameterType.ANY: 'any'>, required=False, default='A', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:54:05 | INFO | payload.apply: processing payload kwarg (t2) with parameter: Parameter(name='t2', type=<ParameterType.ANY: 'any'>, required=False, default='B', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:54:05 | INFO | payload.apply: processing payload kwarg (t3) with parameter: Parameter(name='t3', type=<ParameterType.ANY: 'any'>, required=False, default='C', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:54:05 | INFO | payload.apply: processing payload kwarg (combined) with parameter: ConditionalParameter(name='combined', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False)
2025-04-06 11:54:05 | INFO | payload.apply: returning result: {'combined': 'A-B-C'}
2025-04-06 11:54:05 | INFO | payload.apply: received data: {}
2025-04-06 11:54:05 | INFO | payload.apply: processing payload kwarg (t1) with parameter: Parameter(name='t1', type=<ParameterType.ANY: 'any'>, required=False, default=5, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:54:05 | INFO | payload.apply: processing payload kwarg (t2) with parameter: ConditionalParameter(name='t2', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:54:05 | INFO | payload.apply: processing payload kwarg (final) with parameter: ConditionalParameter(name='final', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False)
2025-04-06 11:55:37 | INFO | payload.apply: received data: {}
2025-04-06 11:55:37 | INFO | payload.apply: processing payload kwarg (visible) with parameter: Parameter(name='visible', type=<ParameterType.ANY: 'any'>, required=False, default='visible', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False)
2025-04-06 11:55:37 | INFO | payload.apply: processing payload kwarg (hidden) with parameter: Parameter(name='hidden', type=<ParameterType.ANY: 'any'>, required=False, default='hidden', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:55:37 | INFO | payload.apply: returning result: {'visible': 'visible'}
2025-04-06 11:55:37 | INFO | payload.apply: received data: {}
2025-04-06 11:55:37 | INFO | payload.apply: processing payload kwarg (helper) with parameter: Parameter(name='helper', type=<ParameterType.ANY: 'any'>, required=False, default=100, description='', choices=None, transform=<function test_transient_with_transform.<locals>.<lambda> at 0x1026ed120>, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:55:37 | INFO | payload.apply: processing conditional param (filter) with parameter: ConditionalParameter(name='filter', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False)
2025-04-06 11:55:37 | INFO | payload.apply: returning result: {'filter': ['value>=100']}
2025-04-06 11:55:37 | INFO | payload.apply: received data: {}
2025-04-06 11:55:37 | INFO | payload.apply: processing payload kwarg (minprice) with parameter: Parameter(name='minprice', type=<ParameterType.ANY: 'any'>, required=False, default=0, description='', choices=None, transform=<function TestPriceFilterExample.price_payload.<locals>.<lambda> at 0x1026ee520>, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:55:37 | INFO | payload.apply: processing payload kwarg (maxprice) with parameter: Parameter(name='maxprice', type=<ParameterType.ANY: 'any'>, required=False, default=1000, description='', choices=None, transform=<function TestPriceFilterExample.price_payload.<locals>.<lambda> at 0x1026ee3e0>, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:55:37 | INFO | payload.apply: processing conditional param (filters) with parameter: ConditionalParameter(name='filters', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False)
2025-04-06 11:55:37 | INFO | payload.apply: returning result: {'filters': '["price>=0", "price<=1000"]'}
2025-04-06 11:55:37 | INFO | payload.apply: received data: {'minprice': 100, 'maxprice': 500}
2025-04-06 11:55:37 | INFO | payload.apply: processing payload kwarg (minprice) with parameter: Parameter(name='minprice', type=<ParameterType.ANY: 'any'>, required=False, default=0, description='', choices=None, transform=<function TestPriceFilterExample.price_payload.<locals>.<lambda> at 0x1026ed1c0>, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:55:37 | INFO | payload.apply: processing payload kwarg (maxprice) with parameter: Parameter(name='maxprice', type=<ParameterType.ANY: 'any'>, required=False, default=1000, description='', choices=None, transform=<function TestPriceFilterExample.price_payload.<locals>.<lambda> at 0x1026ee2a0>, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:55:37 | INFO | payload.apply: processing conditional param (filters) with parameter: ConditionalParameter(name='filters', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False)
2025-04-06 11:55:37 | INFO | payload.apply: returning result: {'filters': '["price>=100", "price<=500"]'}
2025-04-06 11:55:37 | INFO | payload.apply: received data: {}
2025-04-06 11:55:37 | INFO | payload.apply: received data: {'helper': 'test'}
2025-04-06 11:55:37 | INFO | payload.apply: processing payload kwarg (helper) with parameter: Parameter(name='helper', type=<ParameterType.ANY: 'any'>, required=True, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:55:37 | INFO | payload.apply: processing conditional param (dependent) with parameter: ConditionalParameter(name='dependent', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False)
2025-04-06 11:55:37 | INFO | payload.apply: returning result: {'dependent': 'TEST'}
2025-04-06 11:55:37 | INFO | payload.apply: received data: {}
2025-04-06 11:55:37 | INFO | payload.apply: processing payload kwarg (normal1) with parameter: Parameter(name='normal1', type=<ParameterType.ANY: 'any'>, required=False, default='n1', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False)
2025-04-06 11:55:37 | INFO | payload.apply: processing payload kwarg (trans1) with parameter: Parameter(name='trans1', type=<ParameterType.ANY: 'any'>, required=False, default='t1', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:55:37 | INFO | payload.apply: processing payload kwarg (normal2) with parameter: Parameter(name='normal2', type=<ParameterType.ANY: 'any'>, required=False, default='n2', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False)
2025-04-06 11:55:37 | INFO | payload.apply: processing payload kwarg (trans2) with parameter: Parameter(name='trans2', type=<ParameterType.ANY: 'any'>, required=False, default='t2', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:55:37 | INFO | payload.apply: returning result: {'normal1': 'n1', 'normal2': 'n2'}
2025-04-06 11:55:37 | INFO | payload.apply: received data: {}
2025-04-06 11:55:37 | INFO | payload.apply: processing payload kwarg (helper) with parameter: Parameter(name='different_name', type=<ParameterType.ANY: 'any'>, required=False, default='value', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:55:37 | INFO | payload.apply: returning result: {}
2025-04-06 11:55:37 | INFO | payload.apply: received data: {'helper': 'not a number'}
2025-04-06 11:55:37 | INFO | payload.apply: received data: {'helper': 123}
2025-04-06 11:55:37 | INFO | payload.apply: processing payload kwarg (helper) with parameter: Parameter(name='helper', type=<ParameterType.NUMBER: 'number'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:55:37 | INFO | payload.apply: returning result: {}
2025-04-06 11:55:37 | INFO | payload.apply: received data: {}
2025-04-06 11:55:37 | INFO | payload.apply: processing payload kwarg (t1) with parameter: Parameter(name='t1', type=<ParameterType.ANY: 'any'>, required=False, default='A', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:55:37 | INFO | payload.apply: processing payload kwarg (t2) with parameter: Parameter(name='t2', type=<ParameterType.ANY: 'any'>, required=False, default='B', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:55:37 | INFO | payload.apply: processing payload kwarg (t3) with parameter: Parameter(name='t3', type=<ParameterType.ANY: 'any'>, required=False, default='C', description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:55:37 | INFO | payload.apply: processing conditional param (combined) with parameter: ConditionalParameter(name='combined', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False)
2025-04-06 11:55:37 | INFO | payload.apply: returning result: {'combined': 'A-B-C'}
2025-04-06 11:55:37 | INFO | payload.apply: received data: {}
2025-04-06 11:55:37 | INFO | payload.apply: processing payload kwarg (t1) with parameter: Parameter(name='t1', type=<ParameterType.ANY: 'any'>, required=False, default=5, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:55:37 | INFO | payload.apply: processing conditional param (t2) with parameter: ConditionalParameter(name='t2', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=True)
2025-04-06 11:55:37 | INFO | payload.apply: processing conditional param (final) with parameter: ConditionalParameter(name='final', type=<ParameterType.ANY: 'any'>, required=False, default=None, description='', choices=None, transform=None, valuemap=None, mapmethod=None, transient=False)
2025-04-06 11:55:37 | INFO | payload.apply: returning result: {'final': 15}
